00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/8/2021 12:32:49 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler V1.8(ish)
00000000                             3  * Written by : Brent and Parker
00000000                             4  * Date       : 3/4/21
00000000                             5  * Description: Final Project for CSS 422
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;************************ Define Constants ********************************* 
00000000  =0000000D                  9  CR                  EQU     $0D     ;carriage return
00000000  =0000000A                 10  LF                  EQU     $0a     ;line feed
00000000  =000A0000                 11  stack               EQU     $000A0000
00000000  =0000001E                 12  lines_per_screen    EQU     30
00000000  =00000040                 13  buffer_size         EQU     64      ;size of buffer
00000000  =0000F000                 14  nibble1             EQU     $F000   ;1st nibble in code (bits 15-12)
00000000  =00000F00                 15  nibble2             EQU     $0F00   ;2nd nibble in code (bits 11-8)
00000000  =000000F0                 16  nibble3             EQU     $00F0   ;3rd nibble in code (bits 7-4)
00000000  =0000000F                 17  nibble4             EQU     $000F   ;4th nibble in code (bits 3-0)
00000000  =00000001                 18  right1              EQU     1       ;shift 1 time
00000000  =00000002                 19  right2              EQU     2       ;shift 2 times
00000000  =00000003                 20  right3              EQU     3       ;shift 3 times to extract src mode
00000000  =00000004                 21  right4              EQU     4       ;shift 4 times to extract 3rd nibble
00000000  =00000005                 22  right5              EQU     5       ;shift 5 times (unused)
00000000  =00000006                 23  right6              EQU     6       ;shift 6 times to extract dst mode
00000000  =00000007                 24  right7              EQU     7       ;shift 7 times
00000000  =00000008                 25  right8              EQU     8       ;shift 8 to extract 2nd nibble
00000000  =00000009                 26  right9              EQU     9       ;shift 9 times to check 2nd nibble?
00000000  =0000000A                 27  right10             EQU     10      ;shift 10
00000000  =0000000C                 28  right12             EQU     12      ;shift 12 to extract 3rd byte
00000000  =00000010                 29  right16             EQU     16      ;shift 16 to extract 2nd byte
00000000  =00000018                 30  right24             EQU     24      ;shift 24 to extract 1st byte
00000000  =000001C0                 31  dest_mode           EQU     $01C0   ; --> 0000 0001 1100 0000 (used for destination in MOVE/MOVEA
00000000  =00000E00                 32  dest_reg            EQU     $0E00   ;destination register (0000 0111 0000 0000)
00000000                            33  
00000000  =00000000                 34  ea_type_immediate   EQU     0
00000000  =00000001                 35  ea_type_move        EQU     1
00000000  =00000002                 36  ea_type_movea       EQU     2
00000000  =0000000C                 37  ea_type_movea6      EQU     12
00000000  =00000003                 38  ea_type_lea         EQU     3
00000000  =00000004                 39  ea_type_destonly    EQU     4
00000000  =00000005                 40  ea_type_ext         EQU     5
00000000  =00000006                 41  ea_type_movem       EQU     6
00000000  =00000007                 42  ea_type_trap        EQU     7
00000000  =00000008                 43  ea_type_quick       EQU     8
00000000  =00000009                 44  ea_type_branch      EQU     9
00000000                            45  
00000000                            46  ;flags???
00000000                            47  
00000000                            48  
00000000                            49  
00001000                            50      ORG    $1000
00001000                            51  START:                              ;first instruction of program
00001000  4FF9 000A0000             52      LEA     stack, SP               ;SP @ $A0000
00001006                            53  
00001006                            54  
00001006                            55  
00001006                            56  ;********************************** Welcome Message ******************************************** 
00001006                            57  WELCOME:
00001006  43F9 00001C1A             58      LEA     welcome_message,A1      ;load the welcome message into A1
0000100C  103C 000E                 59      MOVE.B  #14,D0
00001010  4E4F                      60      TRAP    #15                     ;print contents of welcome_message
00001012                            61  
00001012                            62  
00001012                            63  ;*********************************** Get Starting Address *************************************** 
00001012                            64  GET_STARTING_ADDRESS:
00001012                            65      ;prompt for address
00001012  103C 000E                 66      MOVE.B  #14,D0    
00001016  43F9 00001C38             67      LEA     get_start_address,A1    ;load the get_start_address message into A1
0000101C  4E4F                      68      TRAP    #15                     ;print get_start_address
0000101E                            69      
0000101E                            70      ;get user input address, store, and convert
0000101E  43F9 00001D96             71      LEA     ascii_start,A1          ;store
00001024  103C 0002                 72      MOVE.B  #2,D0                   ;get user input    
00001028  4E4F                      73      TRAP    #15                     ;another trap to get input
0000102A  4EB9 0000170E             74      JSR     ATOI                    ;address is now in hex format in memory location
00001030                            75      
00001030                            76      
00001030                            77      ;at this point our address is in D4 in hex
00001030                            78      ;check if > 0
00001030  B8BC 00000000             79      CMP.L   #0,D4                       ;compare to D4
00001036  6F00 07A2                 80      BLE     STARTA_ERROR_LESS_THAN_ZERO ;branch to ERROR_LESS_THAN_ZERO if less than 0
0000103A                            81      
0000103A                            82      ;?? MOVE.L  (A1),D3
0000103A                            83      
0000103A                            84      ;address is > 0 so check if even / odd
0000103A  E29C                      85      ROR.L   #1,D4
0000103C  6500 07AC                 86      BCS     STARTA_ERROR_NOT_EVEN
00001040  E39C                      87      ROL.L   #1,D4    
00001042                            88      
00001042                            89      ;address is > 0 and verified even
00001042  2A39 00001D96             90      MOVE.l    (ascii_start),D5      ;load into A5
00001048  2A45                      91      MOVE.l    D5,A5                ;load into A5
0000104A                            92  
0000104A                            93  
0000104A                            94  ;******************************** Get Ending Address ******************************************** 
0000104A                            95  GET_ENDING_ADDRESS:
0000104A                            96      ;prompt for address 
0000104A  103C 000E                 97      MOVE.B  #14,D0
0000104E  43F9 00001C69             98      LEA     get_end_address,A1      ;load the get_end_address message into A1  
00001054  4E4F                      99      TRAP    #15                     ;print get_end_address
00001056                           100      
00001056                           101      ;get user input address, store, and convert
00001056  43F9 00001DAA            102      LEA     ascii_end,A1            ;store 
0000105C  103C 0002                103      MOVE.B  #2,D0                   ;get user input
00001060  4E4F                     104      TRAP    #15                     ;another trap to get intput
00001062  4EB9 0000170E            105      JSR ATOI
00001068                           106  
00001068                           107      ;perform checks:
00001068                           108      ;1.) even
00001068  E29C                     109      ROR.L   #1,D4
0000106A  6500 078E                110      BCS     ENDA_ERROR_NOT_EVEN
0000106E  E39C                     111      ROL.L   #1,D4    
00001070                           112      
00001070                           113      ;2.) less than 00FFFFFF
00001070  B8BC 00FFFFFF            114      CMP.L   #$00FFFFFF,D4
00001076  6C00 0792                115      BGE     ENDA_ERROR_LARGE    
0000107A                           116      
0000107A                           117      ;3.) greater than starting address
0000107A  BBC4                     118      CMP.L   D4,A5
0000107C  6C00 079C                119      BGE     ENDA_ERROR_LESS_THAN_STARTA
00001080                           120      
00001080                           121      ;good --> store in A6
00001080  2C39 00001DAA            122      MOVE.l    (ascii_end),D6      ;load into D6
00001086  2C46                     123      MOVE.l    D6,A6               ;load into A6
00001088                           124  
00001088                           125  
00001088                           126  ;************************************ Main Loop???? ***********************************************
00001088                           127  ;get pointer to first given address
00001088                           128  ;pull hex code from that address and store in A1?
00001088                           129  ;take hex code and go to OP_TABLE
00001088                           130  
00001088                           131  
00001088                           132  ;A5 = starting address
00001088                           133  ;A6 = ending address
00001088                           134  START_DECODING:
00001088                           135      ;CLR.L   D2                             ;clear screen line counter
00001088                           136  
00001088                           137  DECODING_LOOP:
00001088  4EB9 00001092            138      JSR     OP_START                       ;get complete line of instruction to decode   
0000108E                           139      
0000108E                           140  
0000108E                           141      ;print tot screen
0000108E                           142      
0000108E                           143      ;check if finished or if screen is filled
0000108E                           144      ;handle checks
0000108E                           145     
0000108E                           146      
0000108E                           147  DONE:
0000108E  FFFF FFFF                148      SIMHALT                                 ; halt simulator
00001092                           149  
00001092                           150  
00001092                           151  
00001092                           152  ;************************************ OP Stuff *************************************************************************************************************************** 
00001092                           153  
00001092                           154  ;A0 = POINTER TO OP_TABLE???
00001092                           155  ;A1 = 
00001092                           156  ;A2 = buffer (this is our decoded string that will print to screen)
00001092                           157  ;A3 = 
00001092                           158  ;A4 = current memory address for buffer (used for clearing????)
00001092                           159  ;A5 = starting address / current address in memory
00001092                           160  ;A6 = ending address
00001092                           161  ;A7 = SP
00001092                           162  
00001092                           163  ;D0
00001092                           164  ;D1
00001092                           165  ;D2 = ?
00001092                           166  ;D3 = buffer size (used for loop = 64)
00001092                           167  ;D4 = 
00001092                           168  ;D5
00001092                           169  ;D6
00001092                           170  ;D7
00001092                           171  
00001092                           172  OP_START
00001092                           173      ;get complete line? 
00001092                           174      ;everything happens in here
00001092                           175      
00001092                           176      ;MOVEM.L         D2/A6, -(SP)
00001092                           177  
00001092  4EB9 000010CA            178      JSR         OP_DATA_CLR         ;clear buffer
00001098  45F9 00001DBE            179      LEA         buffer, A2          ;A2 now points to buffer, which is cleared
0000109E                           180      
0000109E                           181  
0000109E                           182      ;print out current mem address by putting into buffer and then adding a ' ' (tab)
0000109E  7403                     183      MOVE.L      #$0003,D2           ;? BINARY --> 0011 ?
000010A0  4EB9 0000178E            184      JSR         ITOA_ADDRESS        ;convert A5 (current address) to ASCII and put in buffer
000010A6  14FC 0009                185      MOVE.B      #$09, (A2)+         ;adds a ' ' to buffer
000010AA                           186      
000010AA                           187      ;at this point buffer has the memory address and a space, ready for op code                     !!TESTED UP UNTIL THIS POINT AND GOOD!!
000010AA                           188      
000010AA  41F9 000010E0            189      LEA         OP_TABLE, A0
000010B0  4280                     190      CLR.L       D0
000010B2  301D                     191      MOVE.W      (A5)+,D0            ;moves opcode from current address into D0
000010B4  2200                     192      MOVE.L      D0,D1               ;should move into D1
000010B6  143C 000C                193      MOVE.B      #right12,D2         ;move immediate value 12 into D2
000010BA  E469                     194      LSR.W       D2,D1               ;shift D1 by 12 bits, leaving just 4 bits (this is our opcode???)
000010BC  C2FC 0006                195      MULU        #6,D1               ;computes opcode table jump displacement
000010C0  4EF0 1000                196      JMP         0(A0,D1)            ;jumps to opcode table entry (A0 = OP_TABLE)
000010C4                           197  
000010C4                           198  OP_FINISH:
000010C4  4CDF 4004                199      MOVEM.L     (SP)+, D2/A6
000010C8  4E75                     200      RTS                             ;returns to DECODING_LOOP !?!?!?!?!?
000010CA                           201  
000010CA                           202  
000010CA                           203  OP_DATA_CLR:
000010CA  4283                     204      CLR.L       D3                  ; ? What is D3????
000010CC                           205      ;MOVE.B      #buffer_size,D3     ; put 64 into D3
000010CC  163C 000A                206      MOVE.B      #10,D3     ; put 10 into D3                                                                 ;delete after testing and use 64
000010D0  49F9 00001DBE            207      LEA         buffer, A4          ; what address register?
000010D6                           208  
000010D6                           209  OP_DATA_CLR_LOOP:
000010D6  18FC 0000                210      MOVE.B      #0, (A4)+
000010DA  5343                     211      SUBI        #1, D3
000010DC  6EF8                     212      BGT         OP_DATA_CLR_LOOP
000010DE  4E75                     213      RTS                                 ;need RTS to return
000010E0                           214  
000010E0                           215  
000010E0                           216  ;********************************* jump table ****************************************
000010E0                           217  OP_TABLE:
000010E0  4EF9 00001140            218      JMP         opcode0000              ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)                                 $0
000010E6  4EF9 0000115A            219      JMP         opcode0001              ;MOVE.B                                                             $1    
000010EC  4EF9 00001160            220      JMP         opcode0010              ;MOVEA.L, MOVE.L                                                    $2
000010F2  4EF9 0000117A            221      JMP         opcode0011              ;MOVEA.W MOVE.W                                                     $3
000010F8  4EF9 00001194            222      JMP         opcode0100              ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP     $4
000010FE  4EF9 000011AE            223      JMP         opcode0101              ;ADDQ (SUBQ)                                                        $5
00001104  4EF9 000011CA            224      JMP         opcode0110              ;BRA.bw, BSR.bw (BEQ)                                               $6
0000110A  4EF9 000011E4            225      JMP         opcode0111              ;MOVEQ.l                                                            $7
00001110  4EF9 000011EA            226      JMP         opcode1000              ;DIVU (DIVS, OR)                                                    $8
00001116  4EF9 000011F0            227      JMP         opcode1001              ;SUB                                                                $9
0000111C  4EF9 000011F6            228      JMP         opcode1010              ;not assigned                                                       $A
00001122  4EF9 000011FC            229      JMP         opcode1011              ;CMP (EOR)                                                          $B
00001128  4EF9 00001202            230      JMP         opcode1100              ;MULU (MULS, AND)                                                   $C
0000112E  4EF9 00001208            231      JMP         opcode1101              ;ADD, ADDA                                                          $D
00001134  4EF9 00001224            232      JMP         opcode1110              ;ASL, ASR (LSL, LSR, ROL, ROR)                                      $E
0000113A  4EF9 00001244            233      JMP         opcode1111              ;not assigned                                                       $F
00001140                           234  
00001140                           235  
00001140                           236  
00001140                           237  
00001140                           238  ;A0 = POINTER TO OP_TABLE???
00001140                           239  ;A1 = 
00001140                           240  ;A2 = buffer (this is our decoded string that will print to screen)
00001140                           241  ;A3 = pointer to op_xxx_table
00001140                           242  ;A4 = current memory address for buffer (used for clearing????)
00001140                           243  ;A5 = starting address / current address in memory
00001140                           244  ;A6 = ending address
00001140                           245  ;A7 = SP
00001140                           246  
00001140                           247  ;D0 = full instruction
00001140                           248  ;D1 = full instruction for manipulating (temporary)
00001140                           249  ;D2 = will store immediate value for comparing
00001140                           250  ;D3 = buffer size (used for loop = 64)
00001140                           251  ;D4 = 
00001140                           252  ;D5 = 
00001140                           253  ;D6 = 
00001140                           254  ;D7 = 
00001140                           255  
00001140                           256  
00001140                           257  
00001140                           258  ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)                                 $0
00001140                           259  opcode0000:                                 
00001140  2200                     260      MOVE.L      D0,D1                   ;D1 has full instruction
00001142  0241 0F00                261      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
00001146  143C 0008                262      MOVE.B      #right8, D2             ;store immediate value 8 in D2
0000114A  E469                     263      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
0000114C  C2FC 0006                264      MULU        #6, D1                  ;multiply by 6 to get displacement
00001150  47F9 0000124A            265      LEA         OP_0000_TABLE, A3       ;load op_0000_table into address register
00001156  4EF3 1000                266      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
0000115A                           267  
0000115A                           268  ;MOVE.B                                                             $1
0000115A                           269  opcode0001:
0000115A  4EF9 00001432            270      JMP         OP_MOVEB                ;no need to break down, only MOVE.B
00001160                           271  
00001160                           272  
00001160                           273  ;MOVEA.L, MOVE.L                                                    $2
00001160                           274  opcode0010:
00001160  2200                     275      MOVE.L      D0,D1                   ;D1 has full instruction
00001162  0241 01C0                276      ANDI        #dest_mode, D1          ;0000 0001 1100 0000
00001166  143C 0006                277      MOVE.B      #right6, D2             ;D2 now 00000111
0000116A  E469                     278      LSR.W       D2, D1                  ;shifting destination mode in D1 to far right by 3
0000116C  B23C 0001                279      CMP.B       #1,D1                   ;does d1 = 001?
00001170  6700 02E4                280      BEQ         OP_MOVEAL               ;if d1 = 001, go to MOVEA
00001174  4EF9 0000147E            281      JMP         OP_MOVEL                ;else jump to MOVEL
0000117A                           282      
0000117A                           283  
0000117A                           284  
0000117A                           285  
0000117A                           286  ;MOVEA.W MOVE.W                                                     $3
0000117A                           287  opcode0011:
0000117A  2200                     288      MOVE.L      D0,D1                   ;D1 has full instruction
0000117C  0241 01C0                289      ANDI        #dest_mode, D1          ;0000 0001 1100 0000
00001180  143C 0006                290      MOVE.B      #right6, D2             ;D2 now 00000111
00001184  E469                     291      LSR.W       D2, D1                  ;shifting destination mode in D1 to far right by 3
00001186  B23C 0001                292      CMP.B       #1,D1                   ;does d1 = 001?
0000118A  6700 0316                293      BEQ         OP_MOVEAW               ;if d1 = 001, go to MOVEAW
0000118E  4EF9 000014CA            294      JMP         OP_MOVEW                ;else jump to MOVEW
00001194                           295  
00001194                           296  
00001194                           297  
00001194                           298  
00001194                           299  ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP)     $4
00001194                           300  opcode0100:
00001194  2200                     301      MOVE.L      D0,D1                   ;D1 has full instruction
00001196  0241 0F00                302      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
0000119A  143C 0008                303      MOVE.B      #right8, D2             ;store immediate value 8 in D2
0000119E  E469                     304      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
000011A0  C2FC 0006                305      MULU        #6, D1                  ;multiply by 6 to get displacement
000011A4  47F9 000012AA            306      LEA         OP_0100_TABLE, A3       ;load op_0000_table into address register
000011AA  4EF3 1000                307      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
000011AE                           308  
000011AE                           309  
000011AE                           310  ;ADDQ (SUBQ)                                                        $5
000011AE                           311  opcode0101:
000011AE                           312      ;JMP         OP_ADDQ
000011AE                           313      
000011AE                           314      
000011AE                           315      ;3/8/21
000011AE  2200                     316      MOVE.L      D0,D1
000011B0  0241 0F00                317      ANDI.W      #nibble2,D1
000011B4  E049                     318      LSR.W       #right8,D1
000011B6  0241 0001                319      ANDI.W      #1,D1
000011BA  B23C 0000                320      CMP.B       #0,D1
000011BE  6700 037C                321      BEQ         OP_ADDQ
000011C2  B23C 0001                322      CMP.B       #1,D1   
000011C6  6700 0396                323      BEQ         OP_SUBQ
000011CA                           324      ;HANDLE ERROR
000011CA                           325  
000011CA                           326  
000011CA                           327  ;EA_ADDQ_SUBQ:
000011CA                           328  ;    ;CHECK BIT 8 FOR ADDQ OR SUBQ
000011CA                           329  ;    CMP.W       #nibble2,D1
000011CA                           330  ;    LSR.W       #right7,D1     
000011CA                           331  ;    ANDI.W      #1,D1
000011CA                           332  ;    CMP.B       #0,D1
000011CA                           333  ;    BEQ         EA_ADDQ
000011CA                           334  ;    CMP.B       #1,D1  
000011CA                           335  ;    BEQ         EA_SUBQ
000011CA                           336  ;    ;HANDLE ERROR      
000011CA                           337  
000011CA                           338  
000011CA                           339  ;BRA.bw, BSR.bw (BEQ)                                               $6
000011CA                           340  opcode0110:
000011CA  2200                     341      MOVE.L      D0,D1                   ;D1 has full instruction
000011CC  0241 0F00                342      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
000011D0  143C 0008                343      MOVE.B      #right8, D2             ;store immediate value 8 in D2
000011D4  E469                     344      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
000011D6  C2FC 0006                345      MULU        #6, D1                  ;multiply by 6 to get displacement
000011DA  47F9 0000130A            346      LEA         OP_0110_TABLE, A3       ;load op_0110_table into address register
000011E0  4EF3 1000                347      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
000011E4                           348      
000011E4                           349      ;come back and check when debugging. if this does not work then skip jump table
000011E4                           350  
000011E4                           351  
000011E4                           352  ;MOVEQ                                                            $7
000011E4                           353  opcode0111:
000011E4  4EF9 000015B0            354      JMP         OP_MOVEQ
000011EA                           355  
000011EA                           356  
000011EA                           357  
000011EA                           358  ;DIVU (DIVS, OR)                                                    $8
000011EA                           359  opcode1000:
000011EA  4EF9 000015D0            360      JMP         OP_DIVU
000011F0                           361  
000011F0                           362  
000011F0                           363  ;SUB                                                                $9
000011F0                           364  opcode1001:
000011F0  4EF9 000015EA            365      JMP         OP_SUB
000011F6                           366  
000011F6                           367  
000011F6                           368  ;not assigned                                                       $A
000011F6                           369  opcode1010:
000011F6  4EF9 000016B0            370      JMP         OP_UNSUPPORTED_OPCODE
000011FC                           371  
000011FC                           372  
000011FC                           373  ;CMP (EOR)                                                          $B
000011FC                           374  opcode1011:
000011FC  4EF9 00001606            375      JMP         OP_CMP
00001202                           376  
00001202                           377  
00001202                           378  ;MULU (MULS, AND)                                                   $C
00001202                           379  opcode1100:
00001202  4EF9 00001622            380      JMP         OP_MULU
00001208                           381  
00001208                           382  
00001208                           383  ;ADD, ADDA                                                          $D
00001208                           384  opcode1101:
00001208                           385      ;ADD and ADDA differ on bits 6,7... ADD will never be 11 for bits 6,7... use as check
00001208  4241                     386      CLR         D1
0000120A  4242                     387      CLR         D2
0000120C  2200                     388      MOVE.L      D0,D1
0000120E  0241 00F0                389      ANDI.W      #nibble3, D1
00001212  143C 0006                390      MOVE.B      #right6, D2
00001216  E469                     391      LSR.W       D2,D1
00001218                           392      
00001218                           393      ;at this point we have our bits of interest in bits 1,0
00001218                           394      
00001218  B27C 0003                395      CMP         #3,D1                              ;check if bits == 11
0000121C  6700 043A                396      BEQ         OP_ADDA                             ;if yes, branch ADDA
00001220  6000 041A                397      BRA         OP_ADD                              ;else branch ADD
00001224                           398  
00001224                           399  
00001224                           400  
00001224                           401  ;ASL, ASR (LSL, LSR, ROL, ROR)                                      $E
00001224                           402  opcode1110:
00001224  4241                     403      CLR D1
00001226  4242                     404      CLR D2
00001228  2200                     405      MOVE.L      D0, D1
0000122A  0241 0F00                406      ANDI.W      #nibble2, D1
0000122E  143C 0008                407      MOVE.B      #right8, D2
00001232  E469                     408      LSR.W       D2, D1                              ;D1 has 0003 or 0004
00001234  0241 0001                409      ANDI.W      #0001,D1                           ;isolate single bit
00001238                           410      
00001238                           411      ;at this point we have our single bit of interest in bit 0
00001238                           412      
00001238  B27C 0000                413      CMP         #0,D1                           ;check if bit == 0
0000123C  6700 0456                414      BEQ         OP_ASR                          ;if yes, branch to ASR
00001240  6000 0436                415      BRA         OP_ASL                          ;else, branch to ASL
00001244                           416  
00001244                           417  
00001244                           418  ;not assigned                                                       $F
00001244                           419  opcode1111:
00001244  4EF9 000016B0            420      JMP         OP_UNSUPPORTED_OPCODE
0000124A                           421  
0000124A                           422  
0000124A                           423  ;******************************** OP_XXX_TABLES ************************************
0000124A                           424  ;once in OP_XXX_TABLE , we will use these entries to jump to specific op code to put into buffer
0000124A                           425  
0000124A                           426  OP_0000_TABLE:
0000124A  4EF9 0000136A            427      jmp OP_ORI                                      ;0  
00001250  4EF9 000016B0            428      jmp OP_UNSUPPORTED_OPCODE                       ;1
00001256  4EF9 00001388            429      jmp OP_ANDI                                     ;2
0000125C  4EF9 000016B0            430      jmp OP_UNSUPPORTED_OPCODE                       ;3
00001262  4EF9 000013AA            431      jmp OP_SUBI                                     ;4
00001268  4EF9 000016B0            432      jmp OP_UNSUPPORTED_OPCODE                       ;5
0000126E  4EF9 000013CC            433      jmp OP_ADDI                                     ;6
00001274  4EF9 000016B0            434      jmp OP_UNSUPPORTED_OPCODE                       ;7
0000127A  4EF9 000016B0            435      jmp OP_UNSUPPORTED_OPCODE                       ;8
00001280  4EF9 000016B0            436      jmp OP_UNSUPPORTED_OPCODE                       ;9
00001286  4EF9 000013EE            437      jmp OP_EORI                                     ;10
0000128C  4EF9 000016B0            438      jmp OP_UNSUPPORTED_OPCODE                       ;11
00001292  4EF9 00001410            439      jmp OP_CMPI                                     ;12
00001298  4EF9 000016B0            440      jmp OP_UNSUPPORTED_OPCODE                       ;13
0000129E  4EF9 000016B0            441      jmp OP_UNSUPPORTED_OPCODE                       ;14
000012A4  4EF9 000016B0            442      jmp OP_UNSUPPORTED_OPCODE                       ;15
000012AA                           443  
000012AA                           444  ;OP_0001_TABLE:
000012AA                           445  ;    jmp OP_MOVEB
000012AA                           446  
000012AA                           447  
000012AA                           448  ;OP_0010_TABLE:
000012AA                           449  ;   jmp OP_MOVEAL
000012AA                           450  ;   jmp OP_MOVEL
000012AA                           451  
000012AA                           452  
000012AA                           453  ;OP_0011_TABLE:
000012AA                           454  
000012AA                           455  
000012AA                           456  
000012AA                           457  ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP     $4
000012AA                           458  ;NOP    1110
000012AA                           459  ;MOVEM  1D00
000012AA                           460  ;LEA    AN1
000012AA                           461  OP_0100_TABLE:
000012AA  4EF9 000016B0            462      jmp OP_UNSUPPORTED_OPCODE                           ;0  
000012B0  4EF9 00001524            463      jmp OP_LEA                                          ;1      (address 0001)
000012B6  4EF9 000016B0            464      jmp OP_UNSUPPORTED_OPCODE                           ;2
000012BC  4EF9 00001524            465      jmp OP_LEA                                          ;3      (address 0011)
000012C2  4EF9 000016B0            466      jmp OP_UNSUPPORTED_OPCODE                           ;4 
000012C8  4EF9 00001524            467      jmp OP_LEA                                          ;5      (address 0101)
000012CE  4EF9 000016B0            468      jmp OP_UNSUPPORTED_OPCODE                           ;6 
000012D4  4EF9 00001524            469      jmp OP_LEA                                          ;7      (address 0111) 
000012DA  4EF9 000014FE            470      jmp OP_MOVEM                                        ;8                          ;jmp OP_MOVEM_R2M
000012E0  4EF9 00001524            471      jmp OP_LEA                                          ;9      (address 1001) 
000012E6  4EF9 000016B0            472      jmp OP_UNSUPPORTED_OPCODE                           ;10 
000012EC  4EF9 00001524            473      jmp OP_LEA                                          ;11     (address 1011) 
000012F2  4EF9 000014FE            474      jmp OP_MOVEM                                        ;12                         ;jmp OP_MOVEM_M2R    
000012F8  4EF9 00001524            475      jmp OP_LEA                                          ;13     (address 1101)
000012FE  4EF9 000014EE            476      jmp OP_NOP                                          ;14
00001304  4EF9 00001524            477      jmp OP_LEA                                          ;15     (address 1111)
0000130A                           478  
0000130A                           479  
0000130A                           480  ;OP_0101_TABLE:
0000130A                           481  
0000130A                           482  
0000130A                           483  
0000130A                           484  ;BRA nibble 2 = 0000 (0) , BSR nibble 2 = 0001 (1)
0000130A                           485  OP_0110_TABLE:
0000130A  4EF9 00001580            486      jmp OP_BRA                                          ;0
00001310  4EF9 00001598            487      jmp OP_BSR                                          ;1
00001316  4EF9 000016B0            488      jmp OP_UNSUPPORTED_OPCODE                           ;2
0000131C  4EF9 000016B0            489      jmp OP_UNSUPPORTED_OPCODE                           ;3
00001322  4EF9 000016B0            490      jmp OP_UNSUPPORTED_OPCODE                           ;4
00001328  4EF9 000016B0            491      jmp OP_UNSUPPORTED_OPCODE                           ;5
0000132E  4EF9 000016B0            492      jmp OP_UNSUPPORTED_OPCODE                           ;6
00001334  4EF9 000016B0            493      jmp OP_UNSUPPORTED_OPCODE                           ;7
0000133A  4EF9 000016B0            494      jmp OP_UNSUPPORTED_OPCODE                           ;8
00001340  4EF9 000016B0            495      jmp OP_UNSUPPORTED_OPCODE                           ;9
00001346  4EF9 000016B0            496      jmp OP_UNSUPPORTED_OPCODE                           ;10
0000134C  4EF9 000016B0            497      jmp OP_UNSUPPORTED_OPCODE                           ;11
00001352  4EF9 000016B0            498      jmp OP_UNSUPPORTED_OPCODE                           ;12
00001358  4EF9 000016B0            499      jmp OP_UNSUPPORTED_OPCODE                           ;13
0000135E  4EF9 000016B0            500      jmp OP_UNSUPPORTED_OPCODE                           ;14
00001364  4EF9 000016B0            501      jmp OP_UNSUPPORTED_OPCODE                           ;15
0000136A                           502  
0000136A                           503  
0000136A                           504  ;OP_0111_TABLE:
0000136A                           505  ;implement later if needed
0000136A                           506  
0000136A                           507  
0000136A                           508  ;OP_1000_TABLE:
0000136A                           509  ;implement later if needed
0000136A                           510  
0000136A                           511  
0000136A                           512  ;OP_1001_TABLE:
0000136A                           513  ;implement later if needed
0000136A                           514  
0000136A                           515  
0000136A                           516  ;OP_1010_TABLE:
0000136A                           517  ;implement later if needed
0000136A                           518  
0000136A                           519  
0000136A                           520  ;OP_1011_TABLE:
0000136A                           521  ;implement later if needed
0000136A                           522  
0000136A                           523  
0000136A                           524  ;OP_1100_TABLE:
0000136A                           525  ;implement later if needed
0000136A                           526  
0000136A                           527  
0000136A                           528  ;OP_1101_TABLE:
0000136A                           529  ;implement later if needed
0000136A                           530  
0000136A                           531  
0000136A                           532  ;OP_1110_TABLE:
0000136A                           533  ;implement later if needed
0000136A                           534  
0000136A                           535  
0000136A                           536  ;OP_1111_TABLE:
0000136A                           537  ;implement later if needed
0000136A                           538  
0000136A                           539  
0000136A                           540  
0000136A                           541  
0000136A                           542  ;******************************** OP_INSTRUCTION_XXXX******************************************
0000136A                           543  ;this is where we are putting ascii text into buffer
0000136A                           544  
0000136A                           545  
0000136A                           546  OP_ORI:
0000136A  14FC 004F                547      MOVE.B  #'O', (A2)+
0000136E  14FC 0052                548      MOVE.B  #'R', (A2)+
00001372  14FC 0049                549      MOVE.B  #'I', (A2)+
00001376                           550      
00001376                           551      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001376  4EB9 000016B0            552      JSR     OP_CHECK_SIZE
0000137C                           553      
0000137C  7200                     554      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
0000137E                           555  
0000137E  4EB9 0000182A            556      JSR     EA_START
00001384  4EF8 10C4                557      JMP     OP_FINISH
00001388                           558  
00001388                           559  OP_ANDI:  ;(optional)
00001388  14FC 0041                560      MOVE.B  #'A', (A2)+
0000138C  14FC 004E                561      MOVE.B  #'N', (A2)+
00001390  14FC 0044                562      MOVE.B  #'D', (A2)+
00001394  14FC 0049                563      MOVE.B  #'I', (A2)+
00001398                           564      
00001398                           565      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001398  4EB9 000016B0            566      JSR     OP_CHECK_SIZE
0000139E                           567      
0000139E  7200                     568      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013A0                           569  
000013A0  4EB9 0000182A            570      JSR     EA_START
000013A6  4EF8 10C4                571      JMP     OP_FINISH
000013AA                           572  
000013AA                           573  
000013AA                           574  OP_SUBI:  ;(optional)
000013AA  14FC 0053                575      MOVE.B  #'S', (A2)+
000013AE  14FC 0055                576      MOVE.B  #'U', (A2)+
000013B2  14FC 0042                577      MOVE.B  #'B', (A2)+
000013B6  14FC 0049                578      MOVE.B  #'I', (A2)+
000013BA                           579      
000013BA                           580      ;call OP_CHECK_SIZE to append a .b/.w/.l
000013BA  4EB9 000016B0            581      JSR     OP_CHECK_SIZE
000013C0                           582      
000013C0  7200                     583      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013C2                           584  
000013C2  4EB9 0000182A            585      JSR     EA_START
000013C8  4EF8 10C4                586      JMP     OP_FINISH
000013CC                           587  
000013CC                           588  
000013CC                           589  OP_ADDI:  ;(optional)
000013CC  14FC 0041                590      MOVE.B  #'A', (A2)+
000013D0  14FC 0044                591      MOVE.B  #'D', (A2)+
000013D4  14FC 0044                592      MOVE.B  #'D', (A2)+
000013D8  14FC 0049                593      MOVE.B  #'I', (A2)+
000013DC                           594      
000013DC                           595      ;call OP_CHECK_SIZE to append a .b/.w/.l
000013DC  4EB9 000016B0            596      JSR     OP_CHECK_SIZE
000013E2                           597     
000013E2  7200                     598      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013E4                           599  
000013E4  4EB9 0000182A            600      JSR     EA_START
000013EA  4EF8 10C4                601      JMP     OP_FINISH
000013EE                           602  
000013EE                           603  
000013EE                           604  OP_EORI:  ;(optional)
000013EE  14FC 0045                605      MOVE.B  #'E', (A2)+
000013F2  14FC 004F                606      MOVE.B  #'O', (A2)+
000013F6  14FC 0052                607      MOVE.B  #'R', (A2)+
000013FA  14FC 0049                608      MOVE.B  #'I', (A2)+
000013FE                           609      
000013FE                           610      ;call OP_CHECK_SIZE to append a .b/.w/.l
000013FE  4EB9 000016B0            611      JSR     OP_CHECK_SIZE
00001404                           612      
00001404  7200                     613      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001406                           614      
00001406  4EB9 0000182A            615      JSR     EA_START
0000140C  4EF8 10C4                616      JMP     OP_FINISH
00001410                           617  
00001410                           618  
00001410                           619  OP_CMPI:  ;(optional)
00001410  14FC 0043                620      MOVE.B  #'C', (A2)+
00001414  14FC 004D                621      MOVE.B  #'M', (A2)+
00001418  14FC 0050                622      MOVE.B  #'P', (A2)+
0000141C  14FC 0049                623      MOVE.B  #'I', (A2)+
00001420                           624      
00001420                           625      
00001420                           626      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001420  4EB9 000016B0            627      JSR     OP_CHECK_SIZE
00001426                           628  
00001426  7200                     629      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001428                           630  
00001428  4EB9 0000182A            631      JSR     EA_START
0000142E  4EF8 10C4                632      JMP     OP_FINISH
00001432                           633  
00001432                           634  
00001432                           635  OP_MOVEB:
00001432  14FC 004D                636      MOVE.B  #'M', (A2)+
00001436  14FC 004F                637      MOVE.B  #'O', (A2)+
0000143A  14FC 0056                638      MOVE.B  #'V', (A2)+
0000143E  14FC 0045                639      MOVE.B  #'E', (A2)+
00001442  14FC 002E                640      MOVE.B  #'.', (A2)+
00001446  14FC 0042                641      MOVE.B  #'B', (A2)+
0000144A                           642      
0000144A  7201                     643      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
0000144C                           644      
0000144C  4EB9 0000182A            645      JSR     EA_START
00001452  4EF8 10C4                646      JMP     OP_FINISH
00001456                           647  
00001456                           648  OP_MOVEAL:
00001456  14FC 004D                649      MOVE.B  #'M', (A2)+
0000145A  14FC 004F                650      MOVE.B  #'O', (A2)+
0000145E  14FC 0056                651      MOVE.B  #'V', (A2)+
00001462  14FC 0045                652      MOVE.B  #'E', (A2)+
00001466  14FC 0041                653      MOVE.B  #'A', (A2)+
0000146A  14FC 002E                654      MOVE.B  #'.', (A2)+
0000146E  14FC 004C                655      MOVE.B  #'L', (A2)+
00001472                           656      
00001472  7202                     657      MOVE.L  #ea_type_movea, D1                   ;preps for EA_START and puts 2 into D1
00001474                           658      
00001474  4EB9 0000182A            659      JSR     EA_START
0000147A  4EF8 10C4                660      JMP     OP_FINISH
0000147E                           661  
0000147E                           662  OP_MOVEL:
0000147E  14FC 004D                663      MOVE.B  #'M', (A2)+
00001482  14FC 004F                664      MOVE.B  #'O', (A2)+
00001486  14FC 0056                665      MOVE.B  #'V', (A2)+
0000148A  14FC 0045                666      MOVE.B  #'E', (A2)+
0000148E  14FC 002E                667      MOVE.B  #'.', (A2)+
00001492  14FC 004C                668      MOVE.B  #'L', (A2)+
00001496                           669      
00001496  7201                     670      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
00001498                           671      
00001498  4EB9 0000182A            672      JSR     EA_START
0000149E  4EF8 10C4                673      JMP     OP_FINISH
000014A2                           674  
000014A2                           675  
000014A2                           676  OP_MOVEAW:
000014A2  14FC 004D                677      MOVE.B  #'M', (A2)+
000014A6  14FC 004F                678      MOVE.B  #'O', (A2)+
000014AA  14FC 0056                679      MOVE.B  #'V', (A2)+
000014AE  14FC 0045                680      MOVE.B  #'E', (A2)+
000014B2  14FC 0041                681      MOVE.B  #'A', (A2)+
000014B6  14FC 002E                682      MOVE.B  #'.', (A2)+
000014BA  14FC 0057                683      MOVE.B  #'W', (A2)+
000014BE                           684      
000014BE  7202                     685      MOVE.L  #ea_type_movea, D1                   ;preps for EA_START and puts 2 into D1
000014C0                           686      
000014C0  4EB9 0000182A            687      JSR     EA_START
000014C6  4EF8 10C4                688      JMP     OP_FINISH
000014CA                           689  
000014CA                           690  
000014CA                           691  OP_MOVEW:
000014CA  14FC 004D                692      MOVE.B  #'M', (A2)+
000014CE  14FC 004F                693      MOVE.B  #'O', (A2)+
000014D2  14FC 0056                694      MOVE.B  #'V', (A2)+
000014D6  14FC 0045                695      MOVE.B  #'E', (A2)+
000014DA  14FC 002E                696      MOVE.B  #'.', (A2)+
000014DE  14FC 0057                697      MOVE.B  #'W', (A2)+
000014E2                           698      
000014E2  7201                     699      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
000014E4                           700      
000014E4  4EB9 0000182A            701      JSR     EA_START
000014EA  4EF8 10C4                702      JMP     OP_FINISH
000014EE                           703  
000014EE                           704  
000014EE                           705  OP_NOP:
000014EE  14FC 004E                706      MOVE.B  #'N', (A2)+
000014F2  14FC 004F                707      MOVE.B  #'O', (A2)+
000014F6  14FC 0050                708      MOVE.B  #'P', (A2)+
000014FA                           709      
000014FA                           710      ;NO EA
000014FA  4EF8 10C4                711      JMP     OP_FINISH
000014FE                           712  
000014FE                           713  
000014FE                           714  OP_MOVEM:
000014FE                           715      ;see movemd2r or movemr2d... see below at bottom ?????
000014FE                           716      
000014FE  14FC 004D                717      MOVE.B  #'M', (A2)+
00001502  14FC 004F                718      MOVE.B  #'O', (A2)+
00001506  14FC 0056                719      MOVE.B  #'V', (A2)+
0000150A  14FC 0045                720      MOVE.B  #'E', (A2)+
0000150E  14FC 004D                721      MOVE.B  #'M', (A2)+
00001512                           722      
00001512                           723      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001512  4EB9 000016B0            724      JSR     OP_CHECK_SIZE
00001518                           725      
00001518  7206                     726      MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
0000151A                           727      
0000151A  4EB9 0000182A            728      JSR     EA_START
00001520  4EF8 10C4                729      JMP     OP_FINISH
00001524                           730  
00001524                           731  OP_LEA:
00001524  14FC 004C                732      MOVE.B  #'L', (A2)+
00001528  14FC 0045                733      MOVE.B  #'E', (A2)+
0000152C  14FC 0041                734      MOVE.B  #'A', (A2)+
00001530                           735      
00001530  7203                     736      MOVE.L  #ea_type_lea, D1                   ;preps for EA_START and puts 3 into D1
00001532                           737      
00001532  4EB9 0000182A            738      JSR     EA_START
00001538  4EF8 10C4                739      JMP     OP_FINISH
0000153C                           740  
0000153C                           741  OP_CLR:  ;(optional)
0000153C                           742  ;implement later if needed
0000153C                           743  
0000153C                           744  
0000153C                           745  OP_NOT:  ;(optional)
0000153C                           746  ;implement later if needed
0000153C                           747  
0000153C                           748  
0000153C                           749  OP_EXT:  ;(optional)
0000153C                           750  ;implement later if needed
0000153C                           751  
0000153C                           752  
0000153C                           753  OP_TRAP:  ;(optional)
0000153C                           754  ;implement later if needed
0000153C                           755  
0000153C                           756   
0000153C                           757  OP_STOP:  ;(optional)
0000153C                           758  ;implement later if needed
0000153C                           759  
0000153C                           760  
0000153C                           761  OP_RTE:  ;(optional)
0000153C                           762  ;implement later if needed
0000153C                           763  
0000153C                           764  
0000153C                           765  OP_RTS:  ;(optional)
0000153C                           766  ;implement later if needed
0000153C                           767  
0000153C                           768  
0000153C                           769  OP_JSR:  ;(optional)
0000153C                           770  ;implement later if needed
0000153C                           771  
0000153C                           772  
0000153C                           773  OP_JMP:  ;(optional)
0000153C                           774  ;implement later if needed
0000153C                           775  
0000153C                           776  
0000153C                           777  OP_ADDQ:
0000153C  14FC 0041                778      MOVE.B  #'A', (A2)+
00001540  14FC 0044                779      MOVE.B  #'D', (A2)+
00001544  14FC 0044                780      MOVE.B  #'D', (A2)+
00001548  14FC 0051                781      MOVE.B  #'Q', (A2)+
0000154C                           782      
0000154C                           783      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000154C  4EB9 000016B0            784      JSR     OP_CHECK_SIZE
00001552                           785  
00001552  7208                     786      MOVE.L  #ea_type_quick, D1                   ;preps for EA_START and puts 8 into D1
00001554                           787  
00001554  4EB9 0000182A            788      JSR     EA_START
0000155A  4EF8 10C4                789      JMP     OP_FINISH
0000155E                           790  
0000155E                           791  OP_SUBQ:  ;(optional)
0000155E  14FC 0053                792      MOVE.B  #'S', (A2)+
00001562  14FC 0055                793      MOVE.B  #'U', (A2)+
00001566  14FC 0042                794      MOVE.B  #'B', (A2)+
0000156A  14FC 0051                795      MOVE.B  #'Q', (A2)+
0000156E                           796      
0000156E                           797      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000156E  4EB9 000016B0            798      JSR     OP_CHECK_SIZE
00001574                           799      
00001574  7208                     800      MOVE.L  #ea_type_quick, D1                   ;preps for EA_START and puts 8 into D1
00001576                           801  
00001576  4EB9 0000182A            802      JSR     EA_START
0000157C  4EF8 10C4                803      JMP     OP_FINISH
00001580                           804  
00001580                           805  OP_BRA:                                     ;???? DO WE DEFINE SIZE HERE OR AFTER????
00001580  14FC 0042                806      MOVE.B  #'B', (A2)+
00001584  14FC 0052                807      MOVE.B  #'R', (A2)+
00001588  14FC 0041                808      MOVE.B  #'A', (A2)+
0000158C                           809  
0000158C  7209                     810      MOVE.L  #ea_type_branch,D1
0000158E                           811      
0000158E  4EB9 0000182A            812      JSR     EA_START
00001594  4EF8 10C4                813      JMP     OP_FINISH
00001598                           814  
00001598                           815  
00001598                           816  OP_BSR:
00001598  14FC 0042                817      MOVE.B  #'B', (A2)+
0000159C  14FC 0053                818      MOVE.B  #'S', (A2)+
000015A0  14FC 0052                819      MOVE.B  #'R', (A2)+
000015A4                           820      
000015A4  7209                     821      MOVE.L  #ea_type_branch,D1
000015A6                           822      
000015A6  4EB9 0000182A            823      JSR     EA_START                        ;DO WE HAVE EA?
000015AC  4EF8 10C4                824      JMP     OP_FINISH
000015B0                           825  
000015B0                           826  
000015B0                           827  OP_BEQ:
000015B0                           828  ;implement later if needed
000015B0                           829  
000015B0                           830  
000015B0                           831  OP_MOVEQ:
000015B0  14FC 004D                832      MOVE.B  #'M', (A2)+
000015B4  14FC 004F                833      MOVE.B  #'O', (A2)+
000015B8  14FC 0056                834      MOVE.B  #'V', (A2)+
000015BC  14FC 0045                835      MOVE.B  #'E', (A2)+
000015C0  14FC 0051                836      MOVE.B  #'Q', (A2)+
000015C4                           837      
000015C4                           838      ;DO WE NEED A .L ?
000015C4                           839      
000015C4  7208                     840      MOVE.L  #ea_type_quick, D1                   ;preps for EA_START and puts 8 into D1
000015C6                           841      
000015C6  4EB9 0000182A            842      JSR     EA_START
000015CC  4EF8 10C4                843      JMP     OP_FINISH
000015D0                           844  
000015D0                           845  
000015D0                           846  OP_DIVU:
000015D0  14FC 0044                847      MOVE.B  #'D', (A2)+
000015D4  14FC 0049                848      MOVE.B  #'I', (A2)+
000015D8  14FC 0056                849      MOVE.B  #'V', (A2)+
000015DC  14FC 0055                850      MOVE.B  #'U', (A2)+
000015E0                           851      ;MOVE.B  #'.', (A2)+
000015E0                           852      ;MOVE.B  #'W', (A2)+  
000015E0                           853    
000015E0  4EB9 0000182A            854      JSR     EA_START
000015E6  4EF8 10C4                855      JMP     OP_FINISH    
000015EA                           856  
000015EA                           857  
000015EA                           858  OP_DIVS  ;(optional)
000015EA                           859  ;implement later if needed
000015EA                           860  
000015EA                           861  
000015EA                           862  OP_OR  ;(optional)
000015EA                           863  ;implement later if needed
000015EA                           864  
000015EA                           865  
000015EA                           866  OP_SUB:
000015EA  14FC 0053                867      MOVE.B  #'S', (A2)+
000015EE  14FC 0055                868      MOVE.B  #'U', (A2)+
000015F2  14FC 0042                869      MOVE.B  #'B', (A2)+
000015F6                           870  
000015F6                           871      ;to determine size... bits 7 and 6? (.b, .w, .l)
000015F6                           872      ;D0 HAS COMPLETE OP CODE INSTRUCTION (XXXX)
000015F6                           873      
000015F6                           874      ;call OP_CHECK_SIZE to append a .b/.w/.l
000015F6  4EB9 000016B0            875      JSR     OP_CHECK_SIZE
000015FC                           876      
000015FC                           877      ;at this point it will return with SUB.X and go to EA_START
000015FC  4EB9 0000182A            878      JSR     EA_START
00001602  4EF8 10C4                879      JMP     OP_FINISH    
00001606                           880  
00001606                           881  
00001606                           882  OP_CMP:
00001606  14FC 0043                883      MOVE.B  #'C', (A2)+
0000160A  14FC 004D                884      MOVE.B  #'M', (A2)+
0000160E  14FC 0050                885      MOVE.B  #'P', (A2)+
00001612                           886  
00001612                           887      ;call OP_CHECK_SIZE to append a .b/.w/.l    
00001612  4EB9 000016B0            888      JSR     OP_CHECK_SIZE
00001618                           889      
00001618                           890      ;at this point it will return with SUB.X and go to EA_START
00001618  4EB9 0000182A            891      JSR     EA_START
0000161E  4EF8 10C4                892      JMP     OP_FINISH    
00001622                           893      
00001622                           894  
00001622                           895  
00001622                           896  OP_EOR:  ;(optional)
00001622                           897  ;implement later if needed
00001622                           898  
00001622                           899  
00001622                           900  OP_MULU:
00001622  14FC 004D                901      MOVE.B  #'M', (A2)+
00001626  14FC 0055                902      MOVE.B  #'U', (A2)+
0000162A  14FC 004C                903      MOVE.B  #'L', (A2)+
0000162E  14FC 0055                904      MOVE.B  #'U', (A2)+
00001632                           905  
00001632  4EB9 0000182A            906      JSR     EA_START
00001638  4EF8 10C4                907      JMP     OP_FINISH    
0000163C                           908  
0000163C                           909  OP_MULS:  ;(optional)
0000163C                           910  ;implement later if needed
0000163C                           911  
0000163C                           912  
0000163C                           913  OP_AND:  ;(optional)
0000163C                           914  ;implement later if needed
0000163C                           915  
0000163C                           916  
0000163C                           917  OP_ADD:
0000163C  14FC 0041                918      MOVE.B  #'A', (A2)+
00001640  14FC 0044                919      MOVE.B  #'D', (A2)+
00001644  14FC 0044                920      MOVE.B  #'D', (A2)+
00001648                           921  
00001648                           922      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001648  4EB9 000016B0            923      JSR     OP_CHECK_SIZE
0000164E                           924  
0000164E  4EB9 0000182A            925      JSR     EA_START
00001654  4EF8 10C4                926      JMP     OP_FINISH
00001658                           927  
00001658                           928  OP_ADDA:
00001658  14FC 0041                929      MOVE.B  #'A', (A2)+
0000165C  14FC 0044                930      MOVE.B  #'D', (A2)+
00001660  14FC 0044                931      MOVE.B  #'D', (A2)+
00001664  14FC 0041                932      MOVE.B  #'A', (A2)+
00001668                           933  
00001668                           934      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001668  4EB9 000016F2            935      JSR     OP_CHECK_SIZE_ADDA
0000166E                           936  
0000166E  4EB9 0000182A            937      JSR     EA_START
00001674  4EF8 10C4                938      JMP     OP_FINISH
00001678                           939  
00001678                           940  
00001678                           941  OP_ASL:
00001678  14FC 0041                942      MOVE.B  #'A', (A2)+
0000167C  14FC 0053                943      MOVE.B  #'S', (A2)+
00001680  14FC 004C                944      MOVE.B  #'L', (A2)+
00001684                           945  
00001684                           946      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001684  4EB9 000016B0            947      JSR     OP_CHECK_SIZE
0000168A                           948  
0000168A  4EB9 0000182A            949      JSR     EA_START
00001690  4EF8 10C4                950      JMP     OP_FINISH
00001694                           951  
00001694                           952  
00001694                           953  OP_ASR:
00001694  14FC 0041                954      MOVE.B  #'A', (A2)+
00001698  14FC 0053                955      MOVE.B  #'S', (A2)+
0000169C  14FC 0052                956      MOVE.B  #'R', (A2)+
000016A0                           957  
000016A0                           958      ;call OP_CHECK_SIZE to append a .b/.w/.l
000016A0  4EB9 000016B0            959      JSR     OP_CHECK_SIZE
000016A6                           960  
000016A6  4EB9 0000182A            961      JSR     EA_START
000016AC  4EF8 10C4                962      JMP     OP_FINISH
000016B0                           963  
000016B0                           964  OP_LSL:  ;(optional)
000016B0                           965  ;implement later if needed
000016B0                           966  
000016B0                           967  
000016B0                           968  
000016B0                           969  OP_LSR:  ;(optional)
000016B0                           970  ;implement later if needed
000016B0                           971  
000016B0                           972  
000016B0                           973  
000016B0                           974  OP_ROL:  ;(optional)
000016B0                           975  ;implement later if needed
000016B0                           976  
000016B0                           977  
000016B0                           978  
000016B0                           979  OP_ROR:  ;(optional)
000016B0                           980  ;implement later if needed
000016B0                           981  
000016B0                           982  
000016B0                           983  
000016B0                           984  ;OP_MOVEM_R2M:
000016B0                           985  ;    MOVE.B  #'M', (A2)+
000016B0                           986  ;    MOVE.B  #'O', (A2)+
000016B0                           987  ;    MOVE.B  #'V', (A2)+
000016B0                           988  ;    MOVE.B  #'E', (A2)+
000016B0                           989  ;    MOVE.B  #'M', (A2)+
000016B0                           990      
000016B0                           991  ;    ;call OP_CHECK_SIZE to append a .b/.w/.l
000016B0                           992  ;    JSR     OP_CHECK_SIZE
000016B0                           993      
000016B0                           994  ;    MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
000016B0                           995      
000016B0                           996  ;    JSR     EA_START
000016B0                           997  ;    JMP     OP_FINISH
000016B0                           998  
000016B0                           999  
000016B0                          1000  ;OP_MOVEM_M2R:
000016B0                          1001  ;    MOVE.B  #'M', (A2)+
000016B0                          1002  ;    MOVE.B  #'O', (A2)+
000016B0                          1003  ;    MOVE.B  #'V', (A2)+
000016B0                          1004  ;    MOVE.B  #'E', (A2)+
000016B0                          1005  ;    MOVE.B  #'M', (A2)+
000016B0                          1006      
000016B0                          1007  ;    ;call OP_CHECK_SIZE to append a .b/.w/.l
000016B0                          1008  ;    JSR     OP_CHECK_SIZE
000016B0                          1009      
000016B0                          1010  ;    MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
000016B0                          1011      
000016B0                          1012  ;    JSR     EA_START
000016B0                          1013  ;    JMP     OP_FINISH
000016B0                          1014  
000016B0                          1015  
000016B0                          1016  OP_UNSUPPORTED_OPCODE:
000016B0                          1017  ;fill out
000016B0                          1018  
000016B0                          1019  ;D0 HAS COMPLETE INSTRUCTION
000016B0                          1020  OP_CHECK_SIZE:
000016B0  4241                    1021      CLR     D1                                  ;CLEAR D1
000016B2  4242                    1022      CLR     D2                                  ;clear D2
000016B4  2200                    1023      MOVE.L  D0,D1                               ;D0 and D1 both have complete opcode
000016B6  0241 00F0               1024      ANDI.W  #nibble3,D1                         ;isolate nibble 3
000016BA  143C 0006               1025      MOVE.B  #right6, D2                         ;putting immediate value 6 in D2
000016BE  E469                    1026      LSR.W   D2, D1                              ;bits 7,6 --> bits 1,0
000016C0                          1027      
000016C0                          1028       
000016C0  B27C 0000               1029      CMP     #00,D1                              ;compare bits 1,0 to 00
000016C4  6700 000E               1030      BEQ     OP_SIZE_BYTE                        ;if bits == 00, size byte
000016C8  B27C 0001               1031      CMP     #01,D1                              ;compare bits to 01
000016CC  6700 0010               1032      BEQ     OP_SIZE_WORD                        ;if bits == 01, size word
000016D0  6000 0016               1033      BRA     OP_SIZE_LONG                        ;else size long
000016D4                          1034  
000016D4                          1035  OP_SIZE_BYTE
000016D4  14FC 002E               1036      MOVE.B  #'.', (A2)+
000016D8  14FC 0042               1037      MOVE.B  #'B', (A2)+
000016DC  4E75                    1038      RTS
000016DE                          1039  
000016DE                          1040  OP_SIZE_WORD
000016DE  14FC 002E               1041      MOVE.B  #'.', (A2)+
000016E2  14FC 0057               1042      MOVE.B  #'W', (A2)+
000016E6  4E75                    1043      RTS
000016E8                          1044  
000016E8                          1045  
000016E8                          1046  OP_SIZE_LONG
000016E8  14FC 002E               1047      MOVE.B  #'.', (A2)+
000016EC  14FC 004C               1048      MOVE.B  #'L', (A2)+
000016F0  4E75                    1049      RTS
000016F2                          1050  
000016F2                          1051  
000016F2                          1052  OP_CHECK_SIZE_ADDA:
000016F2  4241                    1053      CLR     D1                                  ;CLEAR D1
000016F4  4242                    1054      CLR     D2                                  ;clear D2
000016F6  2200                    1055      MOVE.L  D0,D1                               ;D0 and D1 both have complete opcode
000016F8  0241 0F00               1056      ANDI.W  #nibble2,D1                         ;isolate nibble 2
000016FC  143C 0008               1057      MOVE.B  #right8, D2                         ;putting immediate value 8 in D2
00001700  E469                    1058      LSR.W   D2, D1                              ;
00001702                          1059      
00001702                          1060      ;at this point we have our single bit in bit 0
00001702                          1061      
00001702  0241 0001               1062      ANDI.W  #0001,D1                            ;isolate bit 0
00001706  B27C 0000               1063      CMP     #0,D1                               ;check if bit == 0
0000170A  67D2                    1064      BEQ     OP_SIZE_WORD                        ;if yes, size = word
0000170C  60DA                    1065      BRA     OP_SIZE_LONG                        ;else, size = long
0000170E                          1066   
0000170E                          1067  
0000170E                          1068  ;******************************** ATOI ******************************************************************************************************************************
0000170E                          1069  ATOI:
0000170E  2401                    1070          MOVE.L      D1,D2                   ;loop variable (size) is in D2
00001710  2449                    1071          MOVEA.L     A1,A2                   ;pointer to next char
00001712  4284                    1072          CLR.L       D4
00001714                          1073  
00001714                          1074  ATOI_LOOP  
00001714  4243                    1075          CLR         D3                      ;clear d3
00001716                          1076          ;CMP.B       #0,D2
00001716                          1077          ;BEQ         ATOI_DONE               ;DONE
00001716  5382                    1078          SUBI.L      #1,D2                   ;subtract 1 from loop counter
00001718  161A                    1079          MOVE.B      (A2)+,D3                 ;move current byte to D3, then increment to next
0000171A  B63C 002F               1080          CMP.B       #$2F,D3
0000171E  6F00 0060               1081          BLE         ATOI_ERROR              ;if less than 30, not a number, branch to error
00001722  B63C 0039               1082          CMP.B       #$39,D3                 ;check byte to see if number or letter
00001726  6F00 002A               1083          BLE         ATOI_NUMBER             ;30<x<39 --> number
0000172A  B63C 0040               1084          CMP.B       #$40,D3
0000172E  6F00 0050               1085          BLE         ATOI_ERROR
00001732  B63C 0046               1086          CMP.B       #$46,D3
00001736  6F00 0024               1087          BLE         ATOI_UPPERCASE_LETTER   ;less than 47, it is uppercase letter
0000173A  B63C 0060               1088          CMP.B       #$60,D3
0000173E  6F00 0040               1089          BLE         ATOI_ERROR
00001742  B63C 0066               1090          CMP.B       #$66,D3
00001746  6F00 001E               1091          BLE         ATOI_LOWERCASE_LETTER
0000174A  B63C 0067               1092          CMP.B       #$67,D3
0000174E  6C00 0030               1093          BGE         ATOI_ERROR
00001752                          1094          
00001752                          1095          ;BNE         ATOI_LOOP                    ;run loop
00001752                          1096      
00001752                          1097  
00001752                          1098  ATOI_NUMBER
00001752                          1099  ;number --> d1 = d1 - $30
00001752  0403 0030               1100      SUBI.B          #$30, D3                    ;subtract 30 if number
00001756                          1101      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
00001756  4EF9 00001770           1102      JMP             ATOI_FORMAT                 ;testing
0000175C                          1103      ;JMP            ATOI_LOOP                   ;loop
0000175C                          1104  
0000175C                          1105  ATOI_UPPERCASE_LETTER
0000175C                          1106  ;letter --> d1 = d1 - $37
0000175C  0403 0037               1107      SUBI.B          #$37,D3                     ;subtract 37 if UPPER case letter
00001760                          1108      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
00001760  4EF9 00001770           1109      JMP             ATOI_FORMAT                 ;testing
00001766                          1110      ;JMP            ATOI_LOOP                   ;loop
00001766                          1111  
00001766                          1112  ATOI_LOWERCASE_LETTER
00001766  0403 0057               1113      SUBI.B          #$57,D3                     ;subtract 57(20 + 37)
0000176A                          1114      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
0000176A  4EF9 00001770           1115      JMP             ATOI_FORMAT                 ;testing
00001770                          1116      ;JMP            ATOI_LOOP                  ;loop
00001770                          1117  
00001770                          1118  
00001770                          1119  ATOI_FORMAT
00001770  D803                    1120      ADD.B           D3,D4                       ;add the byte to D4 so can add later   
00001772  B43C 0000               1121      CMP.B           #0,D2                       
00001776  6700 0008               1122      BEQ             ATOI_DONE                   ;check if done (loop counter D2 is at 0)
0000177A  E984                    1123      ASL.L           #4,D4                       ;logical shift left to make room
0000177C  4EF8 1714               1124      JMP             ATOI_LOOP                   ;go back to loop
00001780                          1125  
00001780                          1126  ATOI_ERROR
00001780                          1127      ;come back to handle error when out of range
00001780                          1128      
00001780                          1129  
00001780                          1130  ATOI_DONE 
00001780  2284                    1131      MOVE.L         D4,(A1)                      ;at this point, move the new address in D4 to mem location                                
00001782  4E75                    1132      RTS                                         ;used to RTS after a branch statement
00001784                          1133  
00001784                          1134  ;************************************* ITOA *******************************************************************************************************************
00001784                          1135  ;A0
00001784                          1136  ;A1
00001784                          1137  ;A2 = buffer (this is our decoded string that will print to screen)
00001784                          1138  ;A3
00001784                          1139  ;A4 = current memory address for buffer
00001784                          1140  ;A5 = starting address / current address in memory
00001784                          1141  ;A6 = ending address
00001784                          1142  ;A7 = SP
00001784                          1143  
00001784                          1144  ;D0 = counter
00001784                          1145  ;D1 = 
00001784                          1146  ;D2 = ?
00001784                          1147  ;D3 = buffer size (used for loop = 64)
00001784                          1148  ;D4 = value being converted
00001784                          1149  ;D5 =
00001784                          1150  ;D6 = 
00001784                          1151  ;D7 = 
00001784                          1152  ITOA:
00001784  280D                    1153      MOVE.L         A5,D4                    ;D4 has data to convert to ascii
00001786                          1154  
00001786                          1155  ITOA_LOOP:
00001786  BA3C 0000               1156      CMP.B           #0,D5
0000178A  6700 004C               1157      BEQ             ITOA_FINISH             ;when 0, branch to finish to complete
0000178E                          1158  
0000178E                          1159  
0000178E                          1160  
0000178E                          1161  
0000178E                          1162  ITOA_BYTE:
0000178E                          1163  
0000178E                          1164  
0000178E                          1165  
0000178E                          1166  ITOA_WORD:
0000178E                          1167  
0000178E                          1168  
0000178E                          1169  
0000178E                          1170  ITOA_LONG:
0000178E                          1171  
0000178E                          1172  
0000178E                          1173  
0000178E                          1174  ITOA_ADDRESS:
0000178E  4284                    1175      CLR.L       D4                          ;D4 = 0000 0000
00001790  280D                    1176      MOVE.L      A5,D4                       ;our address is now in D4 and ready to deconstruct
00001792  103C 0008               1177      MOVE.B      #8,D0                       ;counter
00001796  4EF9 0000179C           1178      JMP         ITOA_ADDRESS_LOOP
0000179C                          1179  ITOA_ADDRESS_LOOP:
0000179C  B03C 0000               1180      CMP.B       #0,D0                       ;check if done
000017A0  6700 0036               1181      BEQ         ITOA_FINISH                 ;if at 0, branch to ITOA_FINISH
000017A4  E99C                    1182      ROL.L       #4,D4                       ;rotate left 4 bits, to get MSB to beginning 
000017A6  1204                    1183      MOVE.B      D4,D1                       ;store in D1 (this will be whole byte, we want half)
000017A8  0241 000F               1184      ANDI.W      #$000F,D1                   ;character is now isolated
000017AC                          1185      
000017AC  4EB9 000017B8           1186      JSR         ITOA_HEX2ASCII              ;JSR to convert
000017B2  5340                    1187      SUBI        #1,D0                       ;subtract 1 from counter
000017B4  4EF8 179C               1188      JMP         ITOA_ADDRESS_LOOP           ;loop again!
000017B8                          1189  
000017B8                          1190  ITOA_HEX2ASCII:
000017B8  B23C 000A               1191      CMP.B       #$A,D1                      ;compare byte in D1 to hex value A
000017BC  6C00 0012               1192      BGE         ITOA_LETTER                 ;if greater than/equal A, it is letter
000017C0  B23C 000A               1193      CMP.B       #$A,D1                      ;compare byte in D1 to hex value A
000017C4  6D00 0002               1194      BLT         ITOA_NUMBER                 ;if less than, it is number
000017C8                          1195  
000017C8                          1196  ITOA_NUMBER:
000017C8  0601 0030               1197      ADDI.B      #$30,D1                     ;add $30 to D1 to convert
000017CC  14C1                    1198      MOVE.B      D1,(A2)+                    ;add to buffer and increment to next position
000017CE  4E75                    1199      RTS
000017D0                          1200  
000017D0                          1201  ITOA_LETTER:
000017D0  0601 0037               1202      ADDI.B      #$37,D1                     ;add 37 to D1 to convert
000017D4  14C1                    1203      MOVE.B      D1,(A2)+                    ;add to buffer and increment to next position
000017D6  4E75                    1204      RTS
000017D8                          1205  
000017D8                          1206  ITOA_FINISH:
000017D8  4E75                    1207      RTS
000017DA                          1208  
000017DA                          1209  
000017DA                          1210  ;************************************ Validate Addresses ******************************************
000017DA                          1211  
000017DA                          1212  VALIDATE_BEGINNING:
000017DA                          1213      
000017DA                          1214  
000017DA                          1215  
000017DA                          1216  
000017DA                          1217  ;******************************** Message Error Handling ***************************************************************************************************************** 
000017DA                          1218  STARTA_ERROR_LESS_THAN_ZERO:
000017DA  103C 000E               1219      MOVE.B  #14,D0
000017DE  43F9 00001CC4           1220      LEA     error_message_1,A1      ;load the get_end_address message into A1
000017E4  4E4F                    1221      TRAP    #15    
000017E6  4EF8 1012               1222      JMP     GET_STARTING_ADDRESS
000017EA                          1223  
000017EA                          1224  STARTA_ERROR_NOT_EVEN:
000017EA  103C 000E               1225      MOVE.B  #14,D0
000017EE  43F9 00001CEE           1226      LEA     error_message_2,A1      ;load error_message_2
000017F4  4E4F                    1227      TRAP    #15    
000017F6  4EF8 1012               1228      JMP     GET_STARTING_ADDRESS
000017FA                          1229  
000017FA                          1230  ENDA_ERROR_NOT_EVEN:
000017FA  103C 000E               1231      MOVE.B  #14,D0
000017FE  43F9 00001D0E           1232      LEA     error_message_3,A1      ;load error_message_3
00001804  4E4F                    1233      TRAP    #15
00001806  4EF8 104A               1234      JMP     GET_ENDING_ADDRESS
0000180A                          1235  
0000180A                          1236  ENDA_ERROR_LARGE:
0000180A  103C 000E               1237      MOVE.B  #14,D0
0000180E  43F9 00001D2E           1238      LEA     error_message_4,A1      ;load error_message_4
00001814  4E4F                    1239      TRAP    #15
00001816  4EF8 104A               1240      JMP     GET_ENDING_ADDRESS
0000181A                          1241      
0000181A                          1242  ENDA_ERROR_LESS_THAN_STARTA:
0000181A  103C 000E               1243      MOVE.B  #14,D0
0000181E  43F9 00001D5D           1244      LEA     error_message_5,A1      ;load error_message_5
00001824  4E4F                    1245      TRAP    #15
00001826  4EF8 104A               1246      JMP     GET_ENDING_ADDRESS
0000182A                          1247  
0000182A                          1248  ;****************************************** EA Stuff ********************************************************************************************************************* 
0000182A                          1249  
0000182A                          1250  EA_START:
0000182A  41F9 00001838           1251      LEA         EA_TYPE_TABLE, A0
00001830                          1252      
00001830  C2FC 0006               1253      MULU        #6,D1               ;computes opcode table jump displacement
00001834  4EF0 1000               1254      JMP         0(A0,D1)            ;jump to correct table input
00001838                          1255  
00001838                          1256  
00001838                          1257  EA_TYPE_TABLE:
00001838  4EF9 0000187C           1258      JMP         EA_IMMEDIATE        ;DONE
0000183E  4EF9 000018BE           1259      JMP         EA_MOVE             ;DONE
00001844  4EF9 00001904           1260      JMP         EA_MOVEA            ;DONE
0000184A  4EF9 0000194A           1261      JMP         EA_LEA              ;DONE
00001850  4EF9 0000198A           1262      JMP         EA_DESTONLY         ;JMP, CLR
00001856  4EF9 0000198A           1263      JMP         EA_EXT
0000185C  4EF9 0000198A           1264      JMP         EA_MOVEM
00001862  4EF9 000019B0           1265      JMP         EA_TRAP
00001868  4EF9 000019B0           1266      JMP         EA_QUICK            ;DONE
0000186E  4EF9 00001A2C           1267      JMP         EA_BRANCH           ;BRA;BSR
00001874  4EF9 0000187A           1268      JMP         EA_FINISH
0000187A                          1269  
0000187A                          1270  EA_FINISH:
0000187A  4E75                    1271      RTS ; TAKE OUT LATER
0000187C                          1272      
0000187C                          1273  
0000187C                          1274  
0000187C                          1275  ;********************************************  EA_TYPE  ****************************************************   
0000187C                          1276  
0000187C                          1277  EA_IMMEDIATE:                               ;value 0
0000187C  14FC 0009               1278      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001880  14FC 0023               1279      MOVE.B  #'#',(A2)+                      ;add a # to buffer
00001884  14FC 0024               1280      MOVE.B  #'$',(A2)+                      ;add a $ to buffer
00001888                          1281      
00001888                          1282      ;check size which is bits 6,7 and store in D6
00001888                          1283      ;get immediate value from memory based off size and store in D7
00001888  4EB9 00001B54           1284      JSR     EA_CHECK_SIZE
0000188E                          1285      
0000188E                          1286      ;at this point our size is in D6 and data is in D7 and memory has been advanced
0000188E                          1287      ;convert immediate data to ascii and put on buffer
0000188E  4EB9 00001B7E           1288      JSR     EA_ITOA_IMMEDIATE
00001894                          1289      
00001894  41F9 00001A78           1290      LEA     EA_MODE_TABLE,A0                ;load table
0000189A  14FC 002C               1291      MOVE.B  #',',(A2)+                      ;add a # to buffer
0000189E  14FC 0009               1292      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
000018A2                          1293      
000018A2                          1294      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
000018A2                          1295      
000018A2                          1296      ;isolate source mode - bits 3,4,5 and store in D4
000018A2  2800                    1297      MOVE.L  D0,D4
000018A4  E64C                    1298      LSR.W   #3,D4
000018A6  0244 0007               1299      ANDI.W  #$7,D4
000018AA  C8FC 0006               1300      MULU    #6,D4
000018AE                          1301      
000018AE                          1302      ;isolate source register - bits 0,1,2 and store in D5
000018AE  2A00                    1303      MOVE.L  D0,D5
000018B0  0245 0007               1304      ANDI.W  #$7,D5
000018B4                          1305  
000018B4  4EB9 00001A74           1306      JSR     EA_JMP_HELPER
000018BA  4EF8 187A               1307      JMP     EA_FINISH
000018BE                          1308  
000018BE                          1309  ;D4 = mode      --> source / destination
000018BE                          1310  ;D5 = register  --> source / destination   
000018BE                          1311  EA_MOVE:
000018BE  14FC 0009               1312      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
000018C2  41F9 00001A78           1313      LEA     EA_MODE_TABLE,A0                ;load table
000018C8                          1314      
000018C8                          1315      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
000018C8                          1316      
000018C8                          1317      ;isolate source mode
000018C8  2800                    1318      MOVE.L  D0,D4
000018CA  E64C                    1319      LSR.W   #3,D4
000018CC  0244 0007               1320      ANDI.W  #$7,D4
000018D0  C8FC 0006               1321      MULU    #6,D4
000018D4                          1322          
000018D4                          1323      ;isolate source register
000018D4  2A00                    1324      MOVE.L  D0,D5
000018D6  0245 0007               1325      ANDI.W  #$7,D5
000018DA                          1326      
000018DA  4EB9 00001A74           1327      JSR    EA_JMP_HELPER
000018E0  14FC 002C               1328      MOVE.B  #',',(A2)+                  ;add ',' to buffer  
000018E4                          1329      
000018E4                          1330      ;isolate destination mode
000018E4  2800                    1331      MOVE.L  D0,D4
000018E6  EC4C                    1332      LSR.W   #6,D4
000018E8  0244 0007               1333      ANDI.W  #$7,D4
000018EC  C8FC 0006               1334      MULU    #6,D4
000018F0                          1335      
000018F0                          1336      ;isolate destination register 
000018F0  2A00                    1337      MOVE.L  D0,D5
000018F2  E84D                    1338      LSR.W   #4,D5
000018F4  EA4D                    1339      LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
000018F6  0245 0007               1340      ANDI.W  #$7,D5   
000018FA  4EB9 00001A74           1341      JSR     EA_JMP_HELPER
00001900                          1342  
00001900  4EF8 187A               1343      JMP     EA_FINISH
00001904                          1344      
00001904                          1345  
00001904                          1346  EA_MOVEA:
00001904  14FC 0009               1347      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001908  41F9 00001A78           1348      LEA     EA_MODE_TABLE,A0                ;load table
0000190E                          1349  
0000190E                          1350      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
0000190E                          1351      
0000190E                          1352      ;isolate source mode
0000190E  2800                    1353      MOVE.L  D0,D4
00001910  E64C                    1354      LSR.W   #3,D4
00001912  0244 0007               1355      ANDI.W  #$7,D4
00001916  C8FC 0006               1356      MULU    #6,D4
0000191A                          1357          
0000191A                          1358      ;isolate source register
0000191A  2A00                    1359      MOVE.L  D0,D5
0000191C  0245 0007               1360      ANDI.W  #$7,D5
00001920                          1361      
00001920  4EB9 00001A74           1362      JSR    EA_JMP_HELPER
00001926  14FC 002C               1363      MOVE.B  #',',(A2)+                  ;add ',' to buffer
0000192A                          1364      
0000192A                          1365      ;isolate destination mode --> SHOULD ALWAYS BE 001 AND GO TO ADDRESS REGISTER
0000192A  2800                    1366      MOVE.L  D0,D4
0000192C  EC4C                    1367      LSR.W   #6,D4
0000192E  0244 0007               1368      ANDI.W  #$7,D4
00001932  C8FC 0006               1369      MULU    #6,D4
00001936                          1370      
00001936                          1371      ;isolate destination register 
00001936  2A00                    1372      MOVE.L  D0,D5
00001938  E84D                    1373      LSR.W   #4,D5
0000193A  EA4D                    1374      LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
0000193C  0245 0007               1375      ANDI.W  #$7,D5   
00001940  4EB9 00001A74           1376      JSR     EA_JMP_HELPER
00001946                          1377  
00001946  4EF8 187A               1378      JMP     EA_FINISH
0000194A                          1379  
0000194A                          1380  EA_LEA:
0000194A  14FC 0009               1381      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
0000194E  41F9 00001A78           1382      LEA     EA_MODE_TABLE,A0                ;load table
00001954                          1383      
00001954                          1384      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
00001954                          1385      
00001954                          1386      ;isolate source mode
00001954  2800                    1387      MOVE.L  D0,D4
00001956  E64C                    1388      LSR.W   #3,D4
00001958  0244 0007               1389      ANDI.W  #$7,D4
0000195C  C8FC 0006               1390      MULU    #6,D4
00001960                          1391          
00001960                          1392      ;isolate source register
00001960  2A00                    1393      MOVE.L  D0,D5
00001962  0245 0007               1394      ANDI.W  #$7,D5
00001966                          1395      
00001966  4EB9 00001A74           1396      JSR    EA_JMP_HELPER
0000196C  14FC 002C               1397      MOVE.B  #',',(A2)+                  ;add ',' to buffer
00001970                          1398      
00001970                          1399      ;destination always An
00001970                          1400      ;MOVE.B  #'A',(A2)+                  ;add 'A' to buffer
00001970                          1401      
00001970                          1402      ;isolate destination register 
00001970                          1403      ;MOVE.L  D0,D5
00001970                          1404      ;LSR.W   #4,D5
00001970                          1405      ;LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
00001970                          1406      ;ANDI.W  #$7,D5
00001970                          1407  
00001970                          1408      ;isolate destination mode --> SHOULD ALWAYS BE 001 AND GO TO ADDRESS REGISTER
00001970  7801                    1409      MOVE.L  #1,D4
00001972  C8FC 0006               1410      MULU    #6,D4
00001976                          1411      
00001976                          1412      ;isolate destination register 
00001976  2A00                    1413      MOVE.L  D0,D5
00001978  E84D                    1414      LSR.W   #4,D5
0000197A  EA4D                    1415      LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
0000197C  0245 0007               1416      ANDI.W  #$7,D5   
00001980  4EB9 00001A74           1417      JSR     EA_JMP_HELPER
00001986                          1418  
00001986  4EF8 187A               1419      JMP     EA_FINISH
0000198A                          1420  
0000198A                          1421  EA_DESTONLY:        ;JMP, CLR
0000198A                          1422  
0000198A                          1423  
0000198A                          1424  
0000198A                          1425  
0000198A                          1426  
0000198A                          1427  EA_EXT:
0000198A                          1428  
0000198A                          1429  
0000198A                          1430  
0000198A                          1431  
0000198A                          1432  
0000198A                          1433  EA_MOVEM:
0000198A  14FC 0009               1434      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
0000198E  41F9 00001A78           1435      LEA     EA_MODE_TABLE,A0                ;load table
00001994                          1436      
00001994                          1437      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
00001994                          1438      
00001994                          1439      ;isolate source mode
00001994  2800                    1440      MOVE.L  D0,D4
00001996  E64C                    1441      LSR.W   #3,D4
00001998  0244 0007               1442      ANDI.W  #$7,D4
0000199C  C8FC 0006               1443      MULU    #6,D4
000019A0                          1444          
000019A0                          1445      ;isolate source register
000019A0  2A00                    1446      MOVE.L  D0,D5
000019A2  0245 0007               1447      ANDI.W  #$7,D5
000019A6                          1448      
000019A6  4EB9 00001A74           1449      JSR    EA_JMP_HELPER
000019AC  14FC 002C               1450      MOVE.B  #',',(A2)+                  ;add ',' to buffer
000019B0                          1451  
000019B0                          1452  EA_TRAP:
000019B0                          1453  
000019B0                          1454  
000019B0                          1455  
000019B0                          1456  
000019B0                          1457  
000019B0                          1458  EA_QUICK:
000019B0                          1459      ;FIGURE WHAT KIND? (ADDQ,SUBQ,MOVEQ)
000019B0                          1460      ;ADDQ/SUBQ  -->  opcode = 0101 (stored in D0)
000019B0                          1461      ;MOVEQ      -->  opcode = 0111 (stored in D0)
000019B0  14FC 0009               1462      MOVE.B  #$09, (A2)+                 ;adds a ' ' to buffer
000019B4  14FC 0023               1463      MOVE.B  #'#',(A2)+                  ;add a # to buffer
000019B8  14FC 0024               1464      MOVE.B  #'$',(A2)+                  ;add a $ to buffer
000019BC                          1465      
000019BC  2200                    1466      MOVE.L  D0,D1                       ;should move into D1
000019BE                          1467      
000019BE                          1468      ;check for MOVEQ
000019BE  EC49                    1469      LSR.W   #right6,D1
000019C0  EC49                    1470      LSR.W   #right6,D1  
000019C2  B27C 0007               1471      CMP.W   #$7,D1
000019C6  6700 003A               1472      BEQ     EA_QUICK_MOVEQ
000019CA                          1473      
000019CA  4241                    1474      CLR     D1                          ;else not MOVEQ, reset D1 and continue with ADDQ / SUBQ
000019CC  2200                    1475      MOVE.L  D0,D1
000019CE  0241 0E00               1476      ANDI.W  #dest_reg,D1                ;isolate destination register(11,10,9)
000019D2  E049                    1477      LSR.W   #right8,D1                  ;shift 8 times
000019D4  E249                    1478      LSR.W   #right1,D1                  ;shift 1 time for total of 9 times
000019D6                          1479      
000019D6                          1480      ;at this point we have our number, so convert to ASCII and put on buffer
000019D6  0601 0030               1481      ADDI.B  #$30,D1                     ;convert to ASCII
000019DA  14C1                    1482      MOVE.B  D1,(A2)+                    ;put on buffer
000019DC                          1483      
000019DC                          1484      
000019DC                          1485      ;ready for destination address
000019DC  14FC 002C               1486      MOVE.B  #',',(A2)+                  ;add ',' to buffer  
000019E0  41F9 00001A78           1487      LEA     EA_MODE_TABLE,A0            ;load table
000019E6                          1488      
000019E6                          1489      
000019E6                          1490      ;isolate source mode
000019E6  2800                    1491      MOVE.L  D0,D4
000019E8  E64C                    1492      LSR.W   #3,D4
000019EA  0244 0007               1493      ANDI.W  #$7,D4
000019EE  C8FC 0006               1494      MULU    #6,D4
000019F2                          1495          
000019F2                          1496      ;isolate source register
000019F2  2A00                    1497      MOVE.L  D0,D5
000019F4  0245 0007               1498      ANDI.W  #$7,D5
000019F8                          1499      
000019F8  4EB9 00001A74           1500      JSR    EA_JMP_HELPER
000019FE                          1501      
000019FE  4EF8 187A               1502      JMP     EA_FINISH
00001A02                          1503      
00001A02                          1504      ;LSR.W       #right12,D1         ;shift D1 by 12 bits, leaving just 4 bits      --> gives shift count error
00001A02                          1505      ;CMP.W       #$5,D1
00001A02                          1506      ;BEQ         EA_ADDQ_SUBQ
00001A02                          1507      
00001A02                          1508  EA_QUICK_MOVEQ:
00001A02  2200                    1509      MOVE.L  D0,D1
00001A04  0241 00FF               1510      ANDI.W  #$00FF,D1               ;isolate bits 7-0
00001A08                          1511      
00001A08                          1512      ;our bits are isolated in D1, move to D7 for ITOA function
00001A08  2E01                    1513      MOVE.L  D1,D7
00001A0A  4EB9 00001BE0           1514      JSR     EA_ITOA_BYTE_CONVERT
00001A10                          1515      
00001A10  14FC 002C               1516      MOVE.B  #',',(A2)+                  ;add ',' to buffer
00001A14  14FC 0044               1517      MOVE.B  #'D',(A2)+                  ;add ',' to buffer
00001A18  2200                    1518      MOVE.L  D0,D1
00001A1A  0241 0F00               1519      ANDI.W  #nibble2,D1
00001A1E  E049                    1520      LSR.W   #8,D1
00001A20  E249                    1521      LSR.W   #1,D1
00001A22                          1522      
00001A22                          1523      ;at this point we have our number, so convert to ASCII and put on buffer
00001A22  0601 0030               1524      ADDI.B  #$30,D1                     ;convert to ASCII
00001A26  14C1                    1525      MOVE.B  D1,(A2)+                    ;put on buffer
00001A28                          1526  
00001A28  4EF8 187A               1527      JMP     EA_FINISH
00001A2C                          1528  
00001A2C                          1529  EA_BRANCH:
00001A2C                          1530      ;PROGRAM COUNTER @ A5
00001A2C                          1531      ;BRA or BSR
00001A2C                          1532      ;displacement bits are 7-0 
00001A2C  2200                    1533      MOVE.L  D0,D1
00001A2E  0241 00FF               1534      ANDI.W  #$00FF,D1               ;isolate bits 7-0
00001A32                          1535      ;PERFORM CHECKS 0000 0000 = WORD VALUE, 1111 1111 = LONG VALUE
00001A32                          1536      
00001A32  B23C 0000               1537      CMP.B   #$00,D1
00001A36  6700 0006               1538      BEQ     EA_BRANCH_16
00001A3A  6000 001A               1539      BRA     EA_BRANCH_32
00001A3E                          1540  
00001A3E                          1541  
00001A3E                          1542  
00001A3E                          1543  EA_BRANCH_16:
00001A3E  3215                    1544      MOVE.W  (A5),D1                    ;CHECK WHERE POINTER IS WHEN HITS HERE
00001A40                          1545      ;D1 WILL HAVE OUR DISPLACEMENT (0E32)
00001A40                          1546      ;ADD 0E32 TO PC + 2
00001A40  3E01                    1547      MOVE.W  D1,D7
00001A42  DE4D                    1548      ADD.W   A5,D7
00001A44                          1549      ;SUBI.B  #2,D7
00001A44                          1550      
00001A44  14FC 0009               1551      MOVE.B  #$09, (A2)+                 ;adds a ' ' to buffer
00001A48  14FC 0024               1552      MOVE.B  #'$',(A2)+                  ;add '$' to buffer
00001A4C                          1553      
00001A4C                          1554      ;convert to ASCII and put on buffer
00001A4C                          1555      ;D7 HAS DISPLACEMENT   
00001A4C  4EB9 00001A56           1556      JSR     BRANCH_16_ITOA
00001A52                          1557      
00001A52  4EF8 187A               1558      JMP     EA_FINISH
00001A56                          1559  
00001A56                          1560  EA_BRANCH_32:
00001A56                          1561  
00001A56                          1562  
00001A56                          1563  
00001A56                          1564  
00001A56                          1565  BRANCH_16_ITOA:
00001A56                          1566      ;D7 HAS OUR DISPLACEMENT... CONVERT TO ASCII!   ;D7 = 1234
00001A56  E04F                    1567      LSR.W   #right8,D7                              ;D7 = 0012
00001A58  4EB9 00001BE0           1568      JSR     EA_ITOA_BYTE_CONVERT                    ;BUFFER WILL HAVE 12
00001A5E  3E1D                    1569      MOVE.W  (A5)+,D7                                ;D7 = 0E32
00001A60  DE4D                    1570      ADD.W   A5,D7                                   ;D7 = 123
00001A62  5507                    1571      SUBI.B  #2,D7                                   ;SUBI 2 to account for post increment of A5
00001A64  0247 00FF               1572      ANDI.W  #$00FF,D7                               ;D7 = 0034
00001A68  4EB9 00001BE0           1573      JSR     EA_ITOA_BYTE_CONVERT                    ;BUFFER WILL HAVE 1234
00001A6E                          1574      
00001A6E  4EF9 00001C18           1575      JMP     EA_ITOA_DONE
00001A74                          1576  
00001A74                          1577  EA_JMP_HELPER
00001A74  4EF0 4000               1578      JMP     0(A0,D4)
00001A78                          1579  
00001A78                          1580  
00001A78                          1581  ;********************************************  EA_MODE_TABLE  ****************************************************  
00001A78                          1582  EA_MODE_TABLE:
00001A78  4EF9 00001AA8           1583      JMP     EA_MODE_000
00001A7E  4EF9 00001AB6           1584      JMP     EA_MODE_001
00001A84  4EF9 00001AC4           1585      JMP     EA_MODE_010
00001A8A  4EF9 00001ADA           1586      JMP     EA_MODE_011
00001A90  4EF9 00001AF4           1587      JMP     EA_MODE_100
00001A96  4EF9 00001B0C           1588      JMP     EA_MODE_101
00001A9C  4EF9 00001B0C           1589      JMP     EA_MODE_110
00001AA2  4EF9 00001B0C           1590      JMP     EA_MODE_111
00001AA8                          1591      ;JMP     EA_MODE_FINISH
00001AA8                          1592  
00001AA8                          1593  ;********************************************  EA_MODE_XXX  ****************************************************    
00001AA8                          1594  EA_MODE_000:                                        ;Data register 'Dn'
00001AA8  14FC 0044               1595      MOVE.B  #'D',(A2)+                              ;put D on buffer
00001AAC  1605                    1596      MOVE.B D5,D3                                    ;move to d3 for conversion
00001AAE  4EB9 00001B4C           1597      JSR     EA_HEX_TO_ASCII                         ;puts register on buffer  
00001AB4  4E75                    1598      RTS
00001AB6                          1599      
00001AB6                          1600  EA_MODE_001:                                        ;Address Register 'An'
00001AB6  14FC 0041               1601      MOVE.B  #'A',(A2)+                              ;put A on buffer
00001ABA  1605                    1602      MOVE.B  D5,D3                                   ;move to d3 for conversion
00001ABC  4EB9 00001B4C           1603      JSR     EA_HEX_TO_ASCII                         ;puts register on buffer  
00001AC2  4E75                    1604      RTS
00001AC4                          1605  
00001AC4                          1606  EA_MODE_010:                                        ;Address direct --> '(An)'
00001AC4  14FC 0028               1607      MOVE.B  #'(',(A2)+                              ;put ( on buffer
00001AC8  14FC 0041               1608      MOVE.B  #'A',(A2)+                              ;put A on buffer
00001ACC  1605                    1609      MOVE.B  D5,D3                                   ;move to D3 for conversion
00001ACE  4EB9 00001B4C           1610      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
00001AD4  14FC 0029               1611      MOVE.B  #')',(A2)+                              ;put ) on buffer
00001AD8  4E75                    1612      RTS
00001ADA                          1613  
00001ADA                          1614  EA_MODE_011:                                        ;Address with Postincrement --> '(An)+' 
00001ADA  14FC 0028               1615      MOVE.B  #'(',(A2)+                              ;put ( on buffer
00001ADE  14FC 0041               1616      MOVE.B  #'A',(A2)+                              ;put A on buffer
00001AE2  1605                    1617      MOVE.B  D5,D3                                   ;move to D3 for conversion
00001AE4  4EB9 00001B4C           1618      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
00001AEA  14FC 0029               1619      MOVE.B  #')',(A2)+                              ;put ) on buffer
00001AEE  14FC 002B               1620      MOVE.B  #'+',(A2)+                              ;put + on buffer
00001AF2  4E75                    1621      RTS
00001AF4                          1622  
00001AF4                          1623  EA_MODE_100:                                        ;Address with Predecrement --> '-(An)'
00001AF4  14FC 002D               1624      MOVE.B  #'-',(A2)+                              ;put - on buffer
00001AF8  14FC 0028               1625      MOVE.B  #'(',(A2)+                              ;put ( on buffer
00001AFC  14FC 0041               1626      MOVE.B  #'A',(A2)+                              ;put A on buffer
00001B00  1605                    1627      MOVE.B  D5,D3                                   ;move to D3 for conversion
00001B02  4EB9 00001B4C           1628      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
00001B08  14FC 0029               1629      MOVE.B  #')',(A2)+                              ;put ) on buffer
00001B0C                          1630  
00001B0C                          1631  
00001B0C                          1632  
00001B0C                          1633  ;unsupported
00001B0C                          1634  EA_MODE_101:                                        
00001B0C                          1635  ;Address with Displacement --> '(d16, An)
00001B0C                          1636      
00001B0C                          1637  ;unsupported
00001B0C                          1638  EA_MODE_110:
00001B0C                          1639  
00001B0C                          1640  
00001B0C                          1641  
00001B0C                          1642  ;some form of immediate data: short, long, immediate
00001B0C                          1643  EA_MODE_111:
00001B0C                          1644      ;D4 = MODE | D5 = register (000, 001, 100)
00001B0C                          1645      ;000 = Absolute Short (xxx).w
00001B0C                          1646      ;001 = Absolute Long (xxx).l
00001B0C                          1647      ;100 = Immediate data
00001B0C                          1648      
00001B0C  BA3C 0000               1649      CMP.B   #000,D5
00001B10  6700 0012               1650      BEQ     EA_111_ABSOLUTE_SHORT
00001B14  BA3C 0001               1651      CMP.B   #001,D5
00001B18  6700 001E               1652      BEQ     EA_111_ABSOLUTE_LONG
00001B1C  BA3C 0064               1653      CMP.B   #100,D5
00001B20  6700 002A               1654      BEQ     EA_111_IMMEDIATE
00001B24                          1655      
00001B24                          1656      ;HANDLE ERROR
00001B24                          1657              
00001B24                          1658      
00001B24                          1659  EA_111_ABSOLUTE_SHORT:
00001B24                          1660      ;A5 is looking at correct spot
00001B24                          1661      ;ADD WORD VALUE AT A5 ON TO BUFFER AT A2 AND INCREMENT BY WORD
00001B24  14FC 0024               1662      MOVE.B  #'$',(A2)+                              ;put $ on buffer
00001B28  3E15                    1663      MOVE.W  (A5),D7
00001B2A  4246                    1664      CLR     D6
00001B2C  1C3C 0001               1665      MOVE.B  #01,D6                                  ;word size in EA_ITOA_IMMEDIATE
00001B30  4EB9 00001B7E           1666      JSR     EA_ITOA_IMMEDIATE
00001B36  4E75                    1667      RTS
00001B38                          1668  
00001B38                          1669  EA_111_ABSOLUTE_LONG:
00001B38  14FC 0024               1670      MOVE.B  #'$',(A2)+                              ;put $ on buffer
00001B3C  3E15                    1671      MOVE.W  (A5),D7
00001B3E  4246                    1672      CLR     D6
00001B40  1C3C 0002               1673      MOVE.B  #02,D6                                  ;long size in EA_ITOA_IMMEDIATE        
00001B44  4EB9 00001B7E           1674      JSR     EA_ITOA_IMMEDIATE
00001B4A  4E75                    1675      RTS
00001B4C                          1676  
00001B4C                          1677  EA_111_IMMEDIATE:
00001B4C                          1678      
00001B4C                          1679  
00001B4C                          1680     
00001B4C                          1681      
00001B4C                          1682  
00001B4C                          1683  EA_HEX_TO_ASCII:
00001B4C  0603 0030               1684      ADDI.B      #$30,D3                     ;add $30 to D1 to convert
00001B50  14C3                    1685      MOVE.B      D3,(A2)+                    ;add to buffer and increment to next position
00001B52  4E75                    1686      RTS     
00001B54                          1687  
00001B54                          1688  
00001B54                          1689  EA_CHECK_SIZE:
00001B54  4246                    1690      CLR     D6
00001B56  2C00                    1691      MOVE.L  D0,D6                           ;complete opcode --> D6
00001B58  0246 00F0               1692      ANDI.W  #nibble3,D6                     ;isolating nibble 3
00001B5C  EC4E                    1693      LSR.W   #right6,D6                      ;shifting bits 7,6 --> 1,0
00001B5E                          1694      
00001B5E  BC7C 0000               1695      CMP     #00,D6
00001B62  6700 000E               1696      BEQ     EA_SIZE_BYTE
00001B66  BC7C 0001               1697      CMP     #01,D6
00001B6A  6700 000A               1698      BEQ     EA_SIZE_WORD
00001B6E  6000 000A               1699      BRA     EA_SIZE_LONG
00001B72                          1700  
00001B72                          1701  EA_SIZE_BYTE:
00001B72  3E1D                    1702      MOVE.W  (A5)+,D7
00001B74                          1703      ;MOVE.B  #4,D3;                          SET UP COUNTER
00001B74  4E75                    1704      RTS
00001B76                          1705  
00001B76                          1706  EA_SIZE_WORD:
00001B76  3E15                    1707      MOVE.W  (A5),D7
00001B78                          1708      ;MOVE.B  #4,D3;                          SET UP COUNTER
00001B78  4E75                    1709      RTS
00001B7A                          1710  
00001B7A                          1711  EA_SIZE_LONG:
00001B7A  3E15                    1712      MOVE.W  (A5),D7
00001B7C                          1713      ;MOVE.B  #8,D3;                          SET UP COUNTER
00001B7C  4E75                    1714      RTS
00001B7E                          1715  
00001B7E                          1716  
00001B7E                          1717  
00001B7E                          1718  EA_ITOA_IMMEDIATE:
00001B7E                          1719      ;D3 = counter, D7 = value to be converted, D6 = size
00001B7E  BC3C 0000               1720      CMP.B   #%00,D6
00001B82  6700 0012               1721      BEQ     EA_ITOA_BYTE
00001B86  BC3C 0001               1722      CMP.B   #%01,D6
00001B8A  6700 0016               1723      BEQ     EA_ITOA_WORD
00001B8E  BC3C 0002               1724      CMP.B   #%10,D6     
00001B92  6700 0024               1725      BEQ     EA_ITOA_LONG
00001B96                          1726      
00001B96                          1727  
00001B96                          1728  ;EA_IT0A_IMMEDIATE_LOOP
00001B96                          1729  ;    CMP.B   #0,D3                       ;check if loop done
00001B96                          1730  ;    BEQ     EA_ITOA_FINISH              ;if = 0, loop done
00001B96                          1731      
00001B96                          1732  EA_ITOA_BYTE:
00001B96  4EB9 00001BE0           1733      JSR     EA_ITOA_BYTE_CONVERT
00001B9C                          1734      
00001B9C  4EF9 00001C18           1735      JMP     EA_ITOA_DONE
00001BA2                          1736  
00001BA2                          1737  
00001BA2                          1738  EA_ITOA_WORD:
00001BA2  E04F                    1739      LSR.W   #right8,D7
00001BA4  4EB9 00001BE0           1740      JSR     EA_ITOA_BYTE_CONVERT
00001BAA  3E1D                    1741      MOVE.W  (A5)+,D7
00001BAC  4EB9 00001BE0           1742      JSR     EA_ITOA_BYTE_CONVERT
00001BB2                          1743      
00001BB2  4EF9 00001C18           1744      JMP     EA_ITOA_DONE
00001BB8                          1745      
00001BB8                          1746  EA_ITOA_LONG:
00001BB8  E04F                    1747      LSR.W   #right8,D7
00001BBA  4EB9 00001BE0           1748      JSR     EA_ITOA_BYTE_CONVERT
00001BC0  3E1D                    1749      MOVE.W  (A5)+,D7
00001BC2  4EB9 00001BE0           1750      JSR     EA_ITOA_BYTE_CONVERT
00001BC8                          1751  
00001BC8  3E15                    1752      MOVE.W  (A5),D7
00001BCA  E04F                    1753      LSR.W   #right8,D7
00001BCC  4EB9 00001BE0           1754      JSR     EA_ITOA_BYTE_CONVERT
00001BD2  3E1D                    1755      MOVE.W  (A5)+,D7
00001BD4  4EB9 00001BE0           1756      JSR     EA_ITOA_BYTE_CONVERT
00001BDA                          1757  
00001BDA  4EF9 00001C18           1758      JMP     EA_ITOA_DONE
00001BE0                          1759  
00001BE0                          1760  EA_ITOA_BYTE_CONVERT:
00001BE0  3607                    1761      MOVE.W  D7,D3
00001BE2  0243 00F0               1762      ANDI.W  #$F0,D3
00001BE6  E84B                    1763      LSR.W   #right4,D3
00001BE8  4EB9 00001BFC           1764      JSR     EA_ITOA_NIBBLE_CONVERT
00001BEE                          1765      
00001BEE  3607                    1766      MOVE.W  D7,D3
00001BF0  0243 000F               1767      ANDI.W  #$0F,D3
00001BF4  4EB9 00001BFC           1768      JSR     EA_ITOA_NIBBLE_CONVERT
00001BFA  4E75                    1769      RTS
00001BFC                          1770  
00001BFC                          1771  EA_ITOA_NIBBLE_CONVERT:
00001BFC  B63C 0009               1772      CMP.B   #9,D3
00001C00  6E00 000E               1773      BGT     EA_ITOA_LETTER
00001C04  6000 0002               1774      BRA     EA_ITOA_NUMBER
00001C08                          1775  
00001C08                          1776  EA_ITOA_HEX2ASCII:
00001C08                          1777  
00001C08                          1778  
00001C08                          1779  
00001C08                          1780  EA_ITOA_NUMBER:
00001C08  0603 0030               1781      ADDI.B  #$30,D3
00001C0C  14C3                    1782      MOVE.B  D3,(A2)+
00001C0E  4E75                    1783      RTS
00001C10                          1784  
00001C10                          1785  EA_ITOA_LETTER:
00001C10  0603 0037               1786      ADDI.B  #$37,D3
00001C14  14C3                    1787      MOVE.B  D3,(A2)+
00001C16  4E75                    1788      RTS
00001C18                          1789  
00001C18                          1790  EA_ITOA_DONE
00001C18  4E75                    1791      RTS
00001C1A                          1792  
00001C1A                          1793      
00001C1A                          1794  ;****************************************** MESSAGES ***************************************************
00001C1A= 57 65 6C 63 6F 6D ...   1795  welcome_message         DC.B    'Welcome to 68k disassembler',CR,LF,0
00001C38                          1796  
00001C38= 50 6C 65 61 73 65 ...   1797  get_start_address       DC.B    'Please enter a starting address in hexadecimal',CR,LF,0
00001C69                          1798  
00001C69= 50 6C 65 61 73 65 ...   1799  get_end_address         DC.B    'Please enter an ending address in hexadecimal',CR,LF,0
00001C99                          1800  
00001C99= 49 6E 76 61 6C 69 ...   1801  atoi_error_invalid      DC.B    'Invalid address, characters must be $0-F',CR,LF,0
00001CC4                          1802  
00001CC4                          1803  
00001CC4= 49 6E 76 61 6C 69 ...   1804  error_message_1         DC.B    'Invalid Address: Must be greater than 0',CR,LF,0
00001CEE                          1805  
00001CEE= 49 6E 76 61 6C 69 ...   1806  error_message_2         DC.B    'Invalid Address: Must be even',CR,LF,0
00001D0E                          1807  
00001D0E= 49 6E 76 61 6C 69 ...   1808  error_message_3         DC.B    'Invalid Address: Must be even',CR,LF,0
00001D2E                          1809  
00001D2E= 49 6E 76 61 6C 69 ...   1810  error_message_4         DC.B    'Invalid Address: Must be less than $00FFFFFF',CR,LF,0
00001D5D                          1811  
00001D5D= 49 6E 76 61 6C 69 ...   1812  error_message_5         DC.B    'Invalid Address: Must be greater than starting address',CR,LF,0
00001D96                          1813  
00001D96                          1814  
00001D96                          1815  ascii_start:
00001D96                          1816      DS.w    10          ;specify size later?
00001DAA                          1817      
00001DAA                          1818  ascii_end:
00001DAA                          1819      DS.w    10          ;specify size later?
00001DBE                          1820  
00001DBE                          1821  buffer                  ;storing op code
00001DBE                          1822      DS.W    64          ;do we leave as .w or change to .l ?
00001E3E                          1823      
00001E3E                          1824  
00001E3E                          1825      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_END           1DAA
ASCII_START         1D96
ATOI                170E
ATOI_DONE           1780
ATOI_ERROR          1780
ATOI_ERROR_INVALID  1C99
ATOI_FORMAT         1770
ATOI_LOOP           1714
ATOI_LOWERCASE_LETTER  1766
ATOI_NUMBER         1752
ATOI_UPPERCASE_LETTER  175C
BRANCH_16_ITOA      1A56
BUFFER              1DBE
BUFFER_SIZE         40
CR                  D
DECODING_LOOP       1088
DEST_MODE           1C0
DEST_REG            E00
DONE                108E
EA_111_ABSOLUTE_LONG  1B38
EA_111_ABSOLUTE_SHORT  1B24
EA_111_IMMEDIATE    1B4C
EA_BRANCH           1A2C
EA_BRANCH_16        1A3E
EA_BRANCH_32        1A56
EA_CHECK_SIZE       1B54
EA_DESTONLY         198A
EA_EXT              198A
EA_FINISH           187A
EA_HEX_TO_ASCII     1B4C
EA_IMMEDIATE        187C
EA_ITOA_BYTE        1B96
EA_ITOA_BYTE_CONVERT  1BE0
EA_ITOA_DONE        1C18
EA_ITOA_HEX2ASCII   1C08
EA_ITOA_IMMEDIATE   1B7E
EA_ITOA_LETTER      1C10
EA_ITOA_LONG        1BB8
EA_ITOA_NIBBLE_CONVERT  1BFC
EA_ITOA_NUMBER      1C08
EA_ITOA_WORD        1BA2
EA_JMP_HELPER       1A74
EA_LEA              194A
EA_MODE_000         1AA8
EA_MODE_001         1AB6
EA_MODE_010         1AC4
EA_MODE_011         1ADA
EA_MODE_100         1AF4
EA_MODE_101         1B0C
EA_MODE_110         1B0C
EA_MODE_111         1B0C
EA_MODE_TABLE       1A78
EA_MOVE             18BE
EA_MOVEA            1904
EA_MOVEM            198A
EA_QUICK            19B0
EA_QUICK_MOVEQ      1A02
EA_SIZE_BYTE        1B72
EA_SIZE_LONG        1B7A
EA_SIZE_WORD        1B76
EA_START            182A
EA_TRAP             19B0
EA_TYPE_BRANCH      9
EA_TYPE_DESTONLY    4
EA_TYPE_EXT         5
EA_TYPE_IMMEDIATE   0
EA_TYPE_LEA         3
EA_TYPE_MOVE        1
EA_TYPE_MOVEA       2
EA_TYPE_MOVEA6      C
EA_TYPE_MOVEM       6
EA_TYPE_QUICK       8
EA_TYPE_TABLE       1838
EA_TYPE_TRAP        7
ENDA_ERROR_LARGE    180A
ENDA_ERROR_LESS_THAN_STARTA  181A
ENDA_ERROR_NOT_EVEN  17FA
ERROR_MESSAGE_1     1CC4
ERROR_MESSAGE_2     1CEE
ERROR_MESSAGE_3     1D0E
ERROR_MESSAGE_4     1D2E
ERROR_MESSAGE_5     1D5D
GET_ENDING_ADDRESS  104A
GET_END_ADDRESS     1C69
GET_STARTING_ADDRESS  1012
GET_START_ADDRESS   1C38
ITOA                1784
ITOA_ADDRESS        178E
ITOA_ADDRESS_LOOP   179C
ITOA_BYTE           178E
ITOA_FINISH         17D8
ITOA_HEX2ASCII      17B8
ITOA_LETTER         17D0
ITOA_LONG           178E
ITOA_LOOP           1786
ITOA_NUMBER         17C8
ITOA_WORD           178E
LF                  A
LINES_PER_SCREEN    1E
NIBBLE1             F000
NIBBLE2             F00
NIBBLE3             F0
NIBBLE4             F
OPCODE0000          1140
OPCODE0001          115A
OPCODE0010          1160
OPCODE0011          117A
OPCODE0100          1194
OPCODE0101          11AE
OPCODE0110          11CA
OPCODE0111          11E4
OPCODE1000          11EA
OPCODE1001          11F0
OPCODE1010          11F6
OPCODE1011          11FC
OPCODE1100          1202
OPCODE1101          1208
OPCODE1110          1224
OPCODE1111          1244
OP_0000_TABLE       124A
OP_0100_TABLE       12AA
OP_0110_TABLE       130A
OP_ADD              163C
OP_ADDA             1658
OP_ADDI             13CC
OP_ADDQ             153C
OP_AND              163C
OP_ANDI             1388
OP_ASL              1678
OP_ASR              1694
OP_BEQ              15B0
OP_BRA              1580
OP_BSR              1598
OP_CHECK_SIZE       16B0
OP_CHECK_SIZE_ADDA  16F2
OP_CLR              153C
OP_CMP              1606
OP_CMPI             1410
OP_DATA_CLR         10CA
OP_DATA_CLR_LOOP    10D6
OP_DIVS             15EA
OP_DIVU             15D0
OP_EOR              1622
OP_EORI             13EE
OP_EXT              153C
OP_FINISH           10C4
OP_JMP              153C
OP_JSR              153C
OP_LEA              1524
OP_LSL              16B0
OP_LSR              16B0
OP_MOVEAL           1456
OP_MOVEAW           14A2
OP_MOVEB            1432
OP_MOVEL            147E
OP_MOVEM            14FE
OP_MOVEQ            15B0
OP_MOVEW            14CA
OP_MULS             163C
OP_MULU             1622
OP_NOP              14EE
OP_NOT              153C
OP_OR               15EA
OP_ORI              136A
OP_ROL              16B0
OP_ROR              16B0
OP_RTE              153C
OP_RTS              153C
OP_SIZE_BYTE        16D4
OP_SIZE_LONG        16E8
OP_SIZE_WORD        16DE
OP_START            1092
OP_STOP             153C
OP_SUB              15EA
OP_SUBI             13AA
OP_SUBQ             155E
OP_TABLE            10E0
OP_TRAP             153C
OP_UNSUPPORTED_OPCODE  16B0
RIGHT1              1
RIGHT10             A
RIGHT12             C
RIGHT16             10
RIGHT2              2
RIGHT24             18
RIGHT3              3
RIGHT4              4
RIGHT5              5
RIGHT6              6
RIGHT7              7
RIGHT8              8
RIGHT9              9
STACK               A0000
START               1000
STARTA_ERROR_LESS_THAN_ZERO  17DA
STARTA_ERROR_NOT_EVEN  17EA
START_DECODING      1088
VALIDATE_BEGINNING  17DA
WELCOME             1006
WELCOME_MESSAGE     1C1A
