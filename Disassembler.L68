00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/7/2021 11:53:17 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler V1.8(ish)
00000000                             3  * Written by : Brent and Parker
00000000                             4  * Date       : 3/4/21
00000000                             5  * Description: Final Project for CSS 422
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;************************ Define Constants ********************************* 
00000000  =0000000D                  9  CR                  EQU     $0D     ;carriage return
00000000  =0000000A                 10  LF                  EQU     $0a     ;line feed
00000000  =000A0000                 11  stack               EQU     $000A0000
00000000  =0000001E                 12  lines_per_screen    EQU     30
00000000  =00000040                 13  buffer_size         EQU     64      ;size of buffer
00000000  =00000F00                 14  nibble2             EQU     $0F00   ;2nd nibble in code (bits 11-8)
00000000  =000000F0                 15  nibble3             EQU     $00F0   ;3rd nibble in code (bits 7-4)
00000000  =0000000F                 16  nibble4             EQU     $000F   ;4th nibble in code (bits 3-0)
00000000  =00000001                 17  right1              EQU     1       ;shift 1 time
00000000  =00000002                 18  right2              EQU     2       ;shift 2 times
00000000  =00000003                 19  right3              EQU     3       ;shift 3 times to extract src mode
00000000  =00000004                 20  right4              EQU     4       ;shift 4 times to extract 3rd nibble
00000000  =00000005                 21  right5              EQU     5       ;shift 5 times (unused)
00000000  =00000006                 22  right6              EQU     6       ;shift 6 times to extract dst mode
00000000  =00000007                 23  right7              EQU     7       ;shift 7 times
00000000  =00000008                 24  right8              EQU     8       ;shift 8 to extract 2nd nibble
00000000  =00000009                 25  right9              EQU     9       ;shift 9 times to check 2nd nibble?
00000000  =0000000A                 26  right10             EQU     10      ;shift 10
00000000  =0000000C                 27  right12             EQU     12      ;shift 12 to extract 3rd byte
00000000  =00000010                 28  right16             EQU     16      ;shift 16 to extract 2nd byte
00000000  =00000018                 29  right24             EQU     24      ;shift 24 to extract 1st byte
00000000  =000001C0                 30  dest_mode           EQU     $01C0   ; --> 0000 0001 1100 0000 (used for destination in MOVE/MOVEA
00000000                            31  
00000000                            32  
00000000  =00000000                 33  ea_type_immediate   EQU     0
00000000  =00000001                 34  ea_type_move        EQU     1
00000000  =00000002                 35  ea_type_movea       EQU     2
00000000  =0000000C                 36  ea_type_movea6      EQU     12
00000000  =00000003                 37  ea_type_lea         EQU     3
00000000  =00000004                 38  ea_type_destonly    EQU     4
00000000  =00000005                 39  ea_type_ext         EQU     5
00000000  =00000006                 40  ea_type_movem       EQU     6
00000000  =00000007                 41  ea_type_trap        EQU     7
00000000  =00000008                 42  ea_type_quick       EQU     8
00000000  =00000009                 43  ea_type_branch      EQU     9
00000000                            44  
00000000                            45  ;flags???
00000000                            46  
00000000                            47  
00000000                            48  
00001000                            49      ORG    $1000
00001000                            50  START:                              ;first instruction of program
00001000  4FF9 000A0000             51      LEA     stack, SP               ;SP @ $A0000
00001006                            52  
00001006                            53  
00001006                            54  
00001006                            55  ;********************************** Welcome Message ******************************************** 
00001006                            56  WELCOME:
00001006  43F9 00001B1A             57      LEA     welcome_message,A1      ;load the welcome message into A1
0000100C  103C 000E                 58      MOVE.B  #14,D0
00001010  4E4F                      59      TRAP    #15                     ;print contents of welcome_message
00001012                            60  
00001012                            61  
00001012                            62  ;*********************************** Get Starting Address *************************************** 
00001012                            63  GET_STARTING_ADDRESS:
00001012                            64      ;prompt for address
00001012  103C 000E                 65      MOVE.B  #14,D0    
00001016  43F9 00001B38             66      LEA     get_start_address,A1    ;load the get_start_address message into A1
0000101C  4E4F                      67      TRAP    #15                     ;print get_start_address
0000101E                            68      
0000101E                            69      ;get user input address, store, and convert
0000101E  43F9 00001C96             70      LEA     ascii_start,A1          ;store
00001024  103C 0002                 71      MOVE.B  #2,D0                   ;get user input    
00001028  4E4F                      72      TRAP    #15                     ;another trap to get input
0000102A  4EB9 000016D2             73      JSR     ATOI                    ;address is now in hex format in memory location
00001030                            74      
00001030                            75      
00001030                            76      ;at this point our address is in D4 in hex
00001030                            77      ;check if > 0
00001030  B8BC 00000000             78      CMP.L   #0,D4                       ;compare to D4
00001036  6F00 0766                 79      BLE     STARTA_ERROR_LESS_THAN_ZERO ;branch to ERROR_LESS_THAN_ZERO if less than 0
0000103A                            80      
0000103A                            81      ;?? MOVE.L  (A1),D3
0000103A                            82      
0000103A                            83      ;address is > 0 so check if even / odd
0000103A  E29C                      84      ROR.L   #1,D4
0000103C  6500 0770                 85      BCS     STARTA_ERROR_NOT_EVEN
00001040  E39C                      86      ROL.L   #1,D4    
00001042                            87      
00001042                            88      ;address is > 0 and verified even
00001042  2A39 00001C96             89      MOVE.l    (ascii_start),D5      ;load into A5
00001048  2A45                      90      MOVE.l    D5,A5                ;load into A5
0000104A                            91  
0000104A                            92  
0000104A                            93  ;******************************** Get Ending Address ******************************************** 
0000104A                            94  GET_ENDING_ADDRESS:
0000104A                            95      ;prompt for address 
0000104A  103C 000E                 96      MOVE.B  #14,D0
0000104E  43F9 00001B69             97      LEA     get_end_address,A1      ;load the get_end_address message into A1  
00001054  4E4F                      98      TRAP    #15                     ;print get_end_address
00001056                            99      
00001056                           100      ;get user input address, store, and convert
00001056  43F9 00001CAA            101      LEA     ascii_end,A1            ;store 
0000105C  103C 0002                102      MOVE.B  #2,D0                   ;get user input
00001060  4E4F                     103      TRAP    #15                     ;another trap to get intput
00001062  4EB9 000016D2            104      JSR ATOI
00001068                           105  
00001068                           106      ;perform checks:
00001068                           107      ;1.) even
00001068  E29C                     108      ROR.L   #1,D4
0000106A  6500 0752                109      BCS     ENDA_ERROR_NOT_EVEN
0000106E  E39C                     110      ROL.L   #1,D4    
00001070                           111      
00001070                           112      ;2.) less than 00FFFFFF
00001070  B8BC 00FFFFFF            113      CMP.L   #$00FFFFFF,D4
00001076  6C00 0756                114      BGE     ENDA_ERROR_LARGE    
0000107A                           115      
0000107A                           116      ;3.) greater than starting address
0000107A  BBC4                     117      CMP.L   D4,A5
0000107C  6C00 0760                118      BGE     ENDA_ERROR_LESS_THAN_STARTA
00001080                           119      
00001080                           120      ;good --> store in A6
00001080  2C39 00001CAA            121      MOVE.l    (ascii_end),D6      ;load into D6
00001086  2C46                     122      MOVE.l    D6,A6               ;load into A6
00001088                           123  
00001088                           124  
00001088                           125  ;************************************ Main Loop???? ***********************************************
00001088                           126  ;get pointer to first given address
00001088                           127  ;pull hex code from that address and store in A1?
00001088                           128  ;take hex code and go to OP_TABLE
00001088                           129  
00001088                           130  
00001088                           131  ;A5 = starting address
00001088                           132  ;A6 = ending address
00001088                           133  START_DECODING:
00001088                           134      ;CLR.L   D2                             ;clear screen line counter
00001088                           135  
00001088                           136  DECODING_LOOP:
00001088  4EB9 00001092            137      JSR     OP_START                       ;get complete line of instruction to decode   
0000108E                           138      
0000108E                           139  
0000108E                           140      ;print tot screen
0000108E                           141      
0000108E                           142      ;check if finished or if screen is filled
0000108E                           143      ;handle checks
0000108E                           144     
0000108E                           145      
0000108E                           146  DONE:
0000108E  FFFF FFFF                147      SIMHALT                                 ; halt simulator
00001092                           148  
00001092                           149  
00001092                           150  
00001092                           151  ;************************************ OP Stuff *************************************************************************************************************************** 
00001092                           152  
00001092                           153  ;A0 = POINTER TO OP_TABLE???
00001092                           154  ;A1 = 
00001092                           155  ;A2 = buffer (this is our decoded string that will print to screen)
00001092                           156  ;A3 = 
00001092                           157  ;A4 = current memory address for buffer (used for clearing????)
00001092                           158  ;A5 = starting address / current address in memory
00001092                           159  ;A6 = ending address
00001092                           160  ;A7 = SP
00001092                           161  
00001092                           162  ;D0
00001092                           163  ;D1
00001092                           164  ;D2 = ?
00001092                           165  ;D3 = buffer size (used for loop = 64)
00001092                           166  ;D4 = 
00001092                           167  ;D5
00001092                           168  ;D6
00001092                           169  ;D7
00001092                           170  
00001092                           171  OP_START
00001092                           172      ;get complete line? 
00001092                           173      ;everything happens in here
00001092                           174      
00001092                           175      ;MOVEM.L         D2/A6, -(SP)
00001092                           176  
00001092  4EB9 000010CA            177      JSR         OP_DATA_CLR         ;clear buffer
00001098  45F9 00001CBE            178      LEA         buffer, A2          ;A2 now points to buffer, which is cleared
0000109E                           179      
0000109E                           180  
0000109E                           181      ;print out current mem address by putting into buffer and then adding a ' ' (tab)
0000109E  7403                     182      MOVE.L      #$0003,D2           ;? BINARY --> 0011 ?
000010A0  4EB9 00001752            183      JSR         ITOA_ADDRESS        ;convert A5 (current address) to ASCII and put in buffer
000010A6  14FC 0009                184      MOVE.B      #$09, (A2)+         ;adds a ' ' to buffer
000010AA                           185      
000010AA                           186      ;at this point buffer has the memory address and a space, ready for op code                     !!TESTED UP UNTIL THIS POINT AND GOOD!!
000010AA                           187      
000010AA  41F9 000010E0            188      LEA         OP_TABLE, A0
000010B0  4280                     189      CLR.L       D0
000010B2  301D                     190      MOVE.W      (A5)+,D0            ;moves opcode from current address into D0
000010B4  2200                     191      MOVE.L      D0,D1               ;should move into D1
000010B6  143C 000C                192      MOVE.B      #right12,D2         ;move immediate value 12 into D2
000010BA  E469                     193      LSR.W       D2,D1               ;shift D1 by 12 bits, leaving just 4 bits (this is our opcode???)
000010BC  C2FC 0006                194      MULU        #6,D1               ;computes opcode table jump displacement
000010C0  4EF0 1000                195      JMP         0(A0,D1)            ;jumps to opcode table entry (A0 = OP_TABLE)
000010C4                           196  
000010C4                           197  OP_FINISH:
000010C4  4CDF 4004                198      MOVEM.L     (SP)+, D2/A6
000010C8  4E75                     199      RTS                             ;returns to DECODING_LOOP !?!?!?!?!?
000010CA                           200  
000010CA                           201  
000010CA                           202  OP_DATA_CLR:
000010CA  4283                     203      CLR.L       D3                  ; ? What is D3????
000010CC                           204      ;MOVE.B      #buffer_size,D3     ; put 64 into D3
000010CC  163C 000A                205      MOVE.B      #10,D3     ; put 10 into D3                                                                 ;delete after testing and use 64
000010D0  49F9 00001CBE            206      LEA         buffer, A4          ; what address register?
000010D6                           207  
000010D6                           208  OP_DATA_CLR_LOOP:
000010D6  18FC 0000                209      MOVE.B      #0, (A4)+
000010DA  5343                     210      SUBI        #1, D3
000010DC  6EF8                     211      BGT         OP_DATA_CLR_LOOP
000010DE  4E75                     212      RTS                                 ;need RTS to return
000010E0                           213  
000010E0                           214  
000010E0                           215  ;********************************* jump table ****************************************
000010E0                           216  OP_TABLE:
000010E0  4EF9 00001140            217      JMP         opcode0000              ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)                                 $0
000010E6  4EF9 0000115A            218      JMP         opcode0001              ;MOVE.B                                                             $1    
000010EC  4EF9 00001160            219      JMP         opcode0010              ;MOVEA.L, MOVE.L                                                    $2
000010F2  4EF9 0000117A            220      JMP         opcode0011              ;MOVEA.W MOVE.W                                                     $3
000010F8  4EF9 00001194            221      JMP         opcode0100              ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP     $4
000010FE  4EF9 000011AE            222      JMP         opcode0101              ;ADDQ (SUBQ)                                                        $5
00001104  4EF9 000011B4            223      JMP         opcode0110              ;BRA.bw, BSR.bw (BEQ)                                               $6
0000110A  4EF9 000011CE            224      JMP         opcode0111              ;MOVEQ.l                                                            $7
00001110  4EF9 000011D4            225      JMP         opcode1000              ;DIVU (DIVS, OR)                                                    $8
00001116  4EF9 000011DA            226      JMP         opcode1001              ;SUB                                                                $9
0000111C  4EF9 000011E0            227      JMP         opcode1010              ;not assigned                                                       $A
00001122  4EF9 000011E6            228      JMP         opcode1011              ;CMP (EOR)                                                          $B
00001128  4EF9 000011EC            229      JMP         opcode1100              ;MULU (MULS, AND)                                                   $C
0000112E  4EF9 000011F2            230      JMP         opcode1101              ;ADD, ADDA                                                          $D
00001134  4EF9 0000120E            231      JMP         opcode1110              ;ASL, ASR (LSL, LSR, ROL, ROR)                                      $E
0000113A  4EF9 0000122E            232      JMP         opcode1111              ;not assigned                                                       $F
00001140                           233  
00001140                           234  
00001140                           235  
00001140                           236  
00001140                           237  ;A0 = POINTER TO OP_TABLE???
00001140                           238  ;A1 = 
00001140                           239  ;A2 = buffer (this is our decoded string that will print to screen)
00001140                           240  ;A3 = pointer to op_xxx_table
00001140                           241  ;A4 = current memory address for buffer (used for clearing????)
00001140                           242  ;A5 = starting address / current address in memory
00001140                           243  ;A6 = ending address
00001140                           244  ;A7 = SP
00001140                           245  
00001140                           246  ;D0 = full instruction
00001140                           247  ;D1 = full instruction for manipulating (temporary)
00001140                           248  ;D2 = will store immediate value for comparing
00001140                           249  ;D3 = buffer size (used for loop = 64)
00001140                           250  ;D4 = 
00001140                           251  ;D5 = 
00001140                           252  ;D6 = 
00001140                           253  ;D7 = 
00001140                           254  
00001140                           255  
00001140                           256  
00001140                           257  ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)                                 $0
00001140                           258  opcode0000:                                 
00001140  2200                     259      MOVE.L      D0,D1                   ;D1 has full instruction
00001142  0241 0F00                260      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
00001146  143C 0008                261      MOVE.B      #right8, D2             ;store immediate value 8 in D2
0000114A  E469                     262      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
0000114C  C2FC 0006                263      MULU        #6, D1                  ;multiply by 6 to get displacement
00001150  47F9 00001234            264      LEA         OP_0000_TABLE, A3       ;load op_0000_table into address register
00001156  4EF3 1000                265      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
0000115A                           266  
0000115A                           267  ;MOVE.B                                                             $1
0000115A                           268  opcode0001:
0000115A  4EF9 0000141C            269      JMP         OP_MOVEB                ;no need to break down, only MOVE.B
00001160                           270  
00001160                           271  
00001160                           272  ;MOVEA.L, MOVE.L                                                    $2
00001160                           273  opcode0010:
00001160  2200                     274      MOVE.L      D0,D1                   ;D1 has full instruction
00001162  0241 01C0                275      ANDI        #dest_mode, D1          ;0000 0001 1100 0000
00001166  143C 0006                276      MOVE.B      #right6, D2             ;D2 now 00000111
0000116A  E469                     277      LSR.W       D2, D1                  ;shifting destination mode in D1 to far right by 3
0000116C  B23C 0001                278      CMP.B       #1,D1                   ;does d1 = 001?
00001170  6700 02CE                279      BEQ         OP_MOVEAL               ;if d1 = 001, go to MOVEA
00001174  4EF9 00001468            280      JMP         OP_MOVEL                ;else jump to MOVEL
0000117A                           281      
0000117A                           282  
0000117A                           283  
0000117A                           284  
0000117A                           285  ;MOVEA.W MOVE.W                                                     $3
0000117A                           286  opcode0011:
0000117A  2200                     287      MOVE.L      D0,D1                   ;D1 has full instruction
0000117C  0241 01C0                288      ANDI        #dest_mode, D1          ;0000 0001 1100 0000
00001180  143C 0006                289      MOVE.B      #right6, D2             ;D2 now 00000111
00001184  E469                     290      LSR.W       D2, D1                  ;shifting destination mode in D1 to far right by 3
00001186  B23C 0001                291      CMP.B       #1,D1                   ;does d1 = 001?
0000118A  6700 0300                292      BEQ         OP_MOVEAW               ;if d1 = 001, go to MOVEAW
0000118E  4EF9 000014B4            293      JMP         OP_MOVEW                ;else jump to MOVEW
00001194                           294  
00001194                           295  
00001194                           296  
00001194                           297  
00001194                           298  ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP)     $4
00001194                           299  opcode0100:
00001194  2200                     300      MOVE.L      D0,D1                   ;D1 has full instruction
00001196  0241 0F00                301      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
0000119A  143C 0008                302      MOVE.B      #right8, D2             ;store immediate value 8 in D2
0000119E  E469                     303      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
000011A0  C2FC 0006                304      MULU        #6, D1                  ;multiply by 6 to get displacement
000011A4  47F9 00001294            305      LEA         OP_0100_TABLE, A3       ;load op_0000_table into address register
000011AA  4EF3 1000                306      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
000011AE                           307  
000011AE                           308  
000011AE                           309  ;ADDQ (SUBQ)                                                        $5
000011AE                           310  opcode0101:
000011AE  4EF9 00001526            311      JMP         OP_ADDQ
000011B4                           312  
000011B4                           313  
000011B4                           314  
000011B4                           315  
000011B4                           316  ;BRA.bw, BSR.bw (BEQ)                                               $6
000011B4                           317  opcode0110:
000011B4  2200                     318      MOVE.L      D0,D1                   ;D1 has full instruction
000011B6  0241 0F00                319      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
000011BA  143C 0008                320      MOVE.B      #right8, D2             ;store immediate value 8 in D2
000011BE  E469                     321      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
000011C0  C2FC 0006                322      MULU        #6, D1                  ;multiply by 6 to get displacement
000011C4  47F9 000012F4            323      LEA         OP_0110_TABLE, A3       ;load op_0110_table into address register
000011CA  4EF3 1000                324      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
000011CE                           325      
000011CE                           326      ;come back and check when debugging. if this does not work then skip jump table
000011CE                           327  
000011CE                           328  
000011CE                           329  ;MOVEQ                                                            $7
000011CE                           330  opcode0111:
000011CE  4EF9 00001574            331      JMP         OP_MOVEQ
000011D4                           332  
000011D4                           333  
000011D4                           334  
000011D4                           335  ;DIVU (DIVS, OR)                                                    $8
000011D4                           336  opcode1000:
000011D4  4EF9 00001594            337      JMP         OP_DIVU
000011DA                           338  
000011DA                           339  
000011DA                           340  ;SUB                                                                $9
000011DA                           341  opcode1001:
000011DA  4EF9 000015AE            342      JMP         OP_SUB
000011E0                           343  
000011E0                           344  
000011E0                           345  ;not assigned                                                       $A
000011E0                           346  opcode1010:
000011E0  4EF9 00001674            347      JMP         OP_UNSUPPORTED_OPCODE
000011E6                           348  
000011E6                           349  
000011E6                           350  ;CMP (EOR)                                                          $B
000011E6                           351  opcode1011:
000011E6  4EF9 000015CA            352      JMP         OP_CMP
000011EC                           353  
000011EC                           354  
000011EC                           355  ;MULU (MULS, AND)                                                   $C
000011EC                           356  opcode1100:
000011EC  4EF9 000015E6            357      JMP         OP_MULU
000011F2                           358  
000011F2                           359  
000011F2                           360  ;ADD, ADDA                                                          $D
000011F2                           361  opcode1101:
000011F2                           362      ;ADD and ADDA differ on bits 6,7... ADD will never be 11 for bits 6,7... use as check
000011F2  4241                     363      CLR         D1
000011F4  4242                     364      CLR         D2
000011F6  2200                     365      MOVE.L      D0,D1
000011F8  0241 00F0                366      ANDI.W      #nibble3, D1
000011FC  143C 0006                367      MOVE.B      #right6, D2
00001200  E469                     368      LSR.W       D2,D1
00001202                           369      
00001202                           370      ;at this point we have our bits of interest in bits 1,0
00001202                           371      
00001202  B27C 0003                372      CMP         #3,D1                              ;check if bits == 11
00001206  6700 0414                373      BEQ         OP_ADDA                             ;if yes, branch ADDA
0000120A  6000 03F4                374      BRA         OP_ADD                              ;else branch ADD
0000120E                           375  
0000120E                           376  
0000120E                           377  
0000120E                           378  ;ASL, ASR (LSL, LSR, ROL, ROR)                                      $E
0000120E                           379  opcode1110:
0000120E  4241                     380      CLR D1
00001210  4242                     381      CLR D2
00001212  2200                     382      MOVE.L      D0, D1
00001214  0241 0F00                383      ANDI.W      #nibble2, D1
00001218  143C 0008                384      MOVE.B      #right8, D2
0000121C  E469                     385      LSR.W       D2, D1                              ;D1 has 0003 or 0004
0000121E  0241 0001                386      ANDI.W      #0001,D1                           ;isolate single bit
00001222                           387      
00001222                           388      ;at this point we have our single bit of interest in bit 0
00001222                           389      
00001222  B27C 0000                390      CMP         #0,D1                           ;check if bit == 0
00001226  6700 0430                391      BEQ         OP_ASR                          ;if yes, branch to ASR
0000122A  6000 0410                392      BRA         OP_ASL                          ;else, branch to ASL
0000122E                           393  
0000122E                           394  
0000122E                           395  ;not assigned                                                       $F
0000122E                           396  opcode1111:
0000122E  4EF9 00001674            397      JMP         OP_UNSUPPORTED_OPCODE
00001234                           398  
00001234                           399  
00001234                           400  ;******************************** OP_XXX_TABLES ************************************
00001234                           401  ;once in OP_XXX_TABLE , we will use these entries to jump to specific op code to put into buffer
00001234                           402  
00001234                           403  OP_0000_TABLE:
00001234  4EF9 00001354            404      jmp OP_ORI                                      ;0  
0000123A  4EF9 00001674            405      jmp OP_UNSUPPORTED_OPCODE                       ;1
00001240  4EF9 00001372            406      jmp OP_ANDI                                     ;2
00001246  4EF9 00001674            407      jmp OP_UNSUPPORTED_OPCODE                       ;3
0000124C  4EF9 00001394            408      jmp OP_SUBI                                     ;4
00001252  4EF9 00001674            409      jmp OP_UNSUPPORTED_OPCODE                       ;5
00001258  4EF9 000013B6            410      jmp OP_ADDI                                     ;6
0000125E  4EF9 00001674            411      jmp OP_UNSUPPORTED_OPCODE                       ;7
00001264  4EF9 00001674            412      jmp OP_UNSUPPORTED_OPCODE                       ;8
0000126A  4EF9 00001674            413      jmp OP_UNSUPPORTED_OPCODE                       ;9
00001270  4EF9 000013D8            414      jmp OP_EORI                                     ;10
00001276  4EF9 00001674            415      jmp OP_UNSUPPORTED_OPCODE                       ;11
0000127C  4EF9 000013FA            416      jmp OP_CMPI                                     ;12
00001282  4EF9 00001674            417      jmp OP_UNSUPPORTED_OPCODE                       ;13
00001288  4EF9 00001674            418      jmp OP_UNSUPPORTED_OPCODE                       ;14
0000128E  4EF9 00001674            419      jmp OP_UNSUPPORTED_OPCODE                       ;15
00001294                           420  
00001294                           421  ;OP_0001_TABLE:
00001294                           422  ;    jmp OP_MOVEB
00001294                           423  
00001294                           424  
00001294                           425  ;OP_0010_TABLE:
00001294                           426  ;   jmp OP_MOVEAL
00001294                           427  ;   jmp OP_MOVEL
00001294                           428  
00001294                           429  
00001294                           430  ;OP_0011_TABLE:
00001294                           431  
00001294                           432  
00001294                           433  
00001294                           434  ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP     $4
00001294                           435  ;NOP    1110
00001294                           436  ;MOVEM  1D00
00001294                           437  ;LEA    AN1
00001294                           438  OP_0100_TABLE:
00001294  4EF9 00001674            439      jmp OP_UNSUPPORTED_OPCODE                           ;0  
0000129A  4EF9 0000150E            440      jmp OP_LEA                                          ;1      (address 0001)
000012A0  4EF9 00001674            441      jmp OP_UNSUPPORTED_OPCODE                           ;2
000012A6  4EF9 0000150E            442      jmp OP_LEA                                          ;3      (address 0011)
000012AC  4EF9 00001674            443      jmp OP_UNSUPPORTED_OPCODE                           ;4 
000012B2  4EF9 0000150E            444      jmp OP_LEA                                          ;5      (address 0101)
000012B8  4EF9 00001674            445      jmp OP_UNSUPPORTED_OPCODE                           ;6 
000012BE  4EF9 0000150E            446      jmp OP_LEA                                          ;7      (address 0111) 
000012C4  4EF9 000014E8            447      jmp OP_MOVEM                                        ;8                          ;jmp OP_MOVEM_R2M
000012CA  4EF9 0000150E            448      jmp OP_LEA                                          ;9      (address 1001) 
000012D0  4EF9 00001674            449      jmp OP_UNSUPPORTED_OPCODE                           ;10 
000012D6  4EF9 0000150E            450      jmp OP_LEA                                          ;11     (address 1011) 
000012DC  4EF9 000014E8            451      jmp OP_MOVEM                                        ;12                         ;jmp OP_MOVEM_M2R    
000012E2  4EF9 0000150E            452      jmp OP_LEA                                          ;13     (address 1101)
000012E8  4EF9 000014D8            453      jmp OP_NOP                                          ;14
000012EE  4EF9 0000150E            454      jmp OP_LEA                                          ;15     (address 1111)
000012F4                           455  
000012F4                           456  
000012F4                           457  ;OP_0101_TABLE:
000012F4                           458  
000012F4                           459  
000012F4                           460  
000012F4                           461  ;BRA nibble 2 = 0000 (0) , BSR nibble 2 = 0001 (1)
000012F4                           462  OP_0110_TABLE:
000012F4  4EF9 00001548            463      jmp OP_BRA                                          ;0
000012FA  4EF9 0000155E            464      jmp OP_BSR                                          ;1
00001300  4EF9 00001674            465      jmp OP_UNSUPPORTED_OPCODE                           ;2
00001306  4EF9 00001674            466      jmp OP_UNSUPPORTED_OPCODE                           ;3
0000130C  4EF9 00001674            467      jmp OP_UNSUPPORTED_OPCODE                           ;4
00001312  4EF9 00001674            468      jmp OP_UNSUPPORTED_OPCODE                           ;5
00001318  4EF9 00001674            469      jmp OP_UNSUPPORTED_OPCODE                           ;6
0000131E  4EF9 00001674            470      jmp OP_UNSUPPORTED_OPCODE                           ;7
00001324  4EF9 00001674            471      jmp OP_UNSUPPORTED_OPCODE                           ;8
0000132A  4EF9 00001674            472      jmp OP_UNSUPPORTED_OPCODE                           ;9
00001330  4EF9 00001674            473      jmp OP_UNSUPPORTED_OPCODE                           ;10
00001336  4EF9 00001674            474      jmp OP_UNSUPPORTED_OPCODE                           ;11
0000133C  4EF9 00001674            475      jmp OP_UNSUPPORTED_OPCODE                           ;12
00001342  4EF9 00001674            476      jmp OP_UNSUPPORTED_OPCODE                           ;13
00001348  4EF9 00001674            477      jmp OP_UNSUPPORTED_OPCODE                           ;14
0000134E  4EF9 00001674            478      jmp OP_UNSUPPORTED_OPCODE                           ;15
00001354                           479  
00001354                           480  
00001354                           481  ;OP_0111_TABLE:
00001354                           482  ;implement later if needed
00001354                           483  
00001354                           484  
00001354                           485  ;OP_1000_TABLE:
00001354                           486  ;implement later if needed
00001354                           487  
00001354                           488  
00001354                           489  ;OP_1001_TABLE:
00001354                           490  ;implement later if needed
00001354                           491  
00001354                           492  
00001354                           493  ;OP_1010_TABLE:
00001354                           494  ;implement later if needed
00001354                           495  
00001354                           496  
00001354                           497  ;OP_1011_TABLE:
00001354                           498  ;implement later if needed
00001354                           499  
00001354                           500  
00001354                           501  ;OP_1100_TABLE:
00001354                           502  ;implement later if needed
00001354                           503  
00001354                           504  
00001354                           505  ;OP_1101_TABLE:
00001354                           506  ;implement later if needed
00001354                           507  
00001354                           508  
00001354                           509  ;OP_1110_TABLE:
00001354                           510  ;implement later if needed
00001354                           511  
00001354                           512  
00001354                           513  ;OP_1111_TABLE:
00001354                           514  ;implement later if needed
00001354                           515  
00001354                           516  
00001354                           517  
00001354                           518  
00001354                           519  ;******************************** OP_INSTRUCTION_XXXX******************************************
00001354                           520  ;this is where we are putting ascii text into buffer
00001354                           521  
00001354                           522  
00001354                           523  OP_ORI:
00001354  14FC 004F                524      MOVE.B  #'O', (A2)+
00001358  14FC 0052                525      MOVE.B  #'R', (A2)+
0000135C  14FC 0049                526      MOVE.B  #'I', (A2)+
00001360                           527      
00001360                           528      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001360  4EB9 00001674            529      JSR     OP_CHECK_SIZE
00001366                           530      
00001366  7200                     531      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001368                           532  
00001368  4EB9 000017EE            533      JSR     EA_START
0000136E  4EF8 10C4                534      JMP     OP_FINISH
00001372                           535  
00001372                           536  OP_ANDI:  ;(optional)
00001372  14FC 0041                537      MOVE.B  #'A', (A2)+
00001376  14FC 004E                538      MOVE.B  #'N', (A2)+
0000137A  14FC 0044                539      MOVE.B  #'D', (A2)+
0000137E  14FC 0049                540      MOVE.B  #'I', (A2)+
00001382                           541      
00001382                           542      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001382  4EB9 00001674            543      JSR     OP_CHECK_SIZE
00001388                           544      
00001388  7200                     545      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
0000138A                           546  
0000138A  4EB9 000017EE            547      JSR     EA_START
00001390  4EF8 10C4                548      JMP     OP_FINISH
00001394                           549  
00001394                           550  
00001394                           551  OP_SUBI:  ;(optional)
00001394  14FC 0053                552      MOVE.B  #'S', (A2)+
00001398  14FC 0055                553      MOVE.B  #'U', (A2)+
0000139C  14FC 0042                554      MOVE.B  #'B', (A2)+
000013A0  14FC 0049                555      MOVE.B  #'I', (A2)+
000013A4                           556      
000013A4                           557      ;call OP_CHECK_SIZE to append a .b/.w/.l
000013A4  4EB9 00001674            558      JSR     OP_CHECK_SIZE
000013AA                           559      
000013AA  7200                     560      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013AC                           561  
000013AC  4EB9 000017EE            562      JSR     EA_START
000013B2  4EF8 10C4                563      JMP     OP_FINISH
000013B6                           564  
000013B6                           565  
000013B6                           566  OP_ADDI:  ;(optional)
000013B6  14FC 0041                567      MOVE.B  #'A', (A2)+
000013BA  14FC 0044                568      MOVE.B  #'D', (A2)+
000013BE  14FC 0044                569      MOVE.B  #'D', (A2)+
000013C2  14FC 0049                570      MOVE.B  #'I', (A2)+
000013C6                           571      
000013C6                           572      ;call OP_CHECK_SIZE to append a .b/.w/.l
000013C6  4EB9 00001674            573      JSR     OP_CHECK_SIZE
000013CC                           574     
000013CC  7200                     575      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013CE                           576  
000013CE  4EB9 000017EE            577      JSR     EA_START
000013D4  4EF8 10C4                578      JMP     OP_FINISH
000013D8                           579  
000013D8                           580  
000013D8                           581  OP_EORI:  ;(optional)
000013D8  14FC 0045                582      MOVE.B  #'E', (A2)+
000013DC  14FC 004F                583      MOVE.B  #'O', (A2)+
000013E0  14FC 0052                584      MOVE.B  #'R', (A2)+
000013E4  14FC 0049                585      MOVE.B  #'I', (A2)+
000013E8                           586      
000013E8                           587      ;call OP_CHECK_SIZE to append a .b/.w/.l
000013E8  4EB9 00001674            588      JSR     OP_CHECK_SIZE
000013EE                           589      
000013EE  7200                     590      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013F0                           591      
000013F0  4EB9 000017EE            592      JSR     EA_START
000013F6  4EF8 10C4                593      JMP     OP_FINISH
000013FA                           594  
000013FA                           595  
000013FA                           596  OP_CMPI:  ;(optional)
000013FA  14FC 0043                597      MOVE.B  #'C', (A2)+
000013FE  14FC 004D                598      MOVE.B  #'M', (A2)+
00001402  14FC 0050                599      MOVE.B  #'P', (A2)+
00001406  14FC 0049                600      MOVE.B  #'I', (A2)+
0000140A                           601      
0000140A                           602      
0000140A                           603      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000140A  4EB9 00001674            604      JSR     OP_CHECK_SIZE
00001410                           605  
00001410  7200                     606      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001412                           607  
00001412  4EB9 000017EE            608      JSR     EA_START
00001418  4EF8 10C4                609      JMP     OP_FINISH
0000141C                           610  
0000141C                           611  
0000141C                           612  OP_MOVEB:
0000141C  14FC 004D                613      MOVE.B  #'M', (A2)+
00001420  14FC 004F                614      MOVE.B  #'O', (A2)+
00001424  14FC 0056                615      MOVE.B  #'V', (A2)+
00001428  14FC 0045                616      MOVE.B  #'E', (A2)+
0000142C  14FC 002E                617      MOVE.B  #'.', (A2)+
00001430  14FC 0042                618      MOVE.B  #'B', (A2)+
00001434                           619      
00001434  7201                     620      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
00001436                           621      
00001436  4EB9 000017EE            622      JSR     EA_START
0000143C  4EF8 10C4                623      JMP     OP_FINISH
00001440                           624  
00001440                           625  OP_MOVEAL:
00001440  14FC 004D                626      MOVE.B  #'M', (A2)+
00001444  14FC 004F                627      MOVE.B  #'O', (A2)+
00001448  14FC 0056                628      MOVE.B  #'V', (A2)+
0000144C  14FC 0045                629      MOVE.B  #'E', (A2)+
00001450  14FC 0041                630      MOVE.B  #'A', (A2)+
00001454  14FC 002E                631      MOVE.B  #'.', (A2)+
00001458  14FC 004C                632      MOVE.B  #'L', (A2)+
0000145C                           633      
0000145C  7202                     634      MOVE.L  #ea_type_movea, D1                   ;preps for EA_START and puts 2 into D1
0000145E                           635      
0000145E  4EB9 000017EE            636      JSR     EA_START
00001464  4EF8 10C4                637      JMP     OP_FINISH
00001468                           638  
00001468                           639  OP_MOVEL:
00001468  14FC 004D                640      MOVE.B  #'M', (A2)+
0000146C  14FC 004F                641      MOVE.B  #'O', (A2)+
00001470  14FC 0056                642      MOVE.B  #'V', (A2)+
00001474  14FC 0045                643      MOVE.B  #'E', (A2)+
00001478  14FC 002E                644      MOVE.B  #'.', (A2)+
0000147C  14FC 004C                645      MOVE.B  #'L', (A2)+
00001480                           646      
00001480  7201                     647      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
00001482                           648      
00001482  4EB9 000017EE            649      JSR     EA_START
00001488  4EF8 10C4                650      JMP     OP_FINISH
0000148C                           651  
0000148C                           652  
0000148C                           653  OP_MOVEAW:
0000148C  14FC 004D                654      MOVE.B  #'M', (A2)+
00001490  14FC 004F                655      MOVE.B  #'O', (A2)+
00001494  14FC 0056                656      MOVE.B  #'V', (A2)+
00001498  14FC 0045                657      MOVE.B  #'E', (A2)+
0000149C  14FC 0041                658      MOVE.B  #'A', (A2)+
000014A0  14FC 002E                659      MOVE.B  #'.', (A2)+
000014A4  14FC 0057                660      MOVE.B  #'W', (A2)+
000014A8                           661      
000014A8  7202                     662      MOVE.L  #ea_type_movea, D1                   ;preps for EA_START and puts 2 into D1
000014AA                           663      
000014AA  4EB9 000017EE            664      JSR     EA_START
000014B0  4EF8 10C4                665      JMP     OP_FINISH
000014B4                           666  
000014B4                           667  
000014B4                           668  OP_MOVEW:
000014B4  14FC 004D                669      MOVE.B  #'M', (A2)+
000014B8  14FC 004F                670      MOVE.B  #'O', (A2)+
000014BC  14FC 0056                671      MOVE.B  #'V', (A2)+
000014C0  14FC 0045                672      MOVE.B  #'E', (A2)+
000014C4  14FC 002E                673      MOVE.B  #'.', (A2)+
000014C8  14FC 0057                674      MOVE.B  #'W', (A2)+
000014CC                           675      
000014CC  7201                     676      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
000014CE                           677      
000014CE  4EB9 000017EE            678      JSR     EA_START
000014D4  4EF8 10C4                679      JMP     OP_FINISH
000014D8                           680  
000014D8                           681  
000014D8                           682  OP_NOP:
000014D8  14FC 004E                683      MOVE.B  #'N', (A2)+
000014DC  14FC 004F                684      MOVE.B  #'O', (A2)+
000014E0  14FC 0050                685      MOVE.B  #'P', (A2)+
000014E4                           686      
000014E4  4EF8 10C4                687      JMP     OP_FINISH
000014E8                           688  
000014E8                           689  
000014E8                           690  OP_MOVEM:
000014E8                           691      ;see movemd2r or movemr2d... see below at bottom ?????
000014E8                           692      
000014E8  14FC 004D                693      MOVE.B  #'M', (A2)+
000014EC  14FC 004F                694      MOVE.B  #'O', (A2)+
000014F0  14FC 0056                695      MOVE.B  #'V', (A2)+
000014F4  14FC 0045                696      MOVE.B  #'E', (A2)+
000014F8  14FC 004D                697      MOVE.B  #'M', (A2)+
000014FC                           698      
000014FC                           699      ;call OP_CHECK_SIZE to append a .b/.w/.l
000014FC  4EB9 00001674            700      JSR     OP_CHECK_SIZE
00001502                           701      
00001502  7206                     702      MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
00001504                           703      
00001504  4EB9 000017EE            704      JSR     EA_START
0000150A  4EF8 10C4                705      JMP     OP_FINISH
0000150E                           706  
0000150E                           707  OP_LEA:
0000150E  14FC 004C                708      MOVE.B  #'L', (A2)+
00001512  14FC 0045                709      MOVE.B  #'E', (A2)+
00001516  14FC 0041                710      MOVE.B  #'A', (A2)+
0000151A                           711      
0000151A  7203                     712      MOVE.L  #ea_type_lea, D1                   ;preps for EA_START and puts 3 into D1
0000151C                           713      
0000151C  4EB9 000017EE            714      JSR     EA_START
00001522  4EF8 10C4                715      JMP     OP_FINISH
00001526                           716  
00001526                           717  OP_CLR:  ;(optional)
00001526                           718  ;implement later if needed
00001526                           719  
00001526                           720  
00001526                           721  OP_NOT:  ;(optional)
00001526                           722  ;implement later if needed
00001526                           723  
00001526                           724  
00001526                           725  OP_EXT:  ;(optional)
00001526                           726  ;implement later if needed
00001526                           727  
00001526                           728  
00001526                           729  OP_TRAP:  ;(optional)
00001526                           730  ;implement later if needed
00001526                           731  
00001526                           732   
00001526                           733  OP_STOP:  ;(optional)
00001526                           734  ;implement later if needed
00001526                           735  
00001526                           736  
00001526                           737  OP_RTE:  ;(optional)
00001526                           738  ;implement later if needed
00001526                           739  
00001526                           740  
00001526                           741  OP_RTS:  ;(optional)
00001526                           742  ;implement later if needed
00001526                           743  
00001526                           744  
00001526                           745  OP_JSR:  ;(optional)
00001526                           746  ;implement later if needed
00001526                           747  
00001526                           748  
00001526                           749  OP_JMP:  ;(optional)
00001526                           750  ;implement later if needed
00001526                           751  
00001526                           752  
00001526                           753  OP_ADDQ:
00001526  14FC 0041                754      MOVE.B  #'A', (A2)+
0000152A  14FC 0044                755      MOVE.B  #'D', (A2)+
0000152E  14FC 0044                756      MOVE.B  #'D', (A2)+
00001532  14FC 0051                757      MOVE.B  #'Q', (A2)+
00001536                           758      
00001536                           759      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001536  4EB9 00001674            760      JSR     OP_CHECK_SIZE
0000153C                           761  
0000153C  7208                     762      MOVE.L  #ea_type_quick, D1                   ;preps for EA_START and puts 8 into D1
0000153E                           763  
0000153E  4EB9 000017EE            764      JSR     EA_START
00001544  4EF8 10C4                765      JMP     OP_FINISH
00001548                           766  
00001548                           767  OP_SUBQ:  ;(optional)
00001548                           768  ;implement later if needed
00001548                           769  
00001548                           770  
00001548                           771  OP_BRA:                                     ;???? DO WE DEFINE SIZE HERE OR AFTER????
00001548  14FC 0042                772      MOVE.B  #'B', (A2)+
0000154C  14FC 0052                773      MOVE.B  #'R', (A2)+
00001550  14FC 0041                774      MOVE.B  #'A', (A2)+
00001554                           775  
00001554  4EB9 000017EE            776      JSR     EA_START                        ;? DO WE HAVE EA?
0000155A  4EF8 10C4                777      JMP     OP_FINISH
0000155E                           778  
0000155E                           779  
0000155E                           780  OP_BSR:
0000155E  14FC 0042                781      MOVE.B  #'B', (A2)+
00001562  14FC 0053                782      MOVE.B  #'S', (A2)+
00001566  14FC 0052                783      MOVE.B  #'R', (A2)+
0000156A                           784  
0000156A  4EB9 000017EE            785      JSR     EA_START                        ;DO WE HAVE EA?
00001570  4EF8 10C4                786      JMP     OP_FINISH
00001574                           787  
00001574                           788  
00001574                           789  OP_BEQ:
00001574                           790  ;implement later if needed
00001574                           791  
00001574                           792  
00001574                           793  OP_MOVEQ:
00001574  14FC 004D                794      MOVE.B  #'M', (A2)+
00001578  14FC 004F                795      MOVE.B  #'O', (A2)+
0000157C  14FC 0056                796      MOVE.B  #'V', (A2)+
00001580  14FC 0045                797      MOVE.B  #'E', (A2)+
00001584  14FC 0051                798      MOVE.B  #'Q', (A2)+
00001588                           799      
00001588                           800      ;DO WE NEED A .L ?
00001588                           801      
00001588  7208                     802      MOVE.L  #ea_type_quick, D1                   ;preps for EA_START and puts 8 into D1
0000158A                           803      
0000158A  4EB9 000017EE            804      JSR     EA_START
00001590  4EF8 10C4                805      JMP     OP_FINISH
00001594                           806  
00001594                           807  
00001594                           808  OP_DIVU:
00001594  14FC 0044                809      MOVE.B  #'D', (A2)+
00001598  14FC 0049                810      MOVE.B  #'I', (A2)+
0000159C  14FC 0056                811      MOVE.B  #'V', (A2)+
000015A0  14FC 0055                812      MOVE.B  #'U', (A2)+
000015A4                           813      ;MOVE.B  #'.', (A2)+
000015A4                           814      ;MOVE.B  #'W', (A2)+  
000015A4                           815    
000015A4  4EB9 000017EE            816      JSR     EA_START
000015AA  4EF8 10C4                817      JMP     OP_FINISH    
000015AE                           818  
000015AE                           819  
000015AE                           820  OP_DIVS  ;(optional)
000015AE                           821  ;implement later if needed
000015AE                           822  
000015AE                           823  
000015AE                           824  OP_OR  ;(optional)
000015AE                           825  ;implement later if needed
000015AE                           826  
000015AE                           827  
000015AE                           828  OP_SUB:
000015AE  14FC 0053                829      MOVE.B  #'S', (A2)+
000015B2  14FC 0055                830      MOVE.B  #'U', (A2)+
000015B6  14FC 0042                831      MOVE.B  #'B', (A2)+
000015BA                           832  
000015BA                           833      ;to determine size... bits 7 and 6? (.b, .w, .l)
000015BA                           834      ;D0 HAS COMPLETE OP CODE INSTRUCTION (XXXX)
000015BA                           835      
000015BA                           836      ;call OP_CHECK_SIZE to append a .b/.w/.l
000015BA  4EB9 00001674            837      JSR     OP_CHECK_SIZE
000015C0                           838      
000015C0                           839      ;at this point it will return with SUB.X and go to EA_START
000015C0  4EB9 000017EE            840      JSR     EA_START
000015C6  4EF8 10C4                841      JMP     OP_FINISH    
000015CA                           842  
000015CA                           843  
000015CA                           844  OP_CMP:
000015CA  14FC 0043                845      MOVE.B  #'C', (A2)+
000015CE  14FC 004D                846      MOVE.B  #'M', (A2)+
000015D2  14FC 0050                847      MOVE.B  #'P', (A2)+
000015D6                           848  
000015D6                           849      ;call OP_CHECK_SIZE to append a .b/.w/.l    
000015D6  4EB9 00001674            850      JSR     OP_CHECK_SIZE
000015DC                           851      
000015DC                           852      ;at this point it will return with SUB.X and go to EA_START
000015DC  4EB9 000017EE            853      JSR     EA_START
000015E2  4EF8 10C4                854      JMP     OP_FINISH    
000015E6                           855      
000015E6                           856  
000015E6                           857  
000015E6                           858  OP_EOR:  ;(optional)
000015E6                           859  ;implement later if needed
000015E6                           860  
000015E6                           861  
000015E6                           862  OP_MULU:
000015E6  14FC 004D                863      MOVE.B  #'M', (A2)+
000015EA  14FC 0055                864      MOVE.B  #'U', (A2)+
000015EE  14FC 004C                865      MOVE.B  #'L', (A2)+
000015F2  14FC 0055                866      MOVE.B  #'U', (A2)+
000015F6                           867  
000015F6  4EB9 000017EE            868      JSR     EA_START
000015FC  4EF8 10C4                869      JMP     OP_FINISH    
00001600                           870  
00001600                           871  OP_MULS:  ;(optional)
00001600                           872  ;implement later if needed
00001600                           873  
00001600                           874  
00001600                           875  OP_AND:  ;(optional)
00001600                           876  ;implement later if needed
00001600                           877  
00001600                           878  
00001600                           879  OP_ADD:
00001600  14FC 0041                880      MOVE.B  #'A', (A2)+
00001604  14FC 0044                881      MOVE.B  #'D', (A2)+
00001608  14FC 0044                882      MOVE.B  #'D', (A2)+
0000160C                           883  
0000160C                           884      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000160C  4EB9 00001674            885      JSR     OP_CHECK_SIZE
00001612                           886  
00001612  4EB9 000017EE            887      JSR     EA_START
00001618  4EF8 10C4                888      JMP     OP_FINISH
0000161C                           889  
0000161C                           890  OP_ADDA:
0000161C  14FC 0041                891      MOVE.B  #'A', (A2)+
00001620  14FC 0044                892      MOVE.B  #'D', (A2)+
00001624  14FC 0044                893      MOVE.B  #'D', (A2)+
00001628  14FC 0041                894      MOVE.B  #'A', (A2)+
0000162C                           895  
0000162C                           896      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000162C  4EB9 000016B6            897      JSR     OP_CHECK_SIZE_ADDA
00001632                           898  
00001632  4EB9 000017EE            899      JSR     EA_START
00001638  4EF8 10C4                900      JMP     OP_FINISH
0000163C                           901  
0000163C                           902  
0000163C                           903  OP_ASL:
0000163C  14FC 0041                904      MOVE.B  #'A', (A2)+
00001640  14FC 0053                905      MOVE.B  #'S', (A2)+
00001644  14FC 004C                906      MOVE.B  #'L', (A2)+
00001648                           907  
00001648                           908      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001648  4EB9 00001674            909      JSR     OP_CHECK_SIZE
0000164E                           910  
0000164E  4EB9 000017EE            911      JSR     EA_START
00001654  4EF8 10C4                912      JMP     OP_FINISH
00001658                           913  
00001658                           914  
00001658                           915  OP_ASR:
00001658  14FC 0041                916      MOVE.B  #'A', (A2)+
0000165C  14FC 0053                917      MOVE.B  #'S', (A2)+
00001660  14FC 0052                918      MOVE.B  #'R', (A2)+
00001664                           919  
00001664                           920      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001664  4EB9 00001674            921      JSR     OP_CHECK_SIZE
0000166A                           922  
0000166A  4EB9 000017EE            923      JSR     EA_START
00001670  4EF8 10C4                924      JMP     OP_FINISH
00001674                           925  
00001674                           926  OP_LSL:  ;(optional)
00001674                           927  ;implement later if needed
00001674                           928  
00001674                           929  
00001674                           930  
00001674                           931  OP_LSR:  ;(optional)
00001674                           932  ;implement later if needed
00001674                           933  
00001674                           934  
00001674                           935  
00001674                           936  OP_ROL:  ;(optional)
00001674                           937  ;implement later if needed
00001674                           938  
00001674                           939  
00001674                           940  
00001674                           941  OP_ROR:  ;(optional)
00001674                           942  ;implement later if needed
00001674                           943  
00001674                           944  
00001674                           945  
00001674                           946  ;OP_MOVEM_R2M:
00001674                           947  ;    MOVE.B  #'M', (A2)+
00001674                           948  ;    MOVE.B  #'O', (A2)+
00001674                           949  ;    MOVE.B  #'V', (A2)+
00001674                           950  ;    MOVE.B  #'E', (A2)+
00001674                           951  ;    MOVE.B  #'M', (A2)+
00001674                           952      
00001674                           953  ;    ;call OP_CHECK_SIZE to append a .b/.w/.l
00001674                           954  ;    JSR     OP_CHECK_SIZE
00001674                           955      
00001674                           956  ;    MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
00001674                           957      
00001674                           958  ;    JSR     EA_START
00001674                           959  ;    JMP     OP_FINISH
00001674                           960  
00001674                           961  
00001674                           962  ;OP_MOVEM_M2R:
00001674                           963  ;    MOVE.B  #'M', (A2)+
00001674                           964  ;    MOVE.B  #'O', (A2)+
00001674                           965  ;    MOVE.B  #'V', (A2)+
00001674                           966  ;    MOVE.B  #'E', (A2)+
00001674                           967  ;    MOVE.B  #'M', (A2)+
00001674                           968      
00001674                           969  ;    ;call OP_CHECK_SIZE to append a .b/.w/.l
00001674                           970  ;    JSR     OP_CHECK_SIZE
00001674                           971      
00001674                           972  ;    MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
00001674                           973      
00001674                           974  ;    JSR     EA_START
00001674                           975  ;    JMP     OP_FINISH
00001674                           976  
00001674                           977  
00001674                           978  OP_UNSUPPORTED_OPCODE:
00001674                           979  ;fill out
00001674                           980  
00001674                           981  ;D0 HAS COMPLETE INSTRUCTION
00001674                           982  OP_CHECK_SIZE:
00001674  4241                     983      CLR     D1                                  ;CLEAR D1
00001676  4242                     984      CLR     D2                                  ;clear D2
00001678  2200                     985      MOVE.L  D0,D1                               ;D0 and D1 both have complete opcode
0000167A  0241 00F0                986      ANDI.W  #nibble3,D1                         ;isolate nibble 3
0000167E  143C 0006                987      MOVE.B  #right6, D2                         ;putting immediate value 6 in D2
00001682  E469                     988      LSR.W   D2, D1                              ;bits 7,6 --> bits 1,0
00001684                           989      
00001684                           990       
00001684  B27C 0000                991      CMP     #00,D1                              ;compare bits 1,0 to 00
00001688  6700 000E                992      BEQ     OP_SIZE_BYTE                        ;if bits == 00, size byte
0000168C  B27C 0001                993      CMP     #01,D1                              ;compare bits to 01
00001690  6700 0010                994      BEQ     OP_SIZE_WORD                        ;if bits == 01, size word
00001694  6000 0016                995      BRA     OP_SIZE_LONG                        ;else size long
00001698                           996  
00001698                           997  OP_SIZE_BYTE
00001698  14FC 002E                998      MOVE.B  #'.', (A2)+
0000169C  14FC 0042                999      MOVE.B  #'B', (A2)+
000016A0  4E75                    1000      RTS
000016A2                          1001  
000016A2                          1002  OP_SIZE_WORD
000016A2  14FC 002E               1003      MOVE.B  #'.', (A2)+
000016A6  14FC 0057               1004      MOVE.B  #'W', (A2)+
000016AA  4E75                    1005      RTS
000016AC                          1006  
000016AC                          1007  
000016AC                          1008  OP_SIZE_LONG
000016AC  14FC 002E               1009      MOVE.B  #'.', (A2)+
000016B0  14FC 004C               1010      MOVE.B  #'L', (A2)+
000016B4  4E75                    1011      RTS
000016B6                          1012  
000016B6                          1013  
000016B6                          1014  OP_CHECK_SIZE_ADDA:
000016B6  4241                    1015      CLR     D1                                  ;CLEAR D1
000016B8  4242                    1016      CLR     D2                                  ;clear D2
000016BA  2200                    1017      MOVE.L  D0,D1                               ;D0 and D1 both have complete opcode
000016BC  0241 0F00               1018      ANDI.W  #nibble2,D1                         ;isolate nibble 2
000016C0  143C 0008               1019      MOVE.B  #right8, D2                         ;putting immediate value 8 in D2
000016C4  E469                    1020      LSR.W   D2, D1                              ;
000016C6                          1021      
000016C6                          1022      ;at this point we have our single bit in bit 0
000016C6                          1023      
000016C6  0241 0001               1024      ANDI.W  #0001,D1                            ;isolate bit 0
000016CA  B27C 0000               1025      CMP     #0,D1                               ;check if bit == 0
000016CE  67D2                    1026      BEQ     OP_SIZE_WORD                        ;if yes, size = word
000016D0  60DA                    1027      BRA     OP_SIZE_LONG                        ;else, size = long
000016D2                          1028   
000016D2                          1029  
000016D2                          1030  ;******************************** ATOI ******************************************************************************************************************************
000016D2                          1031  ATOI:
000016D2  2401                    1032          MOVE.L      D1,D2                   ;loop variable (size) is in D2
000016D4  2449                    1033          MOVEA.L     A1,A2                   ;pointer to next char
000016D6  4284                    1034          CLR.L       D4
000016D8                          1035  
000016D8                          1036  ATOI_LOOP  
000016D8  4243                    1037          CLR         D3                      ;clear d3
000016DA                          1038          ;CMP.B       #0,D2
000016DA                          1039          ;BEQ         ATOI_DONE               ;DONE
000016DA  5382                    1040          SUBI.L      #1,D2                   ;subtract 1 from loop counter
000016DC  161A                    1041          MOVE.B      (A2)+,D3                 ;move current byte to D3, then increment to next
000016DE  B63C 002F               1042          CMP.B       #$2F,D3
000016E2  6F00 0060               1043          BLE         ATOI_ERROR              ;if less than 30, not a number, branch to error
000016E6  B63C 0039               1044          CMP.B       #$39,D3                 ;check byte to see if number or letter
000016EA  6F00 002A               1045          BLE         ATOI_NUMBER             ;30<x<39 --> number
000016EE  B63C 0040               1046          CMP.B       #$40,D3
000016F2  6F00 0050               1047          BLE         ATOI_ERROR
000016F6  B63C 0046               1048          CMP.B       #$46,D3
000016FA  6F00 0024               1049          BLE         ATOI_UPPERCASE_LETTER   ;less than 47, it is uppercase letter
000016FE  B63C 0060               1050          CMP.B       #$60,D3
00001702  6F00 0040               1051          BLE         ATOI_ERROR
00001706  B63C 0066               1052          CMP.B       #$66,D3
0000170A  6F00 001E               1053          BLE         ATOI_LOWERCASE_LETTER
0000170E  B63C 0067               1054          CMP.B       #$67,D3
00001712  6C00 0030               1055          BGE         ATOI_ERROR
00001716                          1056          
00001716                          1057          ;BNE         ATOI_LOOP                    ;run loop
00001716                          1058      
00001716                          1059  
00001716                          1060  ATOI_NUMBER
00001716                          1061  ;number --> d1 = d1 - $30
00001716  0403 0030               1062      SUBI.B          #$30, D3                    ;subtract 30 if number
0000171A                          1063      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
0000171A  4EF9 00001734           1064      JMP             ATOI_FORMAT                 ;testing
00001720                          1065      ;JMP            ATOI_LOOP                   ;loop
00001720                          1066  
00001720                          1067  ATOI_UPPERCASE_LETTER
00001720                          1068  ;letter --> d1 = d1 - $37
00001720  0403 0037               1069      SUBI.B          #$37,D3                     ;subtract 37 if UPPER case letter
00001724                          1070      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
00001724  4EF9 00001734           1071      JMP             ATOI_FORMAT                 ;testing
0000172A                          1072      ;JMP            ATOI_LOOP                   ;loop
0000172A                          1073  
0000172A                          1074  ATOI_LOWERCASE_LETTER
0000172A  0403 0057               1075      SUBI.B          #$57,D3                     ;subtract 57(20 + 37)
0000172E                          1076      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
0000172E  4EF9 00001734           1077      JMP             ATOI_FORMAT                 ;testing
00001734                          1078      ;JMP            ATOI_LOOP                  ;loop
00001734                          1079  
00001734                          1080  
00001734                          1081  ATOI_FORMAT
00001734  D803                    1082      ADD.B           D3,D4                       ;add the byte to D4 so can add later   
00001736  B43C 0000               1083      CMP.B           #0,D2                       
0000173A  6700 0008               1084      BEQ             ATOI_DONE                   ;check if done (loop counter D2 is at 0)
0000173E  E984                    1085      ASL.L           #4,D4                       ;logical shift left to make room
00001740  4EF8 16D8               1086      JMP             ATOI_LOOP                   ;go back to loop
00001744                          1087  
00001744                          1088  ATOI_ERROR
00001744                          1089      ;come back to handle error when out of range
00001744                          1090      
00001744                          1091  
00001744                          1092  ATOI_DONE 
00001744  2284                    1093      MOVE.L         D4,(A1)                      ;at this point, move the new address in D4 to mem location                                
00001746  4E75                    1094      RTS                                         ;used to RTS after a branch statement
00001748                          1095  
00001748                          1096  ;************************************* ITOA ***********************************************************************************************************
00001748                          1097  ;A0
00001748                          1098  ;A1
00001748                          1099  ;A2 = buffer (this is our decoded string that will print to screen)
00001748                          1100  ;A3
00001748                          1101  ;A4 = current memory address for buffer
00001748                          1102  ;A5 = starting address / current address in memory
00001748                          1103  ;A6 = ending address
00001748                          1104  ;A7 = SP
00001748                          1105  
00001748                          1106  ;D0 = counter
00001748                          1107  ;D1 = 
00001748                          1108  ;D2 = ?
00001748                          1109  ;D3 = buffer size (used for loop = 64)
00001748                          1110  ;D4 = value being converted
00001748                          1111  ;D5 =
00001748                          1112  ;D6 = 
00001748                          1113  ;D7 = 
00001748                          1114  ITOA:
00001748  280D                    1115      MOVE.L         A5,D4                    ;D4 has data to convert to ascii
0000174A                          1116  
0000174A                          1117  ITOA_LOOP:
0000174A  BA3C 0000               1118      CMP.B           #0,D5
0000174E  6700 004C               1119      BEQ             ITOA_FINISH             ;when 0, branch to finish to complete
00001752                          1120  
00001752                          1121  
00001752                          1122  
00001752                          1123  
00001752                          1124  ITOA_BYTE:
00001752                          1125  
00001752                          1126  
00001752                          1127  
00001752                          1128  ITOA_WORD:
00001752                          1129  
00001752                          1130  
00001752                          1131  
00001752                          1132  ITOA_LONG:
00001752                          1133  
00001752                          1134  
00001752                          1135  
00001752                          1136  ITOA_ADDRESS:
00001752  4284                    1137      CLR.L       D4                          ;D4 = 0000 0000
00001754  280D                    1138      MOVE.L      A5,D4                       ;our address is now in D4 and ready to deconstruct
00001756  103C 0008               1139      MOVE.B      #8,D0                       ;counter
0000175A  4EF9 00001760           1140      JMP         ITOA_ADDRESS_LOOP
00001760                          1141  ITOA_ADDRESS_LOOP:
00001760  B03C 0000               1142      CMP.B       #0,D0                       ;check if done
00001764  6700 0036               1143      BEQ         ITOA_FINISH                 ;if at 0, branch to ITOA_FINISH
00001768  E99C                    1144      ROL.L       #4,D4                       ;rotate left 4 bits, to get MSB to beginning 
0000176A  1204                    1145      MOVE.B      D4,D1                       ;store in D1 (this will be whole byte, we want half)
0000176C  0241 000F               1146      ANDI.W      #$000F,D1                   ;character is now isolated
00001770                          1147      
00001770  4EB9 0000177C           1148      JSR         ITOA_HEX2ASCII              ;JSR to convert
00001776  5340                    1149      SUBI        #1,D0                       ;subtract 1 from counter
00001778  4EF8 1760               1150      JMP         ITOA_ADDRESS_LOOP           ;loop again!
0000177C                          1151  
0000177C                          1152  ITOA_HEX2ASCII:
0000177C  B23C 000A               1153      CMP.B       #$A,D1                      ;compare byte in D1 to hex value A
00001780  6C00 0012               1154      BGE         ITOA_LETTER                 ;if greater than/equal A, it is letter
00001784  B23C 000A               1155      CMP.B       #$A,D1                      ;compare byte in D1 to hex value A
00001788  6D00 0002               1156      BLT         ITOA_NUMBER                 ;if less than, it is number
0000178C                          1157  
0000178C                          1158  ITOA_NUMBER:
0000178C  0601 0030               1159      ADDI.B      #$30,D1                     ;add $30 to D1 to convert
00001790  14C1                    1160      MOVE.B      D1,(A2)+                    ;add to buffer and increment to next position
00001792  4E75                    1161      RTS
00001794                          1162  
00001794                          1163  ITOA_LETTER:
00001794  0601 0037               1164      ADDI.B      #$37,D1                     ;add 37 to D1 to convert
00001798  14C1                    1165      MOVE.B      D1,(A2)+                    ;add to buffer and increment to next position
0000179A  4E75                    1166      RTS
0000179C                          1167  
0000179C                          1168  ITOA_FINISH:
0000179C  4E75                    1169      RTS
0000179E                          1170  
0000179E                          1171  
0000179E                          1172  ;************************************ Validate Addresses ******************************************
0000179E                          1173  
0000179E                          1174  VALIDATE_BEGINNING:
0000179E                          1175      
0000179E                          1176  
0000179E                          1177  
0000179E                          1178  
0000179E                          1179  ;******************************** Message Error Handling ***************************************************************************************************************** 
0000179E                          1180  STARTA_ERROR_LESS_THAN_ZERO:
0000179E  103C 000E               1181      MOVE.B  #14,D0
000017A2  43F9 00001BC4           1182      LEA     error_message_1,A1      ;load the get_end_address message into A1
000017A8  4E4F                    1183      TRAP    #15    
000017AA  4EF8 1012               1184      JMP     GET_STARTING_ADDRESS
000017AE                          1185  
000017AE                          1186  STARTA_ERROR_NOT_EVEN:
000017AE  103C 000E               1187      MOVE.B  #14,D0
000017B2  43F9 00001BEE           1188      LEA     error_message_2,A1      ;load error_message_2
000017B8  4E4F                    1189      TRAP    #15    
000017BA  4EF8 1012               1190      JMP     GET_STARTING_ADDRESS
000017BE                          1191  
000017BE                          1192  ENDA_ERROR_NOT_EVEN:
000017BE  103C 000E               1193      MOVE.B  #14,D0
000017C2  43F9 00001C0E           1194      LEA     error_message_3,A1      ;load error_message_3
000017C8  4E4F                    1195      TRAP    #15
000017CA  4EF8 104A               1196      JMP     GET_ENDING_ADDRESS
000017CE                          1197  
000017CE                          1198  ENDA_ERROR_LARGE:
000017CE  103C 000E               1199      MOVE.B  #14,D0
000017D2  43F9 00001C2E           1200      LEA     error_message_4,A1      ;load error_message_4
000017D8  4E4F                    1201      TRAP    #15
000017DA  4EF8 104A               1202      JMP     GET_ENDING_ADDRESS
000017DE                          1203      
000017DE                          1204  ENDA_ERROR_LESS_THAN_STARTA:
000017DE  103C 000E               1205      MOVE.B  #14,D0
000017E2  43F9 00001C5D           1206      LEA     error_message_5,A1      ;load error_message_5
000017E8  4E4F                    1207      TRAP    #15
000017EA  4EF8 104A               1208      JMP     GET_ENDING_ADDRESS
000017EE                          1209  
000017EE                          1210  ;****************************************** EA Stuff ********************************************************************************************************************* 
000017EE                          1211  
000017EE                          1212  EA_START:
000017EE  41F9 000017FC           1213      LEA         EA_TYPE_TABLE, A0
000017F4                          1214      
000017F4  C2FC 0006               1215      MULU        #6,D1               ;computes opcode table jump displacement
000017F8  4EF0 1000               1216      JMP         0(A0,D1)            ;jump to correct table input
000017FC                          1217  
000017FC                          1218  
000017FC                          1219  EA_TYPE_TABLE:
000017FC  4EF9 00001840           1220      JMP         EA_IMMEDIATE        ;DONE
00001802  4EF9 00001882           1221      JMP         EA_MOVE             ;DONE
00001808  4EF9 000018C8           1222      JMP         EA_MOVEA            ;DONE
0000180E  4EF9 0000190E           1223      JMP         EA_LEA              ;COME BACK TO AFTER TALKING WITH PROFESSOR ABOUT MODE 111
00001814  4EF9 0000194E           1224      JMP         EA_DESTONLY
0000181A  4EF9 0000194E           1225      JMP         EA_EXT
00001820  4EF9 0000194E           1226      JMP         EA_MOVEM
00001826  4EF9 00001974           1227      JMP         EA_TRAP
0000182C  4EF9 00001974           1228      JMP         EA_QUICK
00001832  4EF9 00001974           1229      JMP         EA_BRANCH
00001838  4EF9 0000183E           1230      JMP         EA_FINISH
0000183E                          1231  
0000183E                          1232  EA_FINISH:
0000183E  4E75                    1233      RTS ; TAKE OUT LATER
00001840                          1234      
00001840                          1235  
00001840                          1236  
00001840                          1237  ;********************************************  EA_TYPE  ****************************************************   
00001840                          1238  
00001840                          1239  EA_IMMEDIATE:                               ;value 0
00001840  14FC 0009               1240      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001844  14FC 0023               1241      MOVE.B  #'#',(A2)+                      ;add a # to buffer
00001848  14FC 0024               1242      MOVE.B  #'$',(A2)+                      ;add a $ to buffer
0000184C                          1243      
0000184C                          1244      ;check size which is bits 6,7 and store in D6
0000184C                          1245      ;get immediate value from memory based off size and store in D7
0000184C  4EB9 00001A54           1246      JSR     EA_CHECK_SIZE
00001852                          1247      
00001852                          1248      ;at this point our size is in D6 and data is in D7 and memory has been advanced
00001852                          1249      ;convert immediate data to ascii and put on buffer
00001852  4EB9 00001A7E           1250      JSR     EA_ITOA_IMMEDIATE
00001858                          1251      
00001858  41F9 00001978           1252      LEA     EA_MODE_TABLE,A0                ;load table
0000185E  14FC 002C               1253      MOVE.B  #',',(A2)+                      ;add a # to buffer
00001862  14FC 0009               1254      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001866                          1255      
00001866                          1256      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
00001866                          1257      
00001866                          1258      ;isolate source mode - bits 3,4,5 and store in D4
00001866  2800                    1259      MOVE.L  D0,D4
00001868  E64C                    1260      LSR.W   #3,D4
0000186A  0244 0007               1261      ANDI.W  #$7,D4
0000186E  C8FC 0006               1262      MULU    #6,D4
00001872                          1263      
00001872                          1264      ;isolate source register - bits 0,1,2 and store in D5
00001872  2A00                    1265      MOVE.L  D0,D5
00001874  0245 0007               1266      ANDI.W  #$7,D5
00001878                          1267  
00001878  4EB9 00001974           1268      JSR     EA_JMP_HELPER
0000187E  4EF8 183E               1269      JMP     EA_FINISH
00001882                          1270  
00001882                          1271  ;D4 = mode      --> source / destination
00001882                          1272  ;D5 = register  --> source / destination   
00001882                          1273  EA_MOVE:
00001882  14FC 0009               1274      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001886  41F9 00001978           1275      LEA     EA_MODE_TABLE,A0                ;load table
0000188C                          1276      
0000188C                          1277      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
0000188C                          1278      
0000188C                          1279      ;isolate source mode
0000188C  2800                    1280      MOVE.L  D0,D4
0000188E  E64C                    1281      LSR.W   #3,D4
00001890  0244 0007               1282      ANDI.W  #$7,D4
00001894  C8FC 0006               1283      MULU    #6,D4
00001898                          1284          
00001898                          1285      ;isolate source register
00001898  2A00                    1286      MOVE.L  D0,D5
0000189A  0245 0007               1287      ANDI.W  #$7,D5
0000189E                          1288      
0000189E  4EB9 00001974           1289      JSR    EA_JMP_HELPER
000018A4  14FC 002C               1290      MOVE.B  #',',(A2)+                  ;add ',' to buffer  
000018A8                          1291      
000018A8                          1292      ;isolate destination mode
000018A8  2800                    1293      MOVE.L  D0,D4
000018AA  EC4C                    1294      LSR.W   #6,D4
000018AC  0244 0007               1295      ANDI.W  #$7,D4
000018B0  C8FC 0006               1296      MULU    #6,D4
000018B4                          1297      
000018B4                          1298      ;isolate destination register 
000018B4  2A00                    1299      MOVE.L  D0,D5
000018B6  E84D                    1300      LSR.W   #4,D5
000018B8  EA4D                    1301      LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
000018BA  0245 0007               1302      ANDI.W  #$7,D5   
000018BE  4EB9 00001974           1303      JSR     EA_JMP_HELPER
000018C4                          1304  
000018C4  4EF8 183E               1305      JMP     EA_FINISH
000018C8                          1306      
000018C8                          1307  
000018C8                          1308  EA_MOVEA:
000018C8  14FC 0009               1309      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
000018CC  41F9 00001978           1310      LEA     EA_MODE_TABLE,A0                ;load table
000018D2                          1311  
000018D2                          1312      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
000018D2                          1313      
000018D2                          1314      ;isolate source mode
000018D2  2800                    1315      MOVE.L  D0,D4
000018D4  E64C                    1316      LSR.W   #3,D4
000018D6  0244 0007               1317      ANDI.W  #$7,D4
000018DA  C8FC 0006               1318      MULU    #6,D4
000018DE                          1319          
000018DE                          1320      ;isolate source register
000018DE  2A00                    1321      MOVE.L  D0,D5
000018E0  0245 0007               1322      ANDI.W  #$7,D5
000018E4                          1323      
000018E4  4EB9 00001974           1324      JSR    EA_JMP_HELPER
000018EA  14FC 002C               1325      MOVE.B  #',',(A2)+                  ;add ',' to buffer
000018EE                          1326      
000018EE                          1327      ;isolate destination mode --> SHOULD ALWAYS BE 001 AND GO TO ADDRESS REGISTER
000018EE  2800                    1328      MOVE.L  D0,D4
000018F0  EC4C                    1329      LSR.W   #6,D4
000018F2  0244 0007               1330      ANDI.W  #$7,D4
000018F6  C8FC 0006               1331      MULU    #6,D4
000018FA                          1332      
000018FA                          1333      ;isolate destination register 
000018FA  2A00                    1334      MOVE.L  D0,D5
000018FC  E84D                    1335      LSR.W   #4,D5
000018FE  EA4D                    1336      LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
00001900  0245 0007               1337      ANDI.W  #$7,D5   
00001904  4EB9 00001974           1338      JSR     EA_JMP_HELPER
0000190A                          1339  
0000190A  4EF8 183E               1340      JMP     EA_FINISH
0000190E                          1341  
0000190E                          1342  EA_LEA:
0000190E  14FC 0009               1343      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001912  41F9 00001978           1344      LEA     EA_MODE_TABLE,A0                ;load table
00001918                          1345      
00001918                          1346      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
00001918                          1347      
00001918                          1348      ;isolate source mode
00001918  2800                    1349      MOVE.L  D0,D4
0000191A  E64C                    1350      LSR.W   #3,D4
0000191C  0244 0007               1351      ANDI.W  #$7,D4
00001920  C8FC 0006               1352      MULU    #6,D4
00001924                          1353          
00001924                          1354      ;isolate source register
00001924  2A00                    1355      MOVE.L  D0,D5
00001926  0245 0007               1356      ANDI.W  #$7,D5
0000192A                          1357      
0000192A  4EB9 00001974           1358      JSR    EA_JMP_HELPER
00001930  14FC 002C               1359      MOVE.B  #',',(A2)+                  ;add ',' to buffer
00001934                          1360      
00001934                          1361      ;destination always An
00001934                          1362      ;MOVE.B  #'A',(A2)+                  ;add 'A' to buffer
00001934                          1363      
00001934                          1364      ;isolate destination register 
00001934                          1365      ;MOVE.L  D0,D5
00001934                          1366      ;LSR.W   #4,D5
00001934                          1367      ;LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
00001934                          1368      ;ANDI.W  #$7,D5
00001934                          1369  
00001934                          1370      ;isolate destination mode --> SHOULD ALWAYS BE 001 AND GO TO ADDRESS REGISTER
00001934  7801                    1371      MOVE.L  #1,D4
00001936  C8FC 0006               1372      MULU    #6,D4
0000193A                          1373      
0000193A                          1374      ;isolate destination register 
0000193A  2A00                    1375      MOVE.L  D0,D5
0000193C  E84D                    1376      LSR.W   #4,D5
0000193E  EA4D                    1377      LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
00001940  0245 0007               1378      ANDI.W  #$7,D5   
00001944  4EB9 00001974           1379      JSR     EA_JMP_HELPER
0000194A                          1380  
0000194A  4EF8 183E               1381      JMP     EA_FINISH
0000194E                          1382  
0000194E                          1383  EA_DESTONLY:        ;JMP, CLR
0000194E                          1384  
0000194E                          1385  
0000194E                          1386  
0000194E                          1387  
0000194E                          1388  
0000194E                          1389  EA_EXT:
0000194E                          1390  
0000194E                          1391  
0000194E                          1392  
0000194E                          1393  
0000194E                          1394  
0000194E                          1395  EA_MOVEM:
0000194E  14FC 0009               1396      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001952  41F9 00001978           1397      LEA     EA_MODE_TABLE,A0                ;load table
00001958                          1398      
00001958                          1399      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
00001958                          1400      
00001958                          1401      ;isolate source mode
00001958  2800                    1402      MOVE.L  D0,D4
0000195A  E64C                    1403      LSR.W   #3,D4
0000195C  0244 0007               1404      ANDI.W  #$7,D4
00001960  C8FC 0006               1405      MULU    #6,D4
00001964                          1406          
00001964                          1407      ;isolate source register
00001964  2A00                    1408      MOVE.L  D0,D5
00001966  0245 0007               1409      ANDI.W  #$7,D5
0000196A                          1410      
0000196A  4EB9 00001974           1411      JSR    EA_JMP_HELPER
00001970  14FC 002C               1412      MOVE.B  #',',(A2)+                  ;add ',' to buffer
00001974                          1413  
00001974                          1414      
00001974                          1415  
00001974                          1416  
00001974                          1417  
00001974                          1418  EA_TRAP:
00001974                          1419  
00001974                          1420  
00001974                          1421  
00001974                          1422  
00001974                          1423  
00001974                          1424  EA_QUICK:
00001974                          1425  
00001974                          1426  
00001974                          1427  
00001974                          1428  
00001974                          1429  EA_BRANCH:
00001974                          1430  
00001974                          1431  
00001974                          1432  
00001974                          1433  EA_JMP_HELPER
00001974  4EF0 4000               1434      JMP     0(A0,D4)
00001978                          1435  
00001978                          1436  
00001978                          1437  ;********************************************  EA_MODE_TABLE  ****************************************************  
00001978                          1438  EA_MODE_TABLE:
00001978  4EF9 000019A8           1439      JMP     EA_MODE_000
0000197E  4EF9 000019B6           1440      JMP     EA_MODE_001
00001984  4EF9 000019C4           1441      JMP     EA_MODE_010
0000198A  4EF9 000019DA           1442      JMP     EA_MODE_011
00001990  4EF9 000019F4           1443      JMP     EA_MODE_100
00001996  4EF9 00001A0C           1444      JMP     EA_MODE_101
0000199C  4EF9 00001A0C           1445      JMP     EA_MODE_110
000019A2  4EF9 00001A0C           1446      JMP     EA_MODE_111
000019A8                          1447      ;JMP     EA_MODE_FINISH
000019A8                          1448  
000019A8                          1449  ;********************************************  EA_MODE_XXX  ****************************************************    
000019A8                          1450  EA_MODE_000:                                        ;Data register 'Dn'
000019A8  14FC 0044               1451      MOVE.B  #'D',(A2)+                              ;put D on buffer
000019AC  1605                    1452      MOVE.B D5,D3                                    ;move to d3 for conversion
000019AE  4EB9 00001A4C           1453      JSR     EA_HEX_TO_ASCII                         ;puts register on buffer  
000019B4  4E75                    1454      RTS
000019B6                          1455      
000019B6                          1456  EA_MODE_001:                                        ;Address Register 'An'
000019B6  14FC 0041               1457      MOVE.B  #'A',(A2)+                              ;put A on buffer
000019BA  1605                    1458      MOVE.B  D5,D3                                   ;move to d3 for conversion
000019BC  4EB9 00001A4C           1459      JSR     EA_HEX_TO_ASCII                         ;puts register on buffer  
000019C2  4E75                    1460      RTS
000019C4                          1461  
000019C4                          1462  EA_MODE_010:                                        ;Address direct --> '(An)'
000019C4  14FC 0028               1463      MOVE.B  #'(',(A2)+                              ;put ( on buffer
000019C8  14FC 0041               1464      MOVE.B  #'A',(A2)+                              ;put A on buffer
000019CC  1605                    1465      MOVE.B  D5,D3                                   ;move to D3 for conversion
000019CE  4EB9 00001A4C           1466      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
000019D4  14FC 0029               1467      MOVE.B  #')',(A2)+                              ;put ) on buffer
000019D8  4E75                    1468      RTS
000019DA                          1469  
000019DA                          1470  EA_MODE_011:                                        ;Address with Postincrement --> '(An)+' 
000019DA  14FC 0028               1471      MOVE.B  #'(',(A2)+                              ;put ( on buffer
000019DE  14FC 0041               1472      MOVE.B  #'A',(A2)+                              ;put A on buffer
000019E2  1605                    1473      MOVE.B  D5,D3                                   ;move to D3 for conversion
000019E4  4EB9 00001A4C           1474      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
000019EA  14FC 0029               1475      MOVE.B  #')',(A2)+                              ;put ) on buffer
000019EE  14FC 002B               1476      MOVE.B  #'+',(A2)+                              ;put + on buffer
000019F2  4E75                    1477      RTS
000019F4                          1478  
000019F4                          1479  EA_MODE_100:                                        ;Address with Predecrement --> '-(An)'
000019F4  14FC 002D               1480      MOVE.B  #'-',(A2)+                              ;put - on buffer
000019F8  14FC 0028               1481      MOVE.B  #'(',(A2)+                              ;put ( on buffer
000019FC  14FC 0041               1482      MOVE.B  #'A',(A2)+                              ;put A on buffer
00001A00  1605                    1483      MOVE.B  D5,D3                                   ;move to D3 for conversion
00001A02  4EB9 00001A4C           1484      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
00001A08  14FC 0029               1485      MOVE.B  #')',(A2)+                              ;put ) on buffer
00001A0C                          1486  
00001A0C                          1487  
00001A0C                          1488  
00001A0C                          1489  ;unsupported
00001A0C                          1490  EA_MODE_101:                                        
00001A0C                          1491  ;Address with Displacement --> '(d16, An)
00001A0C                          1492      
00001A0C                          1493  ;unsupported
00001A0C                          1494  EA_MODE_110:
00001A0C                          1495  
00001A0C                          1496  
00001A0C                          1497  
00001A0C                          1498  ;some form of immediate data: short, long, immediate
00001A0C                          1499  EA_MODE_111:
00001A0C                          1500      ;D4 = MODE | D5 = register (000, 001, 100)
00001A0C                          1501      ;000 = Absolute Short (xxx).w
00001A0C                          1502      ;001 = Absolute Long (xxx).l
00001A0C                          1503      ;100 = Immediate data
00001A0C                          1504      
00001A0C  BA3C 0000               1505      CMP.B   #000,D5
00001A10  6700 0012               1506      BEQ     EA_111_ABSOLUTE_SHORT
00001A14  BA3C 0001               1507      CMP.B   #001,D5
00001A18  6700 001E               1508      BEQ     EA_111_ABSOLUTE_LONG
00001A1C  BA3C 0064               1509      CMP.B   #100,D5
00001A20  6700 002A               1510      BEQ     EA_111_IMMEDIATE
00001A24                          1511      
00001A24                          1512      ;HANDLE ERROR
00001A24                          1513              
00001A24                          1514      
00001A24                          1515  EA_111_ABSOLUTE_SHORT:
00001A24                          1516      ;A5 is looking at correct spot
00001A24                          1517      ;ADD WORD VALUE AT A5 ON TO BUFFER AT A2 AND INCREMENT BY WORD
00001A24  14FC 0024               1518      MOVE.B  #'$',(A2)+                              ;put $ on buffer
00001A28  3E15                    1519      MOVE.W  (A5),D7
00001A2A  4246                    1520      CLR     D6
00001A2C  1C3C 0001               1521      MOVE.B  #01,D6                                  ;word size in EA_ITOA_IMMEDIATE
00001A30  4EB9 00001A7E           1522      JSR     EA_ITOA_IMMEDIATE
00001A36  4E75                    1523      RTS
00001A38                          1524  
00001A38                          1525  EA_111_ABSOLUTE_LONG:
00001A38  14FC 0024               1526      MOVE.B  #'$',(A2)+                              ;put $ on buffer
00001A3C  3E15                    1527      MOVE.W  (A5),D7
00001A3E  4246                    1528      CLR     D6
00001A40  1C3C 0002               1529      MOVE.B  #02,D6                                  ;long size in EA_ITOA_IMMEDIATE        
00001A44  4EB9 00001A7E           1530      JSR     EA_ITOA_IMMEDIATE
00001A4A  4E75                    1531      RTS
00001A4C                          1532  
00001A4C                          1533  EA_111_IMMEDIATE:
00001A4C                          1534  
00001A4C                          1535  
00001A4C                          1536     
00001A4C                          1537      
00001A4C                          1538  
00001A4C                          1539  EA_HEX_TO_ASCII:
00001A4C  0603 0030               1540      ADDI.B      #$30,D3                     ;add $30 to D1 to convert
00001A50  14C3                    1541      MOVE.B      D3,(A2)+                    ;add to buffer and increment to next position
00001A52  4E75                    1542      RTS     
00001A54                          1543  
00001A54                          1544  
00001A54                          1545  EA_CHECK_SIZE:
00001A54  4246                    1546      CLR     D6
00001A56  2C00                    1547      MOVE.L  D0,D6                           ;complete opcode --> D6
00001A58  0246 00F0               1548      ANDI.W  #nibble3,D6                     ;isolating nibble 3
00001A5C  EC4E                    1549      LSR.W   #right6,D6                      ;shifting bits 7,6 --> 1,0
00001A5E                          1550      
00001A5E  BC7C 0000               1551      CMP     #00,D6
00001A62  6700 000E               1552      BEQ     EA_SIZE_BYTE
00001A66  BC7C 0001               1553      CMP     #01,D6
00001A6A  6700 000A               1554      BEQ     EA_SIZE_WORD
00001A6E  6000 000A               1555      BRA     EA_SIZE_LONG
00001A72                          1556  
00001A72                          1557  EA_SIZE_BYTE:
00001A72  3E1D                    1558      MOVE.W  (A5)+,D7
00001A74                          1559      ;MOVE.B  #4,D3;                          SET UP COUNTER
00001A74  4E75                    1560      RTS
00001A76                          1561  
00001A76                          1562  EA_SIZE_WORD:
00001A76  3E15                    1563      MOVE.W  (A5),D7
00001A78                          1564      ;MOVE.B  #4,D3;                          SET UP COUNTER
00001A78  4E75                    1565      RTS
00001A7A                          1566  
00001A7A                          1567  EA_SIZE_LONG:
00001A7A  3E15                    1568      MOVE.W  (A5),D7
00001A7C                          1569      ;MOVE.B  #8,D3;                          SET UP COUNTER
00001A7C  4E75                    1570      RTS
00001A7E                          1571  
00001A7E                          1572  
00001A7E                          1573  
00001A7E                          1574  EA_ITOA_IMMEDIATE:
00001A7E                          1575      ;D3 = counter, D7 = value to be converted, D6 = size
00001A7E  BC3C 0000               1576      CMP.B   #%00,D6
00001A82  6700 0012               1577      BEQ     EA_ITOA_BYTE
00001A86  BC3C 0001               1578      CMP.B   #%01,D6
00001A8A  6700 0016               1579      BEQ     EA_ITOA_WORD
00001A8E  BC3C 0002               1580      CMP.B   #%10,D6     
00001A92  6700 0024               1581      BEQ     EA_ITOA_LONG
00001A96                          1582      
00001A96                          1583  
00001A96                          1584  ;EA_IT0A_IMMEDIATE_LOOP
00001A96                          1585  ;    CMP.B   #0,D3                       ;check if loop done
00001A96                          1586  ;    BEQ     EA_ITOA_FINISH              ;if = 0, loop done
00001A96                          1587      
00001A96                          1588  EA_ITOA_BYTE:
00001A96  4EB9 00001AE0           1589      JSR     EA_ITOA_BYTE_CONVERT
00001A9C                          1590      
00001A9C  4EF9 00001B18           1591      JMP     EA_ITOA_DONE
00001AA2                          1592  
00001AA2                          1593  
00001AA2                          1594  EA_ITOA_WORD:
00001AA2  E04F                    1595      LSR.W   #right8,D7
00001AA4  4EB9 00001AE0           1596      JSR     EA_ITOA_BYTE_CONVERT
00001AAA  3E1D                    1597      MOVE.W  (A5)+,D7
00001AAC  4EB9 00001AE0           1598      JSR     EA_ITOA_BYTE_CONVERT
00001AB2                          1599      
00001AB2  4EF9 00001B18           1600      JMP     EA_ITOA_DONE
00001AB8                          1601      
00001AB8                          1602  EA_ITOA_LONG:
00001AB8  E04F                    1603      LSR.W   #right8,D7
00001ABA  4EB9 00001AE0           1604      JSR     EA_ITOA_BYTE_CONVERT
00001AC0  3E1D                    1605      MOVE.W  (A5)+,D7
00001AC2  4EB9 00001AE0           1606      JSR     EA_ITOA_BYTE_CONVERT
00001AC8                          1607  
00001AC8  3E15                    1608      MOVE.W  (A5),D7
00001ACA  E04F                    1609      LSR.W   #right8,D7
00001ACC  4EB9 00001AE0           1610      JSR     EA_ITOA_BYTE_CONVERT
00001AD2  3E1D                    1611      MOVE.W  (A5)+,D7
00001AD4  4EB9 00001AE0           1612      JSR     EA_ITOA_BYTE_CONVERT
00001ADA                          1613  
00001ADA  4EF9 00001B18           1614      JMP     EA_ITOA_DONE
00001AE0                          1615  
00001AE0                          1616  EA_ITOA_BYTE_CONVERT:
00001AE0  3607                    1617      MOVE.W  D7,D3
00001AE2  0243 00F0               1618      ANDI.W  #$F0,D3
00001AE6  E84B                    1619      LSR.W   #right4,D3
00001AE8  4EB9 00001AFC           1620      JSR     EA_ITOA_NIBBLE_CONVERT
00001AEE                          1621      
00001AEE  3607                    1622      MOVE.W  D7,D3
00001AF0  0243 000F               1623      ANDI.W  #$0F,D3
00001AF4  4EB9 00001AFC           1624      JSR     EA_ITOA_NIBBLE_CONVERT
00001AFA  4E75                    1625      RTS
00001AFC                          1626  
00001AFC                          1627  EA_ITOA_NIBBLE_CONVERT:
00001AFC  B63C 0009               1628      CMP.B   #9,D3
00001B00  6E00 000E               1629      BGT     EA_ITOA_LETTER
00001B04  6000 0002               1630      BRA     EA_ITOA_NUMBER
00001B08                          1631  
00001B08                          1632  EA_ITOA_HEX2ASCII:
00001B08                          1633  
00001B08                          1634  
00001B08                          1635  
00001B08                          1636  EA_ITOA_NUMBER:
00001B08  0603 0030               1637      ADDI.B  #$30,D3
00001B0C  14C3                    1638      MOVE.B  D3,(A2)+
00001B0E  4E75                    1639      RTS
00001B10                          1640  
00001B10                          1641  EA_ITOA_LETTER:
00001B10  0603 0037               1642      ADDI.B  #$37,D3
00001B14  14C3                    1643      MOVE.B  D3,(A2)+
00001B16  4E75                    1644      RTS
00001B18                          1645  
00001B18                          1646  EA_ITOA_DONE
00001B18  4E75                    1647      RTS
00001B1A                          1648  
00001B1A                          1649      
00001B1A                          1650  ;****************************************** MESSAGES ***************************************************
00001B1A= 57 65 6C 63 6F 6D ...   1651  welcome_message         DC.B    'Welcome to 68k disassembler',CR,LF,0
00001B38                          1652  
00001B38= 50 6C 65 61 73 65 ...   1653  get_start_address       DC.B    'Please enter a starting address in hexadecimal',CR,LF,0
00001B69                          1654  
00001B69= 50 6C 65 61 73 65 ...   1655  get_end_address         DC.B    'Please enter an ending address in hexadecimal',CR,LF,0
00001B99                          1656  
00001B99= 49 6E 76 61 6C 69 ...   1657  atoi_error_invalid      DC.B    'Invalid address, characters must be $0-F',CR,LF,0
00001BC4                          1658  
00001BC4                          1659  
00001BC4= 49 6E 76 61 6C 69 ...   1660  error_message_1         DC.B    'Invalid Address: Must be greater than 0',CR,LF,0
00001BEE                          1661  
00001BEE= 49 6E 76 61 6C 69 ...   1662  error_message_2         DC.B    'Invalid Address: Must be even',CR,LF,0
00001C0E                          1663  
00001C0E= 49 6E 76 61 6C 69 ...   1664  error_message_3         DC.B    'Invalid Address: Must be even',CR,LF,0
00001C2E                          1665  
00001C2E= 49 6E 76 61 6C 69 ...   1666  error_message_4         DC.B    'Invalid Address: Must be less than $00FFFFFF',CR,LF,0
00001C5D                          1667  
00001C5D= 49 6E 76 61 6C 69 ...   1668  error_message_5         DC.B    'Invalid Address: Must be greater than starting address',CR,LF,0
00001C96                          1669  
00001C96                          1670  
00001C96                          1671  ascii_start:
00001C96                          1672      DS.w    10          ;specify size later?
00001CAA                          1673      
00001CAA                          1674  ascii_end:
00001CAA                          1675      DS.w    10          ;specify size later?
00001CBE                          1676  
00001CBE                          1677  buffer                  ;storing op code
00001CBE                          1678      DS.W    64          ;do we leave as .w or change to .l ?
00001D3E                          1679      
00001D3E                          1680  
00001D3E                          1681      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_END           1CAA
ASCII_START         1C96
ATOI                16D2
ATOI_DONE           1744
ATOI_ERROR          1744
ATOI_ERROR_INVALID  1B99
ATOI_FORMAT         1734
ATOI_LOOP           16D8
ATOI_LOWERCASE_LETTER  172A
ATOI_NUMBER         1716
ATOI_UPPERCASE_LETTER  1720
BUFFER              1CBE
BUFFER_SIZE         40
CR                  D
DECODING_LOOP       1088
DEST_MODE           1C0
DONE                108E
EA_111_ABSOLUTE_LONG  1A38
EA_111_ABSOLUTE_SHORT  1A24
EA_111_IMMEDIATE    1A4C
EA_BRANCH           1974
EA_CHECK_SIZE       1A54
EA_DESTONLY         194E
EA_EXT              194E
EA_FINISH           183E
EA_HEX_TO_ASCII     1A4C
EA_IMMEDIATE        1840
EA_ITOA_BYTE        1A96
EA_ITOA_BYTE_CONVERT  1AE0
EA_ITOA_DONE        1B18
EA_ITOA_HEX2ASCII   1B08
EA_ITOA_IMMEDIATE   1A7E
EA_ITOA_LETTER      1B10
EA_ITOA_LONG        1AB8
EA_ITOA_NIBBLE_CONVERT  1AFC
EA_ITOA_NUMBER      1B08
EA_ITOA_WORD        1AA2
EA_JMP_HELPER       1974
EA_LEA              190E
EA_MODE_000         19A8
EA_MODE_001         19B6
EA_MODE_010         19C4
EA_MODE_011         19DA
EA_MODE_100         19F4
EA_MODE_101         1A0C
EA_MODE_110         1A0C
EA_MODE_111         1A0C
EA_MODE_TABLE       1978
EA_MOVE             1882
EA_MOVEA            18C8
EA_MOVEM            194E
EA_QUICK            1974
EA_SIZE_BYTE        1A72
EA_SIZE_LONG        1A7A
EA_SIZE_WORD        1A76
EA_START            17EE
EA_TRAP             1974
EA_TYPE_BRANCH      9
EA_TYPE_DESTONLY    4
EA_TYPE_EXT         5
EA_TYPE_IMMEDIATE   0
EA_TYPE_LEA         3
EA_TYPE_MOVE        1
EA_TYPE_MOVEA       2
EA_TYPE_MOVEA6      C
EA_TYPE_MOVEM       6
EA_TYPE_QUICK       8
EA_TYPE_TABLE       17FC
EA_TYPE_TRAP        7
ENDA_ERROR_LARGE    17CE
ENDA_ERROR_LESS_THAN_STARTA  17DE
ENDA_ERROR_NOT_EVEN  17BE
ERROR_MESSAGE_1     1BC4
ERROR_MESSAGE_2     1BEE
ERROR_MESSAGE_3     1C0E
ERROR_MESSAGE_4     1C2E
ERROR_MESSAGE_5     1C5D
GET_ENDING_ADDRESS  104A
GET_END_ADDRESS     1B69
GET_STARTING_ADDRESS  1012
GET_START_ADDRESS   1B38
ITOA                1748
ITOA_ADDRESS        1752
ITOA_ADDRESS_LOOP   1760
ITOA_BYTE           1752
ITOA_FINISH         179C
ITOA_HEX2ASCII      177C
ITOA_LETTER         1794
ITOA_LONG           1752
ITOA_LOOP           174A
ITOA_NUMBER         178C
ITOA_WORD           1752
LF                  A
LINES_PER_SCREEN    1E
NIBBLE2             F00
NIBBLE3             F0
NIBBLE4             F
OPCODE0000          1140
OPCODE0001          115A
OPCODE0010          1160
OPCODE0011          117A
OPCODE0100          1194
OPCODE0101          11AE
OPCODE0110          11B4
OPCODE0111          11CE
OPCODE1000          11D4
OPCODE1001          11DA
OPCODE1010          11E0
OPCODE1011          11E6
OPCODE1100          11EC
OPCODE1101          11F2
OPCODE1110          120E
OPCODE1111          122E
OP_0000_TABLE       1234
OP_0100_TABLE       1294
OP_0110_TABLE       12F4
OP_ADD              1600
OP_ADDA             161C
OP_ADDI             13B6
OP_ADDQ             1526
OP_AND              1600
OP_ANDI             1372
OP_ASL              163C
OP_ASR              1658
OP_BEQ              1574
OP_BRA              1548
OP_BSR              155E
OP_CHECK_SIZE       1674
OP_CHECK_SIZE_ADDA  16B6
OP_CLR              1526
OP_CMP              15CA
OP_CMPI             13FA
OP_DATA_CLR         10CA
OP_DATA_CLR_LOOP    10D6
OP_DIVS             15AE
OP_DIVU             1594
OP_EOR              15E6
OP_EORI             13D8
OP_EXT              1526
OP_FINISH           10C4
OP_JMP              1526
OP_JSR              1526
OP_LEA              150E
OP_LSL              1674
OP_LSR              1674
OP_MOVEAL           1440
OP_MOVEAW           148C
OP_MOVEB            141C
OP_MOVEL            1468
OP_MOVEM            14E8
OP_MOVEQ            1574
OP_MOVEW            14B4
OP_MULS             1600
OP_MULU             15E6
OP_NOP              14D8
OP_NOT              1526
OP_OR               15AE
OP_ORI              1354
OP_ROL              1674
OP_ROR              1674
OP_RTE              1526
OP_RTS              1526
OP_SIZE_BYTE        1698
OP_SIZE_LONG        16AC
OP_SIZE_WORD        16A2
OP_START            1092
OP_STOP             1526
OP_SUB              15AE
OP_SUBI             1394
OP_SUBQ             1548
OP_TABLE            10E0
OP_TRAP             1526
OP_UNSUPPORTED_OPCODE  1674
RIGHT1              1
RIGHT10             A
RIGHT12             C
RIGHT16             10
RIGHT2              2
RIGHT24             18
RIGHT3              3
RIGHT4              4
RIGHT5              5
RIGHT6              6
RIGHT7              7
RIGHT8              8
RIGHT9              9
STACK               A0000
START               1000
STARTA_ERROR_LESS_THAN_ZERO  179E
STARTA_ERROR_NOT_EVEN  17AE
START_DECODING      1088
VALIDATE_BEGINNING  179E
WELCOME             1006
WELCOME_MESSAGE     1B1A
