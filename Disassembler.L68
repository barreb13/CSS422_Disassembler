00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2021 11:57:59 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler Final
00000000                             3  * Written by : Brent and Parker
00000000                             4  * Date       : 3/17/21
00000000                             5  * Description: Final Project for CSS 422
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;************************ Define Constants ********************************* 
00000000  =0000000D                  9  CR                  EQU     $0D     ;carriage return
00000000  =0000000A                 10  LF                  EQU     $0a     ;line feed
00000000  =000A0000                 11  stack               EQU     $000A0000
00000000  =0000000F                 12  lines_per_screen    EQU     15
00000000  =00000040                 13  buffer_size         EQU     64      ;size of buffer
00000000  =0000F000                 14  nibble1             EQU     $F000   ;1st nibble in code (bits 15-12)
00000000  =00000F00                 15  nibble2             EQU     $0F00   ;2nd nibble in code (bits 11-8)
00000000  =000000F0                 16  nibble3             EQU     $00F0   ;3rd nibble in code (bits 7-4)
00000000  =0000000F                 17  nibble4             EQU     $000F   ;4th nibble in code (bits 3-0)
00000000  =00000001                 18  right1              EQU     1       ;shift 1 time
00000000  =00000002                 19  right2              EQU     2       ;shift 2 times
00000000  =00000003                 20  right3              EQU     3       ;shift 3 times to extract src mode
00000000  =00000004                 21  right4              EQU     4       ;shift 4 times to extract 3rd nibble
00000000  =00000005                 22  right5              EQU     5       ;shift 5 times (unused)
00000000  =00000006                 23  right6              EQU     6       ;shift 6 times to extract dst mode
00000000  =00000007                 24  right7              EQU     7       ;shift 7 times
00000000  =00000008                 25  right8              EQU     8       ;shift 8 to extract 2nd nibble
00000000  =00000009                 26  right9              EQU     9       ;shift 9 times to check 2nd nibble?
00000000  =0000000A                 27  right10             EQU     10      ;shift 10
00000000  =0000000C                 28  right12             EQU     12      ;shift 12 to extract 3rd byte
00000000  =00000010                 29  right16             EQU     16      ;shift 16 to extract 2nd byte
00000000  =00000018                 30  right24             EQU     24      ;shift 24 to extract 1st byte
00000000  =000001C0                 31  dest_mode           EQU     $01C0   ; --> 0000 0001 1100 0000 (used for destination in MOVE/MOVEA
00000000  =00000E00                 32  dest_reg            EQU     $0E00   ;destination register (0000 0111 0000 0000)
00000000                            33  
00000000  =00000000                 34  ea_type_immediate   EQU     0
00000000  =00000001                 35  ea_type_move        EQU     1
00000000  =00000002                 36  ea_type_movea       EQU     2
00000000  =0000000C                 37  ea_type_movea6      EQU     12
00000000  =00000003                 38  ea_type_lea         EQU     3
00000000  =00000004                 39  ea_type_destonly    EQU     4
00000000  =00000005                 40  ea_type_ext         EQU     5
00000000  =00000006                 41  ea_type_movem       EQU     6
00000000  =00000007                 42  ea_type_trap        EQU     7
00000000  =00000008                 43  ea_type_quick       EQU     8
00000000  =00000009                 44  ea_type_branch      EQU     9
00000000  =0000000A                 45  ea_type_math        EQU     10
00000000  =0000000B                 46  ea_type_rotation    EQU     11
00000000                            47  
00001000                            48      ORG    $1000
00001000                            49  START:                              ;first instruction of program
00001000  4FF9 000A0000             50      LEA     stack, SP               ;SP @ $A0000
00001006                            51  
00001006                            52  ;********************************** Welcome Message ******************************************** 
00001006                            53  WELCOME:
00001006  43F9 000022D2             54      LEA     welcome_message,A1      ;load the welcome message into A1
0000100C  103C 000E                 55      MOVE.B  #14,D0
00001010  4E4F                      56      TRAP    #15                     ;print contents of welcome_message
00001012                            57  
00001012                            58  
00001012                            59  ;*********************************** Get Starting Address *************************************** 
00001012                            60  GET_STARTING_ADDRESS:
00001012                            61      ;prompt for address
00001012  103C 000E                 62      MOVE.B  #14,D0    
00001016  43F9 000022F0             63      LEA     get_start_address,A1    ;load the get_start_address message into A1
0000101C  4E4F                      64      TRAP    #15                     ;print get_start_address
0000101E                            65      
0000101E                            66      ;get user input address, store, and convert
0000101E  43F9 000025D2             67      LEA     ascii_start,A1          ;store
00001024  103C 0002                 68      MOVE.B  #2,D0                   ;get user input    
00001028  4E4F                      69      TRAP    #15                     ;another trap to get input
0000102A  4EB9 000018C2             70      JSR     ATOI                    ;address is now in hex format in memory location
00001030                            71      
00001030                            72      ;at this point our address is in D4 in hex
00001030                            73      ;check if > 0
00001030  B8BC 00000000             74      CMP.L   #0,D4                       ;compare to D4
00001036  6F00 0966                 75      BLE     STARTA_ERROR_LESS_THAN_ZERO ;branch to ERROR_LESS_THAN_ZERO if less than 0
0000103A                            76      
0000103A                            77      ;address is > 0 so check if even / odd
0000103A  E29C                      78      ROR.L   #1,D4
0000103C  6500 0970                 79      BCS     STARTA_ERROR_NOT_EVEN
00001040  E39C                      80      ROL.L   #1,D4    
00001042                            81      
00001042                            82      ;address is > 0 and verified even
00001042  2A39 000025D2             83      MOVE.l    (ascii_start),D5      ;load into A5
00001048  2A45                      84      MOVE.l    D5,A5                ;load into A5
0000104A                            85  
0000104A                            86  
0000104A                            87  ;******************************** Get Ending Address ******************************************** 
0000104A                            88  GET_ENDING_ADDRESS:
0000104A                            89      ;prompt for address 
0000104A  103C 000E                 90      MOVE.B  #14,D0
0000104E  43F9 00002321             91      LEA     get_end_address,A1      ;load the get_end_address message into A1  
00001054  4E4F                      92      TRAP    #15                     ;print get_end_address
00001056                            93      
00001056                            94      ;get user input address, store, and convert
00001056  43F9 000025E6             95      LEA     ascii_end,A1            ;store 
0000105C  103C 0002                 96      MOVE.B  #2,D0                   ;get user input
00001060  4E4F                      97      TRAP    #15                     ;another trap to get intput
00001062  4EB9 000018C2             98      JSR ATOI
00001068                            99  
00001068                           100      ;perform checks:
00001068                           101      ;1.) even
00001068  E29C                     102      ROR.L   #1,D4
0000106A  6500 0952                103      BCS     ENDA_ERROR_NOT_EVEN
0000106E  E39C                     104      ROL.L   #1,D4    
00001070                           105      
00001070                           106      ;2.) less than 00FFFFFF
00001070  B8BC 00FFFFFF            107      CMP.L   #$00FFFFFF,D4
00001076  6C00 0956                108      BGE     ENDA_ERROR_LARGE    
0000107A                           109      
0000107A                           110      ;3.) greater than starting address
0000107A  BBC4                     111      CMP.L   D4,A5
0000107C  6C00 0960                112      BGE     ENDA_ERROR_LESS_THAN_STARTA
00001080                           113      
00001080                           114      ;good --> store in A6
00001080  2C39 000025E6            115      MOVE.l    (ascii_end),D6      ;load into D6
00001086  2C46                     116      MOVE.l    D6,A6               ;load into A6
00001088                           117  
00001088                           118  
00001088                           119  ;************************************ Main Loop???? ***********************************************
00001088                           120  ;get pointer to first given address
00001088                           121  ;pull hex code from that address and store in A1?
00001088                           122  ;take hex code and go to OP_TABLE
00001088                           123  
00001088                           124  
00001088                           125  ;A5 = starting address
00001088                           126  ;A6 = ending address
00001088                           127  START_DECODING:
00001088  4282                     128      CLR.L   D2                             ;clear screen line counter
0000108A                           129  
0000108A                           130  DECODING_LOOP:
0000108A  4EB9 00001112            131      JSR     OP_START                       ;get complete line of instruction to decode   
00001090                           132  
00001090                           133      ;RETURN FROM OP FINISH HERE
00001090                           134      
00001090                           135      ;print buffer to screen
00001090  103C 000D                136      MOVE.B  #$0D, D0
00001094  43F9 000025FA            137      LEA     buffer,A1
0000109A  4E4F                     138      TRAP    #15
0000109C                           139      
0000109C                           140      ;check if we have hit ending address (current memory past ending address)
0000109C  BDCD                     141      CMP.L   A5,A6                       ;THE SOURCE OPERAND IS SUBTRACTED FROM THE DESTINATION OPERAND (A6-A5)--> (600 - 400)
0000109E  6F00 0016                142      BLE     REPEAT_OR_FINISH
000010A2                           143      
000010A2                           144      ;CHECK FOR FFFF
000010A2  0C55 FFFF                145      CMP.W   #$FFFF,(A5)
000010A6  6700 000E                146      BEQ     REPEAT_OR_FINISH
000010AA                           147      
000010AA  5202                     148      ADDI.B  #1,D2
000010AC  B43C 000F                149      CMP.B   #lines_per_screen,D2
000010B0  6C00 0046                150      BGE     FILLED_SCREEN
000010B4  60D4                     151      BRA     DECODING_LOOP
000010B6                           152      
000010B6                           153  REPEAT_OR_FINISH:    
000010B6  103C 000E                154      MOVE.B  #14,D0
000010BA  43F9 00002466            155      LEA     prompt_again,A1
000010C0  4E4F                     156      TRAP    #15
000010C2                           157      
000010C2                           158      ;get user input
000010C2  103C 0002                159      MOVE.B  #2,D0
000010C6  43F9 0000267A            160      LEA     ascii_y_or_n,A1
000010CC  4E4F                     161      TRAP    #15
000010CE                           162      
000010CE                           163      ;check user input and handle accordingly
000010CE  4243                     164      CLR     D3
000010D0  1639 0000267A            165      MOVE.B  ascii_y_or_n,D3
000010D6  0C03 0079                166      CMPI.B  #'y',D3
000010DA  6700 FF36                167      BEQ     GET_STARTING_ADDRESS
000010DE  0C03 0059                168      CMPI.B  #'Y',D3
000010E2  6700 FF2E                169      BEQ     GET_STARTING_ADDRESS
000010E6  0C03 006E                170      CMPI.B  #'n',D3
000010EA  6700 0022                171      BEQ     DONE
000010EE  0C03 004E                172      CMPI.B  #'N',D3
000010F2  6700 001A                173      BEQ     DONE
000010F6                           174      
000010F6                           175      ;nothing was entered, try again
000010F6  60BE                     176      BRA     REPEAT_OR_FINISH    
000010F8                           177  
000010F8                           178  FILLED_SCREEN:
000010F8  103C 000E                179      MOVE.B  #14,D0
000010FC  43F9 0000244E            180      LEA     prompt_enter,A1
00001102  4E4F                     181      TRAP    #15
00001104  103C 0005                182      MOVE.B  #$05,D0
00001108  4E4F                     183      TRAP    #15
0000110A  6000 FF7C                184      BRA     START_DECODING  
0000110E                           185         
0000110E                           186  DONE:
0000110E  FFFF FFFF                187      SIMHALT                                 ; halt simulator
00001112                           188  
00001112                           189  
00001112                           190  
00001112                           191  ;**************************************************************** OP Stuff *********************************************************************************************** 
00001112                           192  
00001112                           193  ;A0 = POINTER TO OP_TABLE???
00001112                           194  ;A1 = 
00001112                           195  ;A2 = buffer (this is our decoded string that will print to screen)
00001112                           196  ;A3 = 
00001112                           197  ;A4 = current memory address for buffer (used for clearing????)
00001112                           198  ;A5 = starting address / current address in memory
00001112                           199  ;A6 = ending address
00001112                           200  ;A7 = SP
00001112                           201  
00001112                           202  ;D0
00001112                           203  ;D1
00001112                           204  ;D2 = ?
00001112                           205  ;D3 = buffer size (used for loop = 64)
00001112                           206  ;D4 = 
00001112                           207  ;D5
00001112                           208  ;D6
00001112                           209  ;D7
00001112                           210  
00001112                           211  OP_START
00001112  48E7 2000                212      MOVEM.L         D2, -(SP)
00001116                           213  
00001116  4EB9 0000114E            214      JSR         OP_DATA_CLR         ;clear buffer
0000111C  45F9 000025FA            215      LEA         buffer, A2          ;A2 now points to buffer, which is cleared   
00001122                           216  
00001122                           217      ;print out current mem address by putting into buffer and then adding a ' ' (tab)
00001122  7403                     218      MOVE.L      #$0003,D2           ;? BINARY --> 0011 ?
00001124  4EB9 00001952            219      JSR         ITOA_ADDRESS        ;convert A5 (current address) to ASCII and put in buffer
0000112A  14FC 0009                220      MOVE.B      #$09, (A2)+         ;adds a ' ' to buffer
0000112E                           221      
0000112E                           222      ;at this point buffer has the memory address and a space, ready for op code
0000112E                           223      
0000112E  41F9 00001164            224      LEA         OP_TABLE, A0
00001134  4280                     225      CLR.L       D0
00001136  301D                     226      MOVE.W      (A5)+,D0            ;moves opcode from current address into D0
00001138  2200                     227      MOVE.L      D0,D1               ;should move into D1
0000113A  143C 000C                228      MOVE.B      #right12,D2         ;move immediate value 12 into D2
0000113E  E469                     229      LSR.W       D2,D1               ;shift D1 by 12 bits, leaving just 4 bits (this is our opcode???)
00001140  C2FC 0006                230      MULU        #6,D1               ;computes opcode table jump displacement
00001144  4EF0 1000                231      JMP         0(A0,D1)            ;jumps to opcode table entry (A0 = OP_TABLE)
00001148                           232  
00001148                           233  OP_FINISH:
00001148  4CDF 0004                234      MOVEM.L     (SP)+,D2
0000114C  4E75                     235      RTS 
0000114E                           236  
0000114E                           237  
0000114E                           238  OP_DATA_CLR:
0000114E  4283                     239      CLR.L       D3               
00001150  163C 0040                240      MOVE.B      #64,D3
00001154  49F9 000025FA            241      LEA         buffer, A4
0000115A                           242  
0000115A                           243  OP_DATA_CLR_LOOP:
0000115A  18FC 0000                244      MOVE.B      #0, (A4)+
0000115E  5343                     245      SUBI        #1, D3
00001160  6EF8                     246      BGT         OP_DATA_CLR_LOOP
00001162  4E75                     247      RTS                                 ;need RTS to return
00001164                           248  
00001164                           249  
00001164                           250  ;********************************* jump table ****************************************
00001164                           251  OP_TABLE:
00001164  4EF9 000011C4            252      JMP         opcode0000              ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)                                 $0
0000116A  4EF9 000011DE            253      JMP         opcode0001              ;MOVE.B                                                             $1    
00001170  4EF9 000011E4            254      JMP         opcode0010              ;MOVEA.L, MOVE.L                                                    $2
00001176  4EF9 000011FE            255      JMP         opcode0011              ;MOVEA.W MOVE.W                                                     $3
0000117C  4EF9 00001218            256      JMP         opcode0100              ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP     $4
00001182  4EF9 00001232            257      JMP         opcode0101              ;ADDQ (SUBQ)                                                        $5
00001188  4EF9 00001254            258      JMP         opcode0110              ;BRA.bw, BSR.bw (BEQ)                                               $6
0000118E  4EF9 0000126E            259      JMP         opcode0111              ;MOVEQ.l                                                            $7
00001194  4EF9 00001274            260      JMP         opcode1000              ;DIVU (DIVS, OR)                                                    $8
0000119A  4EF9 00001296            261      JMP         opcode1001              ;SUB                                                                $9
000011A0  4EF9 0000129C            262      JMP         opcode1010              ;not assigned                                                       $A
000011A6  4EF9 000012A2            263      JMP         opcode1011              ;CMP (EOR)                                                          $B
000011AC  4EF9 000012A8            264      JMP         opcode1100              ;MULU (MULS, AND)                                                   $C
000011B2  4EF9 000012CA            265      JMP         opcode1101              ;ADD, ADDA                                                          $D
000011B8  4EF9 000012E6            266      JMP         opcode1110              ;ASL, ASR (LSL, LSR, ROL, ROR)                                      $E
000011BE  4EF9 00001306            267      JMP         opcode1111              ;not assigned                                                       $F
000011C4                           268  
000011C4                           269  
000011C4                           270  
000011C4                           271  
000011C4                           272  ;A0 = POINTER TO OP_TABLE
000011C4                           273  ;A1 = 
000011C4                           274  ;A2 = buffer (this is our decoded string that will print to screen)
000011C4                           275  ;A3 = pointer to op_xxx_table
000011C4                           276  ;A4 = current memory address for buffer (used for clearing????)
000011C4                           277  ;A5 = starting address / current address in memory
000011C4                           278  ;A6 = ending address
000011C4                           279  ;A7 = SP
000011C4                           280  
000011C4                           281  ;D0 = full instruction
000011C4                           282  ;D1 = full instruction for manipulating (temporary)
000011C4                           283  ;D2 = will store immediate value for comparing
000011C4                           284  ;D3 = buffer size (used for loop = 64)
000011C4                           285  ;D4 = 
000011C4                           286  ;D5 = 
000011C4                           287  ;D6 = 
000011C4                           288  ;D7 = 
000011C4                           289  
000011C4                           290  
000011C4                           291  
000011C4                           292  ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)                                 $0
000011C4                           293  opcode0000:                                 
000011C4  2200                     294      MOVE.L      D0,D1                   ;D1 has full instruction
000011C6  0241 0F00                295      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
000011CA  143C 0008                296      MOVE.B      #right8, D2             ;store immediate value 8 in D2
000011CE  E469                     297      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
000011D0  C2FC 0006                298      MULU        #6, D1                  ;multiply by 6 to get displacement
000011D4  47F9 0000130C            299      LEA         OP_0000_TABLE, A3       ;load op_0000_table into address register
000011DA  4EF3 1000                300      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
000011DE                           301  
000011DE                           302  ;MOVE.B                                                             $1
000011DE                           303  opcode0001:
000011DE  4EF9 000014F4            304      JMP         OP_MOVEB                ;no need to break down, only MOVE.B
000011E4                           305  
000011E4                           306  
000011E4                           307  ;MOVEA.L, MOVE.L                                                    $2
000011E4                           308  opcode0010:
000011E4  2200                     309      MOVE.L      D0,D1                   ;D1 has full instruction
000011E6  0241 01C0                310      ANDI        #dest_mode, D1          ;0000 0001 1100 0000
000011EA  143C 0006                311      MOVE.B      #right6, D2             ;D2 now 00000111
000011EE  E469                     312      LSR.W       D2, D1                  ;shifting destination mode in D1 to far right by 3
000011F0  B23C 0001                313      CMP.B       #1,D1                   ;does d1 = 001?
000011F4  6700 0322                314      BEQ         OP_MOVEAL               ;if d1 = 001, go to MOVEA
000011F8  4EF9 00001540            315      JMP         OP_MOVEL                ;else jump to MOVEL
000011FE                           316  
000011FE                           317  ;MOVEA.W MOVE.W                                                     $3
000011FE                           318  opcode0011:
000011FE  2200                     319      MOVE.L      D0,D1                   ;D1 has full instruction
00001200  0241 01C0                320      ANDI        #dest_mode, D1          ;0000 0001 1100 0000
00001204  143C 0006                321      MOVE.B      #right6, D2             ;D2 now 00000111
00001208  E469                     322      LSR.W       D2, D1                  ;shifting destination mode in D1 to far right by 3
0000120A  B23C 0001                323      CMP.B       #1,D1                   ;does d1 = 001?
0000120E  6700 0354                324      BEQ         OP_MOVEAW               ;if d1 = 001, go to MOVEAW
00001212  4EF9 0000158C            325      JMP         OP_MOVEW                ;else jump to MOVEW
00001218                           326  
00001218                           327  ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP)     $4
00001218                           328  opcode0100:
00001218  2200                     329      MOVE.L      D0,D1                   ;D1 has full instruction
0000121A  0241 0F00                330      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
0000121E  143C 0008                331      MOVE.B      #right8, D2             ;store immediate value 8 in D2
00001222  E469                     332      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
00001224  C2FC 0006                333      MULU        #6, D1                  ;multiply by 6 to get displacement
00001228  47F9 0000136C            334      LEA         OP_0100_TABLE, A3       ;load op_0000_table into address register
0000122E  4EF3 1000                335      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
00001232                           336  
00001232                           337  ;ADDQ (SUBQ)                                                        $5
00001232                           338  opcode0101:
00001232  2200                     339      MOVE.L      D0,D1
00001234  0241 0F00                340      ANDI.W      #nibble2,D1
00001238  E049                     341      LSR.W       #right8,D1
0000123A  0241 0001                342      ANDI.W      #1,D1
0000123E  B23C 0000                343      CMP.B       #0,D1
00001242  6700 03F0                344      BEQ         OP_ADDQ
00001246  B23C 0001                345      CMP.B       #1,D1   
0000124A  6700 040A                346      BEQ         OP_SUBQ
0000124E                           347      
0000124E  4EF9 00001820            348      JMP         OP_UNSUPPORTED_OPCODE
00001254                           349  
00001254                           350  ;BRA.bw, BSR.bw (BEQ)                                               $6
00001254                           351  opcode0110:
00001254  2200                     352      MOVE.L      D0,D1                   ;D1 has full instruction
00001256  0241 0F00                353      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
0000125A  143C 0008                354      MOVE.B      #right8, D2             ;store immediate value 8 in D2
0000125E  E469                     355      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
00001260  C2FC 0006                356      MULU        #6, D1                  ;multiply by 6 to get displacement
00001264  47F9 000013CC            357      LEA         OP_0110_TABLE, A3       ;load op_0110_table into address register
0000126A  4EF3 1000                358      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
0000126E                           359  
0000126E                           360  ;MOVEQ                                                            $7
0000126E                           361  opcode0111:
0000126E  4EF9 000016AE            362      JMP         OP_MOVEQ
00001274                           363  
00001274                           364  ;DIVU (DIVS, OR)                                                    $8
00001274                           365  opcode1000:
00001274  2200                     366      MOVE.L      D0,D1
00001276  0241 0F00                367      ANDI.W      #nibble2,D1
0000127A  E049                     368      LSR.W       #8,D1
0000127C  0201 0001                369      ANDI.B      #1,D1
00001280  B23C 0000                370      CMP.B       #0,D1
00001284  6700 0448                371      BEQ         OP_DIVU
00001288  B23C 0001                372      CMP.B       #1,D1
0000128C  6700 045C                373      BEQ         OP_DIVS
00001290                           374  
00001290  4EF9 00001820            375      JMP         OP_UNSUPPORTED_OPCODE
00001296                           376  
00001296                           377  ;SUB                                                                $9
00001296                           378  opcode1001:
00001296  4EF9 0000170C            379      JMP         OP_SUB
0000129C                           380  
0000129C                           381  
0000129C                           382  ;not assigned                                                       $A
0000129C                           383  opcode1010:
0000129C  4EF9 00001820            384      JMP         OP_UNSUPPORTED_OPCODE
000012A2                           385  
000012A2                           386  
000012A2                           387  ;CMP (EOR)                                                          $B
000012A2                           388  opcode1011:
000012A2  4EF9 0000172A            389      JMP         OP_CMP
000012A8                           390  
000012A8                           391  
000012A8                           392  ;MULU (MULS, AND)                                                   $C
000012A8                           393  opcode1100:
000012A8  2200                     394      MOVE.L      D0,D1
000012AA  0241 0F00                395      ANDI.W      #nibble2,D1
000012AE  E049                     396      LSR.W       #8,D1
000012B0  0201 0001                397      ANDI.B      #1,D1
000012B4  B23C 0000                398      CMP.B       #0,D1
000012B8  6700 0494                399      BEQ         OP_MULU
000012BC  B23C 0001                400      CMP.B       #1,D1
000012C0  6700 04A8                401      BEQ         OP_MULS
000012C4  4EF9 00001820            402      JMP         OP_UNSUPPORTED_OPCODE
000012CA                           403  
000012CA                           404  ;ADD, ADDA                                                          $D
000012CA                           405  opcode1101:
000012CA                           406      ;ADD and ADDA differ on bits 6,7... ADD will never be 11 for bits 6,7... use as check
000012CA  4241                     407      CLR         D1
000012CC  4242                     408      CLR         D2
000012CE  2200                     409      MOVE.L      D0,D1
000012D0  0241 00F0                410      ANDI.W      #nibble3, D1
000012D4  143C 0006                411      MOVE.B      #right6, D2
000012D8  E469                     412      LSR.W       D2,D1
000012DA                           413      
000012DA                           414      ;at this point we have our bits of interest in bits 1,0
000012DA                           415      
000012DA  B27C 0003                416      CMP         #3,D1                               ;check if bits == 11
000012DE  6700 04CA                417      BEQ         OP_ADDA                             ;if yes, branch ADDA
000012E2  6000 04A8                418      BRA         OP_ADD                              ;else branch ADD
000012E6                           419  
000012E6                           420  ;ASL, ASR (LSL, LSR, ROL, ROR)                                      $E
000012E6                           421  opcode1110:
000012E6  4241                     422      CLR D1
000012E8  4242                     423      CLR D2
000012EA  2200                     424      MOVE.L      D0, D1
000012EC  0241 0F00                425      ANDI.W      #nibble2, D1
000012F0  143C 0008                426      MOVE.B      #right8, D2
000012F4  E469                     427      LSR.W       D2, D1                              ;D1 has 0003 or 0004
000012F6  0241 0001                428      ANDI.W      #0001,D1                            ;isolate single bit
000012FA                           429      
000012FA                           430      ;at this point we have our single bit of interest in bit 0
000012FA                           431      
000012FA  B27C 0000                432      CMP         #0,D1                               ;check if bit == 0
000012FE  6700 04EA                433      BEQ         OP_ASR                              ;if yes, branch to ASR
00001302  6000 04C8                434      BRA         OP_ASL                              ;else, branch to ASL
00001306                           435  
00001306                           436  
00001306                           437  ;not assigned                                                       $F
00001306                           438  opcode1111:
00001306  4EF9 00001830            439      JMP         OP_INVALID_OPCODE
0000130C                           440  
0000130C                           441  
0000130C                           442  ;******************************** OP_XXX_TABLES ************************************
0000130C                           443  ;once in OP_XXX_TABLE , we will use these entries to jump to specific op code to put into buffer
0000130C                           444  
0000130C                           445  OP_0000_TABLE:
0000130C  4EF9 0000142C            446      jmp OP_ORI                                      ;0  
00001312  4EF9 00001820            447      jmp OP_UNSUPPORTED_OPCODE                       ;1
00001318  4EF9 0000144A            448      jmp OP_ANDI                                     ;2
0000131E  4EF9 00001820            449      jmp OP_UNSUPPORTED_OPCODE                       ;3
00001324  4EF9 0000146C            450      jmp OP_SUBI                                     ;4
0000132A  4EF9 00001820            451      jmp OP_UNSUPPORTED_OPCODE                       ;5
00001330  4EF9 0000148E            452      jmp OP_ADDI                                     ;6
00001336  4EF9 00001820            453      jmp OP_UNSUPPORTED_OPCODE                       ;7
0000133C  4EF9 00001820            454      jmp OP_UNSUPPORTED_OPCODE                       ;8
00001342  4EF9 00001820            455      jmp OP_UNSUPPORTED_OPCODE                       ;9
00001348  4EF9 000014B0            456      jmp OP_EORI                                     ;10
0000134E  4EF9 00001820            457      jmp OP_UNSUPPORTED_OPCODE                       ;11
00001354  4EF9 000014D2            458      jmp OP_CMPI                                     ;12
0000135A  4EF9 00001820            459      jmp OP_UNSUPPORTED_OPCODE                       ;13
00001360  4EF9 00001820            460      jmp OP_UNSUPPORTED_OPCODE                       ;14
00001366  4EF9 00001820            461      jmp OP_UNSUPPORTED_OPCODE                       ;15
0000136C                           462  
0000136C                           463  
0000136C                           464  ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP     $4
0000136C                           465  ;NOP    1110
0000136C                           466  ;MOVEM  1D00
0000136C                           467  ;LEA    AN1
0000136C                           468  OP_0100_TABLE:
0000136C  4EF9 00001820            469      jmp OP_UNSUPPORTED_OPCODE                           ;0  
00001372  4EF9 000015E6            470      jmp OP_LEA                                          ;1      (address 0001)
00001378  4EF9 00001820            471      jmp OP_UNSUPPORTED_OPCODE                           ;2
0000137E  4EF9 000015E6            472      jmp OP_LEA                                          ;3      (address 0011)
00001384  4EF9 00001820            473      jmp OP_UNSUPPORTED_OPCODE                           ;4 
0000138A  4EF9 000015E6            474      jmp OP_LEA                                          ;5      (address 0101)
00001390  4EF9 00001820            475      jmp OP_UNSUPPORTED_OPCODE                           ;6 
00001396  4EF9 000015E6            476      jmp OP_LEA                                          ;7      (address 0111) 
0000139C  4EF9 000015C0            477      jmp OP_MOVEM                                        ;8                         
000013A2  4EF9 000015E6            478      jmp OP_LEA                                          ;9      (address 1001) 
000013A8  4EF9 00001820            479      jmp OP_UNSUPPORTED_OPCODE                           ;10 
000013AE  4EF9 000015E6            480      jmp OP_LEA                                          ;11     (address 1011) 
000013B4  4EF9 000015C0            481      jmp OP_MOVEM                                        ;12                       
000013BA  4EF9 000015E6            482      jmp OP_LEA                                          ;13     (address 1101)
000013C0  4EF9 000015B0            483      jmp OP_NOP                                          ;14
000013C6  4EF9 000015E6            484      jmp OP_LEA                                          ;15     (address 1111)
000013CC                           485  
000013CC                           486  
000013CC                           487  ;BRA nibble 2 = 0000 (0) , BSR nibble 2 = 0001 (1)
000013CC                           488  OP_0110_TABLE:
000013CC  4EF9 00001678            489      jmp OP_BRA                                          ;0
000013D2  4EF9 00001690            490      jmp OP_BSR                                          ;1
000013D8  4EF9 00001820            491      jmp OP_UNSUPPORTED_OPCODE                           ;2
000013DE  4EF9 00001820            492      jmp OP_UNSUPPORTED_OPCODE                           ;3
000013E4  4EF9 00001820            493      jmp OP_UNSUPPORTED_OPCODE                           ;4
000013EA  4EF9 00001820            494      jmp OP_UNSUPPORTED_OPCODE                           ;5
000013F0  4EF9 00001820            495      jmp OP_UNSUPPORTED_OPCODE                           ;6
000013F6  4EF9 00001820            496      jmp OP_UNSUPPORTED_OPCODE                           ;7
000013FC  4EF9 00001820            497      jmp OP_UNSUPPORTED_OPCODE                           ;8
00001402  4EF9 00001820            498      jmp OP_UNSUPPORTED_OPCODE                           ;9
00001408  4EF9 00001820            499      jmp OP_UNSUPPORTED_OPCODE                           ;10
0000140E  4EF9 00001820            500      jmp OP_UNSUPPORTED_OPCODE                           ;11
00001414  4EF9 00001820            501      jmp OP_UNSUPPORTED_OPCODE                           ;12
0000141A  4EF9 00001820            502      jmp OP_UNSUPPORTED_OPCODE                           ;13
00001420  4EF9 00001820            503      jmp OP_UNSUPPORTED_OPCODE                           ;14
00001426  4EF9 00001820            504      jmp OP_UNSUPPORTED_OPCODE                           ;15
0000142C                           505  
0000142C                           506  
0000142C                           507  ;******************************** OP_INSTRUCTION_XXXX******************************************
0000142C                           508  ;this is where we are putting ascii text into buffer
0000142C                           509  
0000142C                           510  OP_ORI:
0000142C  14FC 004F                511      MOVE.B  #'O', (A2)+
00001430  14FC 0052                512      MOVE.B  #'R', (A2)+
00001434  14FC 0049                513      MOVE.B  #'I', (A2)+
00001438                           514      
00001438                           515      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001438  4EB9 00001840            516      JSR     OP_CHECK_SIZE
0000143E                           517      
0000143E  7200                     518      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001440                           519  
00001440  4EB9 000019EE            520      JSR     EA_START
00001446  4EF8 1148                521      JMP     OP_FINISH
0000144A                           522  
0000144A                           523  OP_ANDI:  ;(optional)
0000144A  14FC 0041                524      MOVE.B  #'A', (A2)+
0000144E  14FC 004E                525      MOVE.B  #'N', (A2)+
00001452  14FC 0044                526      MOVE.B  #'D', (A2)+
00001456  14FC 0049                527      MOVE.B  #'I', (A2)+
0000145A                           528      
0000145A                           529      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000145A  4EB9 00001840            530      JSR     OP_CHECK_SIZE
00001460                           531      
00001460  7200                     532      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001462                           533  
00001462  4EB9 000019EE            534      JSR     EA_START
00001468  4EF8 1148                535      JMP     OP_FINISH
0000146C                           536  
0000146C                           537  
0000146C                           538  OP_SUBI:  ;(optional)
0000146C  14FC 0053                539      MOVE.B  #'S', (A2)+
00001470  14FC 0055                540      MOVE.B  #'U', (A2)+
00001474  14FC 0042                541      MOVE.B  #'B', (A2)+
00001478  14FC 0049                542      MOVE.B  #'I', (A2)+
0000147C                           543      
0000147C                           544      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000147C  4EB9 00001840            545      JSR     OP_CHECK_SIZE
00001482                           546      
00001482  7200                     547      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001484                           548  
00001484  4EB9 000019EE            549      JSR     EA_START
0000148A  4EF8 1148                550      JMP     OP_FINISH
0000148E                           551  
0000148E                           552  
0000148E                           553  OP_ADDI:  ;(optional)
0000148E  14FC 0041                554      MOVE.B  #'A', (A2)+
00001492  14FC 0044                555      MOVE.B  #'D', (A2)+
00001496  14FC 0044                556      MOVE.B  #'D', (A2)+
0000149A  14FC 0049                557      MOVE.B  #'I', (A2)+
0000149E                           558      
0000149E                           559      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000149E  4EB9 00001840            560      JSR     OP_CHECK_SIZE
000014A4                           561     
000014A4  7200                     562      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000014A6                           563  
000014A6  4EB9 000019EE            564      JSR     EA_START
000014AC  4EF8 1148                565      JMP     OP_FINISH
000014B0                           566  
000014B0                           567  
000014B0                           568  OP_EORI:  ;(optional)
000014B0  14FC 0045                569      MOVE.B  #'E', (A2)+
000014B4  14FC 004F                570      MOVE.B  #'O', (A2)+
000014B8  14FC 0052                571      MOVE.B  #'R', (A2)+
000014BC  14FC 0049                572      MOVE.B  #'I', (A2)+
000014C0                           573      
000014C0                           574      ;call OP_CHECK_SIZE to append a .b/.w/.l
000014C0  4EB9 00001840            575      JSR     OP_CHECK_SIZE
000014C6                           576      
000014C6  7200                     577      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000014C8                           578      
000014C8  4EB9 000019EE            579      JSR     EA_START
000014CE  4EF8 1148                580      JMP     OP_FINISH
000014D2                           581  
000014D2                           582  
000014D2                           583  OP_CMPI:  ;(optional)
000014D2  14FC 0043                584      MOVE.B  #'C', (A2)+
000014D6  14FC 004D                585      MOVE.B  #'M', (A2)+
000014DA  14FC 0050                586      MOVE.B  #'P', (A2)+
000014DE  14FC 0049                587      MOVE.B  #'I', (A2)+
000014E2                           588      
000014E2                           589      
000014E2                           590      ;call OP_CHECK_SIZE to append a .b/.w/.l
000014E2  4EB9 00001840            591      JSR     OP_CHECK_SIZE
000014E8                           592  
000014E8  7200                     593      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000014EA                           594  
000014EA  4EB9 000019EE            595      JSR     EA_START
000014F0  4EF8 1148                596      JMP     OP_FINISH
000014F4                           597  
000014F4                           598  
000014F4                           599  OP_MOVEB:
000014F4  14FC 004D                600      MOVE.B  #'M', (A2)+
000014F8  14FC 004F                601      MOVE.B  #'O', (A2)+
000014FC  14FC 0056                602      MOVE.B  #'V', (A2)+
00001500  14FC 0045                603      MOVE.B  #'E', (A2)+
00001504  14FC 002E                604      MOVE.B  #'.', (A2)+
00001508  14FC 0042                605      MOVE.B  #'B', (A2)+
0000150C                           606      
0000150C  7201                     607      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
0000150E                           608      
0000150E  4EB9 000019EE            609      JSR     EA_START
00001514  4EF8 1148                610      JMP     OP_FINISH
00001518                           611  
00001518                           612  OP_MOVEAL:
00001518  14FC 004D                613      MOVE.B  #'M', (A2)+
0000151C  14FC 004F                614      MOVE.B  #'O', (A2)+
00001520  14FC 0056                615      MOVE.B  #'V', (A2)+
00001524  14FC 0045                616      MOVE.B  #'E', (A2)+
00001528  14FC 0041                617      MOVE.B  #'A', (A2)+
0000152C  14FC 002E                618      MOVE.B  #'.', (A2)+
00001530  14FC 004C                619      MOVE.B  #'L', (A2)+
00001534                           620      
00001534  7202                     621      MOVE.L  #ea_type_movea, D1                   ;preps for EA_START and puts 2 into D1
00001536                           622      
00001536  4EB9 000019EE            623      JSR     EA_START
0000153C  4EF8 1148                624      JMP     OP_FINISH
00001540                           625  
00001540                           626  OP_MOVEL:
00001540  14FC 004D                627      MOVE.B  #'M', (A2)+
00001544  14FC 004F                628      MOVE.B  #'O', (A2)+
00001548  14FC 0056                629      MOVE.B  #'V', (A2)+
0000154C  14FC 0045                630      MOVE.B  #'E', (A2)+
00001550  14FC 002E                631      MOVE.B  #'.', (A2)+
00001554  14FC 004C                632      MOVE.B  #'L', (A2)+
00001558                           633      
00001558  7201                     634      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
0000155A                           635      
0000155A  4EB9 000019EE            636      JSR     EA_START
00001560  4EF8 1148                637      JMP     OP_FINISH
00001564                           638  
00001564                           639  
00001564                           640  OP_MOVEAW:
00001564  14FC 004D                641      MOVE.B  #'M', (A2)+
00001568  14FC 004F                642      MOVE.B  #'O', (A2)+
0000156C  14FC 0056                643      MOVE.B  #'V', (A2)+
00001570  14FC 0045                644      MOVE.B  #'E', (A2)+
00001574  14FC 0041                645      MOVE.B  #'A', (A2)+
00001578  14FC 002E                646      MOVE.B  #'.', (A2)+
0000157C  14FC 0057                647      MOVE.B  #'W', (A2)+
00001580                           648      
00001580  7202                     649      MOVE.L  #ea_type_movea, D1                   ;preps for EA_START and puts 2 into D1
00001582                           650      
00001582  4EB9 000019EE            651      JSR     EA_START
00001588  4EF8 1148                652      JMP     OP_FINISH
0000158C                           653  
0000158C                           654  
0000158C                           655  OP_MOVEW:
0000158C  14FC 004D                656      MOVE.B  #'M', (A2)+
00001590  14FC 004F                657      MOVE.B  #'O', (A2)+
00001594  14FC 0056                658      MOVE.B  #'V', (A2)+
00001598  14FC 0045                659      MOVE.B  #'E', (A2)+
0000159C  14FC 002E                660      MOVE.B  #'.', (A2)+
000015A0  14FC 0057                661      MOVE.B  #'W', (A2)+
000015A4                           662      
000015A4  7201                     663      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
000015A6                           664      
000015A6  4EB9 000019EE            665      JSR     EA_START
000015AC  4EF8 1148                666      JMP     OP_FINISH
000015B0                           667  
000015B0                           668  
000015B0                           669  OP_NOP:
000015B0  14FC 004E                670      MOVE.B  #'N', (A2)+
000015B4  14FC 004F                671      MOVE.B  #'O', (A2)+
000015B8  14FC 0050                672      MOVE.B  #'P', (A2)+
000015BC                           673      
000015BC                           674      ;NO EA
000015BC  4EF8 1148                675      JMP     OP_FINISH
000015C0                           676  
000015C0                           677  
000015C0                           678  OP_MOVEM:   
000015C0  14FC 004D                679      MOVE.B  #'M', (A2)+
000015C4  14FC 004F                680      MOVE.B  #'O', (A2)+
000015C8  14FC 0056                681      MOVE.B  #'V', (A2)+
000015CC  14FC 0045                682      MOVE.B  #'E', (A2)+
000015D0  14FC 004D                683      MOVE.B  #'M', (A2)+
000015D4                           684      
000015D4                           685      ;call OP_CHECK_SIZE to append a .b/.w/.l
000015D4  4EB9 00001864            686      JSR     OP_CHECK_SIZE_MOVEM
000015DA                           687      
000015DA  7206                     688      MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
000015DC                           689      
000015DC  4EB9 000019EE            690      JSR     EA_START
000015E2  4EF8 1148                691      JMP     OP_FINISH
000015E6                           692  
000015E6                           693  OP_LEA:
000015E6  14FC 004C                694      MOVE.B  #'L', (A2)+
000015EA  14FC 0045                695      MOVE.B  #'E', (A2)+
000015EE  14FC 0041                696      MOVE.B  #'A', (A2)+
000015F2                           697      
000015F2  7203                     698      MOVE.L  #ea_type_lea, D1                   ;preps for EA_START and puts 3 into D1
000015F4                           699      
000015F4  4EB9 000019EE            700      JSR     EA_START
000015FA  4EF8 1148                701      JMP     OP_FINISH
000015FE                           702  
000015FE                           703  OP_CLR:  ;(optional)
000015FE  4EF9 00001820            704      JMP     OP_UNSUPPORTED_OPCODE 
00001604                           705  
00001604                           706  
00001604                           707  OP_NOT:  ;(optional)
00001604  4EF9 00001820            708      JMP     OP_UNSUPPORTED_OPCODE 
0000160A                           709  
0000160A                           710  
0000160A                           711  OP_EXT:  ;(optional)
0000160A  4EF9 00001820            712      JMP     OP_UNSUPPORTED_OPCODE 
00001610                           713  
00001610                           714  
00001610                           715  OP_TRAP:  ;(optional)
00001610  4EF9 00001820            716      JMP     OP_UNSUPPORTED_OPCODE 
00001616                           717  
00001616                           718   
00001616                           719  OP_STOP:  ;(optional)
00001616  4EF9 00001820            720      JMP     OP_UNSUPPORTED_OPCODE 
0000161C                           721  
0000161C                           722  
0000161C                           723  OP_RTE:  ;(optional)
0000161C  4EF9 00001820            724      JMP     OP_UNSUPPORTED_OPCODE 
00001622                           725  
00001622                           726  
00001622                           727  OP_RTS:  ;(optional)
00001622  4EF9 00001820            728      JMP     OP_UNSUPPORTED_OPCODE 
00001628                           729  
00001628                           730  
00001628                           731  OP_JSR:  ;(optional)
00001628  4EF9 00001820            732      JMP     OP_UNSUPPORTED_OPCODE 
0000162E                           733  
0000162E                           734  
0000162E                           735  OP_JMP:  ;(optional)
0000162E  4EF9 00001820            736      JMP     OP_UNSUPPORTED_OPCODE 
00001634                           737  
00001634                           738  
00001634                           739  OP_ADDQ:
00001634  14FC 0041                740      MOVE.B  #'A', (A2)+
00001638  14FC 0044                741      MOVE.B  #'D', (A2)+
0000163C  14FC 0044                742      MOVE.B  #'D', (A2)+
00001640  14FC 0051                743      MOVE.B  #'Q', (A2)+
00001644                           744      
00001644                           745      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001644  4EB9 00001840            746      JSR     OP_CHECK_SIZE
0000164A                           747  
0000164A  7208                     748      MOVE.L  #ea_type_quick, D1                   ;preps for EA_START and puts 8 into D1
0000164C                           749  
0000164C  4EB9 000019EE            750      JSR     EA_START
00001652  4EF8 1148                751      JMP     OP_FINISH
00001656                           752  
00001656                           753  OP_SUBQ:  ;(optional)
00001656  14FC 0053                754      MOVE.B  #'S', (A2)+
0000165A  14FC 0055                755      MOVE.B  #'U', (A2)+
0000165E  14FC 0042                756      MOVE.B  #'B', (A2)+
00001662  14FC 0051                757      MOVE.B  #'Q', (A2)+
00001666                           758      
00001666                           759      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001666  4EB9 00001840            760      JSR     OP_CHECK_SIZE
0000166C                           761      
0000166C  7208                     762      MOVE.L  #ea_type_quick, D1                      ;preps for EA_START and puts 8 into D1
0000166E                           763  
0000166E  4EB9 000019EE            764      JSR     EA_START
00001674  4EF8 1148                765      JMP     OP_FINISH
00001678                           766  
00001678                           767  OP_BRA:                                     
00001678  14FC 0042                768      MOVE.B  #'B', (A2)+
0000167C  14FC 0052                769      MOVE.B  #'R', (A2)+
00001680  14FC 0041                770      MOVE.B  #'A', (A2)+
00001684                           771  
00001684  7209                     772      MOVE.L  #ea_type_branch,D1
00001686                           773      
00001686  4EB9 000019EE            774      JSR     EA_START
0000168C  4EF8 1148                775      JMP     OP_FINISH
00001690                           776  
00001690                           777  
00001690                           778  OP_BSR:
00001690  14FC 0042                779      MOVE.B  #'B', (A2)+
00001694  14FC 0053                780      MOVE.B  #'S', (A2)+
00001698  14FC 0052                781      MOVE.B  #'R', (A2)+
0000169C                           782      
0000169C  7209                     783      MOVE.L  #ea_type_branch,D1
0000169E                           784      
0000169E  4EB9 000019EE            785      JSR     EA_START                        
000016A4  4EF8 1148                786      JMP     OP_FINISH
000016A8                           787  
000016A8                           788  
000016A8                           789  OP_BEQ:
000016A8  4EF9 00001820            790      JMP     OP_UNSUPPORTED_OPCODE 
000016AE                           791  
000016AE                           792  
000016AE                           793  OP_MOVEQ:
000016AE  14FC 004D                794      MOVE.B  #'M', (A2)+
000016B2  14FC 004F                795      MOVE.B  #'O', (A2)+
000016B6  14FC 0056                796      MOVE.B  #'V', (A2)+
000016BA  14FC 0045                797      MOVE.B  #'E', (A2)+
000016BE  14FC 0051                798      MOVE.B  #'Q', (A2)+
000016C2                           799      
000016C2                           800      ;DO WE NEED A .L ?
000016C2                           801      
000016C2  7208                     802      MOVE.L  #ea_type_quick, D1                      ;preps for EA_START and puts 8 into D1
000016C4                           803      
000016C4  4EB9 000019EE            804      JSR     EA_START
000016CA  4EF8 1148                805      JMP     OP_FINISH
000016CE                           806  
000016CE                           807  
000016CE                           808  OP_DIVU:
000016CE  14FC 0044                809      MOVE.B  #'D', (A2)+
000016D2  14FC 0049                810      MOVE.B  #'I', (A2)+
000016D6  14FC 0056                811      MOVE.B  #'V', (A2)+
000016DA  14FC 0055                812      MOVE.B  #'U', (A2)+
000016DE                           813    
000016DE  720A                     814      MOVE.L  #ea_type_math, D1                       ;preps for EA_START and puts 10 into D1
000016E0                           815    
000016E0  4EB9 000019EE            816      JSR     EA_START
000016E6  4EF8 1148                817      JMP     OP_FINISH    
000016EA                           818  
000016EA                           819  
000016EA                           820  OP_DIVS:  ;(optional)
000016EA  14FC 0044                821      MOVE.B  #'D', (A2)+
000016EE  14FC 0049                822      MOVE.B  #'I', (A2)+
000016F2  14FC 0056                823      MOVE.B  #'V', (A2)+
000016F6  14FC 0053                824      MOVE.B  #'S', (A2)+
000016FA                           825    
000016FA  720A                     826      MOVE.L  #ea_type_math, D1                       ;preps for EA_START and puts 10 into D1
000016FC                           827    
000016FC  4EB9 000019EE            828      JSR     EA_START
00001702  4EF8 1148                829      JMP     OP_FINISH   
00001706                           830  
00001706                           831  
00001706                           832  OP_OR:  ;(optional)
00001706  4EF9 00001820            833      JMP     OP_UNSUPPORTED_OPCODE 
0000170C                           834  
0000170C                           835  
0000170C                           836  OP_SUB:
0000170C  14FC 0053                837      MOVE.B  #'S', (A2)+
00001710  14FC 0055                838      MOVE.B  #'U', (A2)+
00001714  14FC 0042                839      MOVE.B  #'B', (A2)+
00001718                           840  
00001718  4EB9 00001840            841      JSR     OP_CHECK_SIZE                       ;call OP_CHECK_SIZE to append a .b/.w/.l
0000171E                           842      
0000171E  720A                     843      MOVE.L  #ea_type_math, D1                   ;preps for EA_START and puts 10 into D1
00001720                           844      
00001720                           845      ;at this point it will return with SUB.X and go to EA_START
00001720  4EB9 000019EE            846      JSR     EA_START
00001726  4EF8 1148                847      JMP     OP_FINISH    
0000172A                           848  
0000172A                           849  
0000172A                           850  OP_CMP:
0000172A  14FC 0043                851      MOVE.B  #'C', (A2)+
0000172E  14FC 004D                852      MOVE.B  #'M', (A2)+
00001732  14FC 0050                853      MOVE.B  #'P', (A2)+
00001736                           854    
00001736  4EB9 00001840            855      JSR     OP_CHECK_SIZE                       ;call OP_CHECK_SIZE to append a .b/.w/.l  
0000173C                           856      
0000173C  720A                     857      MOVE.L  #ea_type_math, D1                   ;preps for EA_START and puts 10 into D1
0000173E                           858      
0000173E                           859      ;at this point it will return with SUB.X and go to EA_START
0000173E  4EB9 000019EE            860      JSR     EA_START
00001744  4EF8 1148                861      JMP     OP_FINISH    
00001748                           862      
00001748                           863  
00001748                           864  OP_EOR:  ;(optional)
00001748  4EF9 00001820            865      JMP     OP_UNSUPPORTED_OPCODE 
0000174E                           866  
0000174E                           867  
0000174E                           868  OP_MULU:
0000174E  14FC 004D                869      MOVE.B  #'M', (A2)+
00001752  14FC 0055                870      MOVE.B  #'U', (A2)+
00001756  14FC 004C                871      MOVE.B  #'L', (A2)+
0000175A  14FC 0055                872      MOVE.B  #'U', (A2)+
0000175E                           873  
0000175E  720A                     874      MOVE.L  #ea_type_math, D1                   ;preps for EA_START and puts 10 into D1
00001760                           875      
00001760  4EB9 000019EE            876      JSR     EA_START
00001766  4EF8 1148                877      JMP     OP_FINISH    
0000176A                           878  
0000176A                           879  OP_MULS:  ;(optional)
0000176A  14FC 004D                880      MOVE.B  #'M', (A2)+
0000176E  14FC 0055                881      MOVE.B  #'U', (A2)+
00001772  14FC 004C                882      MOVE.B  #'L', (A2)+
00001776  14FC 0053                883      MOVE.B  #'S', (A2)+
0000177A                           884  
0000177A  720A                     885      MOVE.L  #ea_type_math, D1                   ;preps for EA_START and puts 10 into D1
0000177C                           886  
0000177C  4EB9 000019EE            887      JSR     EA_START
00001782  4EF8 1148                888      JMP     OP_FINISH
00001786                           889  
00001786                           890  
00001786                           891  OP_AND:  ;(optional)
00001786  4EF9 00001820            892      JMP     OP_UNSUPPORTED_OPCODE 
0000178C                           893  
0000178C                           894  
0000178C                           895  OP_ADD:
0000178C  14FC 0041                896      MOVE.B  #'A', (A2)+
00001790  14FC 0044                897      MOVE.B  #'D', (A2)+
00001794  14FC 0044                898      MOVE.B  #'D', (A2)+
00001798                           899  
00001798                           900      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001798  4EB9 00001840            901      JSR     OP_CHECK_SIZE
0000179E                           902      
0000179E  720A                     903      MOVE.L  #ea_type_math, D1                       ;preps for EA_START and puts 10 into D1
000017A0                           904  
000017A0  4EB9 000019EE            905      JSR     EA_START
000017A6  4EF8 1148                906      JMP     OP_FINISH
000017AA                           907  
000017AA                           908  OP_ADDA:
000017AA  14FC 0041                909      MOVE.B  #'A', (A2)+
000017AE  14FC 0044                910      MOVE.B  #'D', (A2)+
000017B2  14FC 0044                911      MOVE.B  #'D', (A2)+
000017B6  14FC 0041                912      MOVE.B  #'A', (A2)+
000017BA                           913  
000017BA                           914      ;call OP_CHECK_SIZE to append a .b/.w/.l
000017BA  4EB9 000018A6            915      JSR     OP_CHECK_SIZE_ADDA
000017C0                           916      
000017C0  720A                     917      MOVE.L  #ea_type_math, D1                       ;preps for EA_START and puts 10 into D1
000017C2                           918  
000017C2  4EB9 000019EE            919      JSR     EA_START
000017C8  4EF8 1148                920      JMP     OP_FINISH
000017CC                           921  
000017CC                           922  
000017CC                           923  OP_ASL:
000017CC  14FC 0041                924      MOVE.B  #'A', (A2)+
000017D0  14FC 0053                925      MOVE.B  #'S', (A2)+
000017D4  14FC 004C                926      MOVE.B  #'L', (A2)+
000017D8                           927  
000017D8                           928      ;call OP_CHECK_SIZE to append a .b/.w/.l
000017D8  4EB9 00001840            929      JSR     OP_CHECK_SIZE
000017DE                           930      
000017DE  720B                     931      MOVE.L  #ea_type_rotation, D1                   ;preps for EA_START and puts 10 into D1
000017E0                           932      
000017E0  4EB9 000019EE            933      JSR     EA_START
000017E6  4EF8 1148                934      JMP     OP_FINISH
000017EA                           935  
000017EA                           936  
000017EA                           937  OP_ASR:
000017EA  14FC 0041                938      MOVE.B  #'A', (A2)+
000017EE  14FC 0053                939      MOVE.B  #'S', (A2)+
000017F2  14FC 0052                940      MOVE.B  #'R', (A2)+
000017F6                           941  
000017F6                           942      ;call OP_CHECK_SIZE to append a .b/.w/.l
000017F6  4EB9 00001840            943      JSR     OP_CHECK_SIZE
000017FC                           944      
000017FC  720B                     945      MOVE.L  #ea_type_rotation, D1                   ;preps for EA_START and puts 10 into D1
000017FE                           946  
000017FE  4EB9 000019EE            947      JSR     EA_START
00001804  4EF8 1148                948      JMP     OP_FINISH
00001808                           949  
00001808                           950  OP_LSL:  ;(optional)
00001808  4EF9 00001820            951      JMP     OP_UNSUPPORTED_OPCODE 
0000180E                           952  
0000180E                           953  
0000180E                           954  
0000180E                           955  OP_LSR:  ;(optional)
0000180E  4EF9 00001820            956      JMP     OP_UNSUPPORTED_OPCODE 
00001814                           957  
00001814                           958  
00001814                           959  
00001814                           960  OP_ROL:  ;(optional)
00001814  4EF9 00001820            961      JMP     OP_UNSUPPORTED_OPCODE 
0000181A                           962  
0000181A                           963  
0000181A                           964  
0000181A                           965  OP_ROR:  ;(optional)
0000181A  4EF9 00001820            966      JMP     OP_UNSUPPORTED_OPCODE 
00001820                           967  
00001820                           968  
00001820                           969  
00001820                           970  OP_UNSUPPORTED_OPCODE:
00001820                           971      ;print error message
00001820  103C 000E                972      MOVE.B  #14,D0
00001824  43F9 000024B2            973      LEA     unsupported_opcode_message,A1
0000182A  4E4F                     974      TRAP    #15
0000182C                           975      
0000182C                           976      ;return to start of program
0000182C  4EF8 1012                977      JMP     GET_STARTING_ADDRESS
00001830                           978      
00001830                           979  OP_INVALID_OPCODE:
00001830  103C 000E                980      MOVE.B  #14,D0
00001834  43F9 000024DC            981      LEA     invalid_opcode_message,A1
0000183A  4E4F                     982      TRAP    #15
0000183C                           983      
0000183C  4EF8 1012                984      JMP     GET_STARTING_ADDRESS  
00001840                           985      
00001840                           986  ;D0 HAS COMPLETE INSTRUCTION
00001840                           987  OP_CHECK_SIZE:
00001840  4241                     988      CLR     D1                                      ;CLEAR D1
00001842  4242                     989      CLR     D2                                      ;clear D2
00001844  2200                     990      MOVE.L  D0,D1                                   ;D0 and D1 both have complete opcode
00001846  0241 00F0                991      ANDI.W  #nibble3,D1                             ;isolate nibble 3
0000184A  143C 0006                992      MOVE.B  #right6, D2                             ;putting immediate value 6 in D2
0000184E  E469                     993      LSR.W   D2, D1                                  ;bits 7,6 --> bits 1,0
00001850                           994      
00001850                           995       
00001850  B27C 0000                996      CMP     #00,D1                                  ;compare bits 1,0 to 00
00001854  6700 0032                997      BEQ     OP_SIZE_BYTE                            ;if bits == 00, size byte
00001858  B27C 0001                998      CMP     #01,D1                                  ;compare bits to 01
0000185C  6700 0034                999      BEQ     OP_SIZE_WORD                            ;if bits == 01, size word
00001860  6000 003A               1000      BRA     OP_SIZE_LONG                            ;else size long
00001864                          1001  
00001864                          1002  
00001864                          1003  OP_CHECK_SIZE_MOVEM:
00001864  4241                    1004      CLR     D1                                      ;CLEAR D1
00001866  4242                    1005      CLR     D2                                      ;clear D2
00001868  2200                    1006      MOVE.L  D0,D1                                   ;D0 and D1 both have complete opcode
0000186A  0241 00F0               1007      ANDI.W  #nibble3,D1                             ;isolate nibble 3
0000186E  143C 0006               1008      MOVE.B  #right6, D2                             ;putting immediate value 6 in D2
00001872  E469                    1009      LSR.W   D2, D1                                  ;bits 7,6 --> bits 1,0
00001874                          1010      
00001874  0241 0001               1011      ANDI.W  #1,D1    
00001878  B27C 0000               1012      CMP     #0,D1                                   ;compare bits 1,0 to 00
0000187C  6700 0014               1013      BEQ     OP_SIZE_WORD                            ;if bits == 00, size WORD
00001880  B27C 0001               1014      CMP     #1,D1                                   ;compare bits to 01
00001884  6700 0016               1015      BEQ     OP_SIZE_LONG                            ;if bits == 01, size LONG
00001888                          1016  
00001888                          1017  OP_SIZE_BYTE
00001888  14FC 002E               1018      MOVE.B  #'.', (A2)+
0000188C  14FC 0042               1019      MOVE.B  #'B', (A2)+
00001890  4E75                    1020      RTS
00001892                          1021  
00001892                          1022  OP_SIZE_WORD
00001892  14FC 002E               1023      MOVE.B  #'.', (A2)+
00001896  14FC 0057               1024      MOVE.B  #'W', (A2)+
0000189A  4E75                    1025      RTS
0000189C                          1026  
0000189C                          1027  
0000189C                          1028  OP_SIZE_LONG
0000189C  14FC 002E               1029      MOVE.B  #'.', (A2)+
000018A0  14FC 004C               1030      MOVE.B  #'L', (A2)+
000018A4  4E75                    1031      RTS
000018A6                          1032  
000018A6                          1033  
000018A6                          1034  OP_CHECK_SIZE_ADDA:
000018A6  4241                    1035      CLR     D1                                      ;CLEAR D1
000018A8  4242                    1036      CLR     D2                                      ;clear D2
000018AA  2200                    1037      MOVE.L  D0,D1                                   ;D0 and D1 both have complete opcode
000018AC  0241 0F00               1038      ANDI.W  #nibble2,D1                             ;isolate nibble 2
000018B0  143C 0008               1039      MOVE.B  #right8, D2                             ;putting immediate value 8 in D2
000018B4  E469                    1040      LSR.W   D2, D1                              
000018B6                          1041      
000018B6                          1042      ;at this point we have our single bit in bit 0
000018B6                          1043      
000018B6  0241 0001               1044      ANDI.W  #0001,D1                                ;isolate bit 0
000018BA  B27C 0000               1045      CMP     #0,D1                                   ;check if bit == 0
000018BE  67D2                    1046      BEQ     OP_SIZE_WORD                            ;if yes, size = word
000018C0  60DA                    1047      BRA     OP_SIZE_LONG                            ;else, size = long
000018C2                          1048   
000018C2                          1049  
000018C2                          1050  ;**************************************************************** ATOI **********************************************************************************************
000018C2                          1051  ATOI:
000018C2  2401                    1052          MOVE.L      D1,D2                   ;loop variable (size) is in D2
000018C4  2449                    1053          MOVEA.L     A1,A2                   ;pointer to next char
000018C6  4284                    1054          CLR.L       D4
000018C8                          1055  
000018C8                          1056  ATOI_LOOP  
000018C8  4243                    1057          CLR         D3                      ;clear d3
000018CA  5382                    1058          SUBI.L      #1,D2                   ;subtract 1 from loop counter
000018CC  161A                    1059          MOVE.B      (A2)+,D3                 ;move current byte to D3, then increment to next
000018CE  B63C 002F               1060          CMP.B       #$2F,D3
000018D2  6F00 0064               1061          BLE         ATOI_ERROR              ;if less than 30, not a number, branch to error
000018D6  B63C 0039               1062          CMP.B       #$39,D3                 ;check byte to see if number or letter
000018DA  6F00 002A               1063          BLE         ATOI_NUMBER             ;30<x<39 --> number
000018DE  B63C 0040               1064          CMP.B       #$40,D3
000018E2  6F00 0054               1065          BLE         ATOI_ERROR
000018E6  B63C 0046               1066          CMP.B       #$46,D3
000018EA  6F00 0024               1067          BLE         ATOI_UPPERCASE_LETTER   ;less than 47, it is uppercase letter
000018EE  B63C 0060               1068          CMP.B       #$60,D3
000018F2  6F00 0044               1069          BLE         ATOI_ERROR
000018F6  B63C 0066               1070          CMP.B       #$66,D3
000018FA  6F00 001E               1071          BLE         ATOI_LOWERCASE_LETTER
000018FE  B63C 0067               1072          CMP.B       #$67,D3
00001902  6C00 0034               1073          BGE         ATOI_ERROR        
00001906                          1074      
00001906                          1075  
00001906                          1076  ATOI_NUMBER
00001906                          1077  ;number --> d1 = d1 - $30
00001906  0403 0030               1078      SUBI.B          #$30, D3                    ;subtract 30 if number
0000190A  4EF9 00001924           1079      JMP             ATOI_FORMAT                 ;testing
00001910                          1080  
00001910                          1081  ATOI_UPPERCASE_LETTER
00001910                          1082  ;letter --> d1 = d1 - $37
00001910  0403 0037               1083      SUBI.B          #$37,D3                     ;subtract 37 if UPPER case letter
00001914  4EF9 00001924           1084      JMP             ATOI_FORMAT                 ;testing
0000191A                          1085  
0000191A                          1086  ATOI_LOWERCASE_LETTER
0000191A  0403 0057               1087      SUBI.B          #$57,D3                     ;subtract 57(20 + 37)
0000191E  4EF9 00001924           1088      JMP             ATOI_FORMAT                 ;testing
00001924                          1089  
00001924                          1090  ATOI_FORMAT
00001924  D803                    1091      ADD.B           D3,D4                       ;add the byte to D4 so can add later   
00001926  B43C 0000               1092      CMP.B           #0,D2                       
0000192A  6700 0008               1093      BEQ             ATOI_DONE                   ;check if done (loop counter D2 is at 0)
0000192E  E984                    1094      ASL.L           #4,D4                       ;logical shift left to make room
00001930  4EF8 18C8               1095      JMP             ATOI_LOOP                   ;go back to loop
00001934                          1096      
00001934                          1097  
00001934                          1098  ATOI_DONE 
00001934  2284                    1099      MOVE.L         D4,(A1)                      ;at this point, move the new address in D4 to mem location                                
00001936  4E75                    1100      RTS                                         ;used to RTS after a branch statement
00001938                          1101      
00001938                          1102  ATOI_ERROR:
00001938                          1103      ;print error message
00001938  103C 000E               1104      MOVE.B  #14,D0
0000193C  43F9 000025A9           1105      LEA     invalid_character_message,A1
00001942  4E4F                    1106      TRAP    #15
00001944                          1107      
00001944                          1108      ;return to start of program
00001944  4EF8 1012               1109      JMP     GET_STARTING_ADDRESS
00001948                          1110  
00001948                          1111  ;************************************* ITOA *******************************************************************************************************************
00001948                          1112  ;A0
00001948                          1113  ;A1
00001948                          1114  ;A2 = buffer (this is our decoded string that will print to screen)
00001948                          1115  ;A3
00001948                          1116  ;A4 = current memory address for buffer
00001948                          1117  ;A5 = starting address / current address in memory
00001948                          1118  ;A6 = ending address
00001948                          1119  ;A7 = SP
00001948                          1120  
00001948                          1121  ;D0 = counter
00001948                          1122  ;D1 = 
00001948                          1123  ;D2 = ?
00001948                          1124  ;D3 = buffer size (used for loop = 64)
00001948                          1125  ;D4 = value being converted
00001948                          1126  ;D5 =
00001948                          1127  ;D6 = 
00001948                          1128  ;D7 = 
00001948                          1129  ITOA:
00001948  280D                    1130      MOVE.L         A5,D4                        ;D4 has data to convert to ascii
0000194A                          1131  
0000194A                          1132  ITOA_LOOP:
0000194A  BA3C 0000               1133      CMP.B           #0,D5
0000194E  6700 004C               1134      BEQ             ITOA_FINISH                 ;when 0, branch to finish to complete
00001952                          1135  
00001952                          1136  
00001952                          1137  ITOA_ADDRESS:
00001952  4284                    1138      CLR.L       D4                              ;D4 = 0000 0000
00001954  280D                    1139      MOVE.L      A5,D4                           ;our address is now in D4 and ready to deconstruct
00001956  103C 0008               1140      MOVE.B      #8,D0                           ;counter
0000195A  4EF9 00001960           1141      JMP         ITOA_ADDRESS_LOOP
00001960                          1142  ITOA_ADDRESS_LOOP:
00001960  B03C 0000               1143      CMP.B       #0,D0                           ;check if done
00001964  6700 0036               1144      BEQ         ITOA_FINISH                     ;if at 0, branch to ITOA_FINISH
00001968  E99C                    1145      ROL.L       #4,D4                           ;rotate left 4 bits, to get MSB to beginning 
0000196A  1204                    1146      MOVE.B      D4,D1                           ;store in D1 (this will be whole byte, we want half)
0000196C  0241 000F               1147      ANDI.W      #$000F,D1                       ;character is now isolated
00001970                          1148      
00001970  4EB9 0000197C           1149      JSR         ITOA_HEX2ASCII                  ;JSR to convert
00001976  5340                    1150      SUBI        #1,D0                           ;subtract 1 from counter
00001978  4EF8 1960               1151      JMP         ITOA_ADDRESS_LOOP               ;loop again!
0000197C                          1152  
0000197C                          1153  ITOA_HEX2ASCII:
0000197C  B23C 000A               1154      CMP.B       #$A,D1                          ;compare byte in D1 to hex value A
00001980  6C00 0012               1155      BGE         ITOA_LETTER                     ;if greater than/equal A, it is letter
00001984  B23C 000A               1156      CMP.B       #$A,D1                          ;compare byte in D1 to hex value A
00001988  6D00 0002               1157      BLT         ITOA_NUMBER                     ;if less than, it is number
0000198C                          1158  
0000198C                          1159  ITOA_NUMBER:
0000198C  0601 0030               1160      ADDI.B      #$30,D1                         ;add $30 to D1 to convert
00001990  14C1                    1161      MOVE.B      D1,(A2)+                        ;add to buffer and increment to next position
00001992  4E75                    1162      RTS
00001994                          1163  
00001994                          1164  ITOA_LETTER:
00001994  0601 0037               1165      ADDI.B      #$37,D1                         ;add 37 to D1 to convert
00001998  14C1                    1166      MOVE.B      D1,(A2)+                        ;add to buffer and increment to next position
0000199A  4E75                    1167      RTS
0000199C                          1168  
0000199C                          1169  ITOA_FINISH:
0000199C  4E75                    1170      RTS
0000199E                          1171  
0000199E                          1172  
0000199E                          1173  ;******************************************************** Message Error Handling ***************************************************************************************** 
0000199E                          1174  STARTA_ERROR_LESS_THAN_ZERO:
0000199E  103C 000E               1175      MOVE.B  #14,D0
000019A2  43F9 0000237C           1176      LEA     error_message_1,A1                  ;load the get_end_address message into A1
000019A8  4E4F                    1177      TRAP    #15    
000019AA  4EF8 1012               1178      JMP     GET_STARTING_ADDRESS
000019AE                          1179  
000019AE                          1180  STARTA_ERROR_NOT_EVEN:
000019AE  103C 000E               1181      MOVE.B  #14,D0
000019B2  43F9 000023A6           1182      LEA     error_message_2,A1                  ;load error_message_2
000019B8  4E4F                    1183      TRAP    #15    
000019BA  4EF8 1012               1184      JMP     GET_STARTING_ADDRESS
000019BE                          1185  
000019BE                          1186  ENDA_ERROR_NOT_EVEN:
000019BE  103C 000E               1187      MOVE.B  #14,D0
000019C2  43F9 000023C6           1188      LEA     error_message_3,A1                  ;load error_message_3
000019C8  4E4F                    1189      TRAP    #15
000019CA  4EF8 104A               1190      JMP     GET_ENDING_ADDRESS
000019CE                          1191  
000019CE                          1192  ENDA_ERROR_LARGE:
000019CE  103C 000E               1193      MOVE.B  #14,D0
000019D2  43F9 000023E6           1194      LEA     error_message_4,A1                  ;load error_message_4
000019D8  4E4F                    1195      TRAP    #15
000019DA  4EF8 104A               1196      JMP     GET_ENDING_ADDRESS
000019DE                          1197      
000019DE                          1198  ENDA_ERROR_LESS_THAN_STARTA:
000019DE  103C 000E               1199      MOVE.B  #14,D0
000019E2  43F9 00002415           1200      LEA     error_message_5,A1                  ;load error_message_5
000019E8  4E4F                    1201      TRAP    #15
000019EA  4EF8 104A               1202      JMP     GET_ENDING_ADDRESS
000019EE                          1203  
000019EE                          1204  ;******************************************************************* EA Stuff ******************************************************************************************** 
000019EE                          1205  
000019EE                          1206  EA_START:
000019EE  41F9 000019FC           1207      LEA         EA_TYPE_TABLE, A0
000019F4                          1208      
000019F4  C2FC 0006               1209      MULU        #6,D1                           ;computes opcode table jump displacement
000019F8  4EF0 1000               1210      JMP         0(A0,D1)                        ;jump to correct table input
000019FC                          1211  
000019FC                          1212  
000019FC                          1213  EA_TYPE_TABLE:
000019FC  4EF9 00001A4C           1214      JMP         EA_IMMEDIATE                    ;0  DONE
00001A02  4EF9 00001A8E           1215      JMP         EA_MOVE                         ;1  DONE
00001A08  4EF9 00001AD4           1216      JMP         EA_MOVEA                        ;2  DONE
00001A0E  4EF9 00001B1A           1217      JMP         EA_LEA                          ;3  DONE
00001A14  4EF9 00001B5A           1218      JMP         EA_DESTONLY                     ;4  JMP, CLR
00001A1A  4EF9 00001B60           1219      JMP         EA_EXT                          ;5
00001A20  4EF9 00001B66           1220      JMP         EA_MOVEM                        ;6
00001A26  4EF9 00001E8A           1221      JMP         EA_TRAP                         ;7
00001A2C  4EF9 00001E90           1222      JMP         EA_QUICK                        ;8  DONE
00001A32  4EF9 00001F0C           1223      JMP         EA_BRANCH                       ;9  DONE
00001A38  4EF9 00001FD4           1224      JMP         EA_MATH                         ;10 DONE    DIVU, DIVS, SUB, CMP, MULU, ADD, ADDA
00001A3E  4EF9 0000204C           1225      JMP         EA_ROTATION                     ;11         ASL, ASR 
00001A44  4EF9 00001A4A           1226      JMP         EA_FINISH                       
00001A4A                          1227  
00001A4A                          1228  EA_FINISH:
00001A4A  4E75                    1229      RTS 
00001A4C                          1230      
00001A4C                          1231  
00001A4C                          1232  
00001A4C                          1233  ;********************************************  EA_TYPE  ****************************************************   
00001A4C                          1234  
00001A4C                          1235  EA_IMMEDIATE:                                   ;value 0
00001A4C  14FC 0009               1236      MOVE.B  #$09, (A2)+                         ;adds a ' ' to buffer
00001A50  14FC 0023               1237      MOVE.B  #'#',(A2)+                          ;add a # to buffer
00001A54  14FC 0024               1238      MOVE.B  #'$',(A2)+                          ;add a $ to buffer
00001A58                          1239      
00001A58                          1240      ;check size which is bits 6,7 and store in D6
00001A58                          1241      ;get immediate value from memory based off size and store in D7
00001A58  4EB9 0000220C           1242      JSR     EA_CHECK_SIZE
00001A5E                          1243      
00001A5E                          1244      ;at this point our size is in D6 and data is in D7 and memory has been advanced
00001A5E                          1245      ;convert immediate data to ascii and put on buffer
00001A5E  4EB9 00002236           1246      JSR     EA_ITOA_IMMEDIATE
00001A64                          1247      
00001A64  41F9 000020DE           1248      LEA     EA_MODE_TABLE,A0                    ;load table
00001A6A  14FC 002C               1249      MOVE.B  #',',(A2)+                          ;add a # to buffer
00001A6E  14FC 0009               1250      MOVE.B  #$09, (A2)+                         ;adds a ' ' to buffer
00001A72                          1251      
00001A72                          1252      ;source mode are bits 3,4,5   |   ;source register are bits 0,1,2
00001A72                          1253      
00001A72                          1254      ;isolate source mode - bits 3,4,5 and store in D4
00001A72  2800                    1255      MOVE.L  D0,D4
00001A74  E64C                    1256      LSR.W   #3,D4
00001A76  0244 0007               1257      ANDI.W  #$7,D4
00001A7A  C8FC 0006               1258      MULU    #6,D4
00001A7E                          1259      
00001A7E                          1260      ;isolate source register - bits 0,1,2 and store in D5
00001A7E  2A00                    1261      MOVE.L  D0,D5
00001A80  0245 0007               1262      ANDI.W  #$7,D5
00001A84                          1263  
00001A84  4EB9 000020CA           1264      JSR     EA_JMP_HELPER
00001A8A  4EF8 1A4A               1265      JMP     EA_FINISH
00001A8E                          1266  
00001A8E                          1267  ;D4 = mode      --> source / destination
00001A8E                          1268  ;D5 = register  --> source / destination   
00001A8E                          1269  EA_MOVE:
00001A8E  14FC 0009               1270      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001A92  41F9 000020DE           1271      LEA     EA_MODE_TABLE,A0                ;load table
00001A98                          1272      
00001A98                          1273      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
00001A98                          1274      
00001A98                          1275      ;isolate source mode
00001A98  2800                    1276      MOVE.L  D0,D4
00001A9A  E64C                    1277      LSR.W   #3,D4
00001A9C  0244 0007               1278      ANDI.W  #$7,D4
00001AA0  C8FC 0006               1279      MULU    #6,D4
00001AA4                          1280          
00001AA4                          1281      ;isolate source register
00001AA4  2A00                    1282      MOVE.L  D0,D5
00001AA6  0245 0007               1283      ANDI.W  #$7,D5
00001AAA                          1284      
00001AAA  4EB9 000020CA           1285      JSR    EA_JMP_HELPER
00001AB0  14FC 002C               1286      MOVE.B  #',',(A2)+                      ;add ',' to buffer  
00001AB4                          1287      
00001AB4                          1288      ;isolate destination mode
00001AB4  2800                    1289      MOVE.L  D0,D4
00001AB6  EC4C                    1290      LSR.W   #6,D4
00001AB8  0244 0007               1291      ANDI.W  #$7,D4
00001ABC  C8FC 0006               1292      MULU    #6,D4
00001AC0                          1293      
00001AC0                          1294      ;isolate destination register 
00001AC0  2A00                    1295      MOVE.L  D0,D5
00001AC2  E84D                    1296      LSR.W   #4,D5
00001AC4  EA4D                    1297      LSR.W   #5,D5                           
00001AC6  0245 0007               1298      ANDI.W  #$7,D5   
00001ACA  4EB9 000020CA           1299      JSR     EA_JMP_HELPER
00001AD0                          1300  
00001AD0  4EF8 1A4A               1301      JMP     EA_FINISH
00001AD4                          1302      
00001AD4                          1303  
00001AD4                          1304  EA_MOVEA:
00001AD4  14FC 0009               1305      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001AD8  41F9 000020DE           1306      LEA     EA_MODE_TABLE,A0                ;load table
00001ADE                          1307  
00001ADE                          1308      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
00001ADE                          1309      
00001ADE                          1310      ;isolate source mode
00001ADE  2800                    1311      MOVE.L  D0,D4
00001AE0  E64C                    1312      LSR.W   #3,D4
00001AE2  0244 0007               1313      ANDI.W  #$7,D4
00001AE6  C8FC 0006               1314      MULU    #6,D4
00001AEA                          1315          
00001AEA                          1316      ;isolate source register
00001AEA  2A00                    1317      MOVE.L  D0,D5
00001AEC  0245 0007               1318      ANDI.W  #$7,D5
00001AF0                          1319      
00001AF0  4EB9 000020CA           1320      JSR    EA_JMP_HELPER
00001AF6  14FC 002C               1321      MOVE.B  #',',(A2)+                      ;add ',' to buffer
00001AFA                          1322      
00001AFA                          1323      ;isolate destination mode --> SHOULD ALWAYS BE 001 AND GO TO ADDRESS REGISTER
00001AFA  2800                    1324      MOVE.L  D0,D4
00001AFC  EC4C                    1325      LSR.W   #6,D4
00001AFE  0244 0007               1326      ANDI.W  #$7,D4
00001B02  C8FC 0006               1327      MULU    #6,D4
00001B06                          1328      
00001B06                          1329      ;isolate destination register 
00001B06  2A00                    1330      MOVE.L  D0,D5
00001B08  E84D                    1331      LSR.W   #4,D5
00001B0A  EA4D                    1332      LSR.W   #5,D5                           ;HAVE TO BREAK UP SHIFT
00001B0C  0245 0007               1333      ANDI.W  #$7,D5   
00001B10  4EB9 000020CA           1334      JSR     EA_JMP_HELPER
00001B16                          1335  
00001B16  4EF8 1A4A               1336      JMP     EA_FINISH
00001B1A                          1337  
00001B1A                          1338  EA_LEA:
00001B1A  14FC 0009               1339      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001B1E  41F9 000020DE           1340      LEA     EA_MODE_TABLE,A0                ;load table
00001B24                          1341      
00001B24                          1342      ;source mode are bits 3,4,5   |         ;source register are bits 0,1,2
00001B24                          1343      
00001B24                          1344      ;isolate source mode
00001B24  2800                    1345      MOVE.L  D0,D4
00001B26  E64C                    1346      LSR.W   #3,D4
00001B28  0244 0007               1347      ANDI.W  #$7,D4
00001B2C  C8FC 0006               1348      MULU    #6,D4
00001B30                          1349          
00001B30                          1350      ;isolate source register
00001B30  2A00                    1351      MOVE.L  D0,D5
00001B32  0245 0007               1352      ANDI.W  #$7,D5
00001B36                          1353      
00001B36  4EB9 000020CA           1354      JSR    EA_JMP_HELPER
00001B3C  14FC 002C               1355      MOVE.B  #',',(A2)+                      ;add ',' to buffer
00001B40                          1356      
00001B40                          1357      ;isolate destination mode --> SHOULD ALWAYS BE 001 AND GO TO ADDRESS REGISTER
00001B40  7801                    1358      MOVE.L  #1,D4
00001B42  C8FC 0006               1359      MULU    #6,D4
00001B46                          1360      
00001B46                          1361      ;isolate destination register 
00001B46  2A00                    1362      MOVE.L  D0,D5
00001B48  E84D                    1363      LSR.W   #4,D5
00001B4A  EA4D                    1364      LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT
00001B4C  0245 0007               1365      ANDI.W  #$7,D5   
00001B50  4EB9 000020CA           1366      JSR     EA_JMP_HELPER
00001B56                          1367  
00001B56  4EF8 1A4A               1368      JMP     EA_FINISH
00001B5A                          1369  
00001B5A                          1370  EA_DESTONLY:        ;JMP, CLR   
00001B5A  4EF9 000020CE           1371      JMP     EA_UNSUPPORTED_TYPE
00001B60                          1372  
00001B60                          1373  
00001B60                          1374  EA_EXT:
00001B60  4EF9 000020CE           1375      JMP     EA_UNSUPPORTED_TYPE
00001B66                          1376  
00001B66                          1377  
00001B66                          1378  EA_MOVEM:
00001B66  14FC 0009               1379      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001B6A  41F9 000020DE           1380      LEA     EA_MODE_TABLE,A0                ;load table
00001B70                          1381      
00001B70  2200                    1382      MOVE.L  D0,D1                           ;
00001B72  341D                    1383      MOVE.W  (A5)+,D2                        ;come back and verify D2 is free!!!!!
00001B74                          1384      
00001B74                          1385      ;D1 = 4890 | D2 = 0080 (source)
00001B74                          1386      
00001B74                          1387      ;if direction (bit 10) == 0, destination is in opcode, source is in the second operand
00001B74                          1388      ;if direction (bit 10) == 1, the source is in the opcode, destination is in the operand
00001B74                          1389      
00001B74                          1390      ;check direction (bit 10)
00001B74  0241 0F00               1391      ANDI.W  #nibble2,D1
00001B78  EA49                    1392      LSR.W   #5,D1
00001B7A  EA49                    1393      LSR.W   #5,D1                           ;total of 10 shifts
00001B7C  0241 0001               1394      ANDI.W  #1,D1
00001B80  B23C 0000               1395      CMP.B   #0,D1
00001B84  6700 000A               1396      BEQ     EA_MOVEM_REG_TO_MEM
00001B88  B23C 0001               1397      CMP.B   #1,D1
00001B8C  6700 018E               1398      BEQ     EA_MOVEM_MEM_TO_REG
00001B90                          1399      
00001B90                          1400      
00001B90                          1401  ;MOVEM.W    D/A2,(A7)    
00001B90                          1402  EA_MOVEM_REG_TO_MEM:                        ;bit 10 == 0
00001B90                          1403      ;check if data register or address register
00001B90  4246                    1404      CLR     D6
00001B92  3C02                    1405      MOVE.W  D2,D6
00001B94  0246 FF00               1406      ANDI.W  #$FF00,D6                       ;isolate nibble 1 and 2
00001B98  BC7C 0000               1407      CMP.W   #0,D6                           ;check if 0
00001B9C  6700 00A4               1408      BEQ     EA_MOVEM_DATAREG_TO_MEM         ;if 0, source is data register
00001BA0                          1409      
00001BA0  3C02                    1410      MOVE.W  D2,D6
00001BA2  0246 00FF               1411      ANDI.W  #$00FF,D6
00001BA6  BC7C 0000               1412      CMP.W   #0,D6
00001BAA  6700 011E               1413      BEQ     EA_MOVEM_ADDRREG_TO_MEM         ;else it is address register
00001BAE                          1414      
00001BAE                          1415      
00001BAE                          1416      ;else, both are populated and we need to handle mixture
00001BAE                          1417      
00001BAE  2C02                    1418      MOVE.L  D2,D6
00001BB0  4247                    1419      CLR     D7
00001BB2                          1420      
00001BB2  0246 00FF               1421      ANDI.W  #$00FF,D6
00001BB6  1E3C 0000               1422      MOVE.B  #0,D7
00001BBA  4245                    1423      CLR     D5
00001BBC  4243                    1424      CLR     D3
00001BBE  4241                    1425      CLR     D1
00001BC0  6100 0266               1426      BSR     MOVEM_LOOP
00001BC4                          1427      
00001BC4  14FC 0044               1428      MOVE.B  #'D',(A2)+
00001BC8  0603 0030               1429      ADDI.B  #$30,D3
00001BCC  14C3                    1430      MOVE.B  D3,(A2)+
00001BCE                          1431      
00001BCE                          1432      
00001BCE  0605 0030               1433      ADDI.B  #$30,D5
00001BD2  4241                    1434      CLR     D1
00001BD4  323C 0000               1435      MOVE.W  #0,D1
00001BD8                          1436      
00001BD8  4EB9 00001C9C           1437      JSR MOVEM_CHECK_MULTIPLE
00001BDE                          1438      
00001BDE  14FC 002F               1439      MOVE.B  #'/',(A2)+
00001BE2                          1440      
00001BE2  2C02                    1441      MOVE.L  D2,D6
00001BE4  4247                    1442      CLR D7
00001BE6                          1443      
00001BE6  0246 FF00               1444      ANDI.W  #$FF00,D6
00001BEA  E04E                    1445      LSR.W   #8,D6
00001BEC  1E3C 0000               1446      MOVE.B  #0,D7
00001BF0  4245                    1447      CLR     D5
00001BF2  4243                    1448      CLR     D3
00001BF4  4241                    1449      CLR     D1
00001BF6  14FC 0041               1450      MOVE.B  #'A',(A2)+
00001BFA                          1451      
00001BFA  6100 022C               1452      BSR     MOVEM_LOOP
00001BFE                          1453      
00001BFE  0603 0030               1454      ADDI.B  #$30,D3
00001C02  14C3                    1455      MOVE.B  D3,(A2)+
00001C04                          1456      
00001C04  0605 0030               1457      ADDI.B  #$30,D5
00001C08  4241                    1458      CLR     D1
00001C0A  323C 0001               1459      MOVE.W  #1,D1
00001C0E                          1460      
00001C0E  4EB9 00001C9C           1461      JSR MOVEM_CHECK_MULTIPLE
00001C14                          1462      
00001C14                          1463      
00001C14                          1464      ;handle second part now
00001C14                          1465      
00001C14  14FC 002C               1466      MOVE.B  #',',(A2)+                          ;add ',' to buffer
00001C18                          1467  
00001C18  41F9 000020DE           1468      LEA     EA_MODE_TABLE,A0                    ;load table
00001C1E                          1469      
00001C1E                          1470      ;isolate source mode
00001C1E  2800                    1471      MOVE.L  D0,D4
00001C20  E64C                    1472      LSR.W   #3,D4   
00001C22  0244 0007               1473      ANDI.W  #$7,D4
00001C26                          1474      
00001C26                          1475      ;check for mode 111 -> immediate data
00001C26  B87C 0007               1476      CMP.W   #$7,D4
00001C2A                          1477      ;if immediate data, leave and get immediate data rather than another register
00001C2A  6700 022A               1478      BEQ     EA_MOVEM_IMMEDIATE_DESTINATION     
00001C2E                          1479      
00001C2E  C8FC 0006               1480      MULU    #6,D4
00001C32                          1481       
00001C32                          1482      ;isolate source register
00001C32  2A00                    1483      MOVE.L  D0,D5
00001C34  0245 0007               1484      ANDI.W  #$7,D5
00001C38                          1485      
00001C38  4EB9 000020CA           1486      JSR    EA_JMP_HELPER
00001C3E  4EF8 1A4A               1487      JMP     EA_FINISH
00001C42                          1488  
00001C42                          1489  EA_MOVEM_DATAREG_TO_MEM:    
00001C42  2C02                    1490      MOVE.L  D2,D6                               ;replenish D6 with stuff
00001C44  4247                    1491      CLR     D7
00001C46                          1492      
00001C46  1E3C 0000               1493      MOVE.B  #0,D7
00001C4A  4245                    1494      CLR D5
00001C4C  4243                    1495      CLR D3
00001C4E  4241                    1496      CLR D1
00001C50                          1497      
00001C50  14FC 0044               1498      MOVE.B  #'D',(A2)+                          ;add 'D' to buffer
00001C54  6100 01D2               1499      BSR     MOVEM_LOOP                          ;enter loop to get number
00001C58                          1500  
00001C58                          1501      ;convert d3 to ascii and add to buffer
00001C58  0603 0030               1502      ADDI.B  #$30,D3                             ;convert to ASCII
00001C5C  14C3                    1503      MOVE.B  D3,(A2)+                            ;put on buffer
00001C5E                          1504  
00001C5E                          1505      ;check d5 and handle
00001C5E  0605 0030               1506      ADDI.B  #$30,D5
00001C62                          1507      
00001C62  4241                    1508      CLR     D1
00001C64  323C 0000               1509      MOVE.W  #0,D1                               ;FLAG TO INDICATE D
00001C68                          1510      
00001C68  4EB9 00001C9C           1511      JSR     MOVEM_CHECK_MULTIPLE
00001C6E                          1512      
00001C6E  14FC 002C               1513      MOVE.B  #',',(A2)+                          ;add ',' to buffer
00001C72                          1514  
00001C72  41F9 000020DE           1515      LEA     EA_MODE_TABLE,A0                    ;load table
00001C78                          1516      
00001C78                          1517      ;isolate source mode
00001C78  2800                    1518      MOVE.L  D0,D4
00001C7A  E64C                    1519      LSR.W   #3,D4   
00001C7C  0244 0007               1520      ANDI.W  #$7,D4
00001C80                          1521      
00001C80                          1522      ;check for mode 111 -> immediate data
00001C80  B87C 0007               1523      CMP.W   #$7,D4
00001C84                          1524      ;if immediate data, leave and get immediate data rather than another register
00001C84  6700 01D0               1525      BEQ     EA_MOVEM_IMMEDIATE_DESTINATION     
00001C88                          1526      
00001C88  C8FC 0006               1527      MULU    #6,D4
00001C8C                          1528       
00001C8C                          1529      ;isolate source register
00001C8C  2A00                    1530      MOVE.L  D0,D5
00001C8E  0245 0007               1531      ANDI.W  #$7,D5
00001C92                          1532      
00001C92  4EB9 000020CA           1533      JSR    EA_JMP_HELPER
00001C98  4EF8 1A4A               1534      JMP     EA_FINISH
00001C9C                          1535  
00001C9C                          1536  
00001C9C                          1537      
00001C9C                          1538  MOVEM_CHECK_MULTIPLE:
00001C9C  BA43                    1539      CMP     D3,D5
00001C9E  6600 0004               1540      BNE     MOVEM_MULTIPLE
00001CA2  4E75                    1541      RTS
00001CA4                          1542      
00001CA4                          1543  MOVEM_MULTIPLE:
00001CA4  14FC 002D               1544      MOVE.B  #'-',(A2)+                          ;add '-' to buffer
00001CA8                          1545      ;CHECK D1 FOR A OR D
00001CA8  B27C 0000               1546      CMP.W   #0,D1                               ;check if 0 --> D
00001CAC  6700 000C               1547      BEQ     MOVEM_MULTIPLE_D
00001CB0  B27C 0001               1548      CMP.W   #1,D1
00001CB4  6700 000C               1549      BEQ     MOVEM_MULTIPLE_A
00001CB8                          1550  
00001CB8  4E75                    1551      RTS
00001CBA                          1552  
00001CBA                          1553  MOVEM_MULTIPLE_D:
00001CBA  14FC 0044               1554      MOVE.B  #'D',(A2)+                          ;add 'D' to buffer
00001CBE  14C5                    1555      MOVE.B  D5,(A2)+                            ;put on buffer
00001CC0  4E75                    1556      RTS
00001CC2                          1557  
00001CC2                          1558  MOVEM_MULTIPLE_A:
00001CC2  14FC 0041               1559      MOVE.B  #'A',(A2)+                          ;add 'D' to buffer
00001CC6  14C5                    1560      MOVE.B  D5,(A2)+                            ;put on buffer
00001CC8  4E75                    1561      RTS
00001CCA                          1562  
00001CCA                          1563  EA_MOVEM_ADDRREG_TO_MEM:
00001CCA  2C02                    1564      MOVE.L  D2,D6                               ;replenish D6 with stuff
00001CCC  4247                    1565      CLR     D7
00001CCE                          1566      
00001CCE  1E3C 0000               1567      MOVE.B  #0,D7
00001CD2  4245                    1568      CLR D5
00001CD4  4243                    1569      CLR D3
00001CD6  4241                    1570      CLR D1
00001CD8                          1571      
00001CD8  14FC 0041               1572      MOVE.B  #'A',(A2)+                          ;add 'A' to buffer
00001CDC  E04E                    1573      LSR.W   #8,D6                               ;shift 8 times
00001CDE  6100 0148               1574      BSR     MOVEM_LOOP                          ;enter loop to get number
00001CE2                          1575      
00001CE2                          1576      ;convert d3 to ascii and add to buffer
00001CE2  0603 0030               1577      ADDI.B  #$30,D3                             ;convert to ASCII
00001CE6  14C3                    1578      MOVE.B  D3,(A2)+                            ;put on buffer
00001CE8                          1579      
00001CE8  0605 0030               1580      ADDI.B  #$30,D5
00001CEC                          1581      
00001CEC  4241                    1582      CLR     D1
00001CEE  323C 0001               1583      MOVE.W  #1,D1                               ;FLAG TO INDICATE A
00001CF2                          1584      
00001CF2  4EB8 1C9C               1585      JSR MOVEM_CHECK_MULTIPLE
00001CF6                          1586      
00001CF6  14FC 002C               1587      MOVE.B  #',',(A2)+                          ;add ',' to buffer
00001CFA                          1588      
00001CFA  41F9 000020DE           1589      LEA     EA_MODE_TABLE,A0                    ;load table
00001D00                          1590      
00001D00                          1591      ;isolate source mode
00001D00  2800                    1592      MOVE.L  D0,D4
00001D02  E64C                    1593      LSR.W   #3,D4
00001D04  0244 0007               1594      ANDI.W  #$7,D4
00001D08  C8FC 0006               1595      MULU    #6,D4
00001D0C                          1596          
00001D0C                          1597      ;isolate source register
00001D0C  2A00                    1598      MOVE.L  D0,D5
00001D0E  0245 0007               1599      ANDI.W  #$7,D5
00001D12                          1600      
00001D12  4EB9 000020CA           1601      JSR    EA_JMP_HELPER
00001D18  4EF8 1A4A               1602      JMP     EA_FINISH
00001D1C                          1603  
00001D1C                          1604  ;MOVEM.W (A7),D/A2
00001D1C                          1605  EA_MOVEM_MEM_TO_REG:                            ;bit 10 == 1
00001D1C  41F9 000020DE           1606      LEA     EA_MODE_TABLE,A0                    ;load table
00001D22                          1607      
00001D22                          1608      ;isolate source mode
00001D22  2800                    1609      MOVE.L  D0,D4
00001D24  E64C                    1610      LSR.W   #3,D4
00001D26  0244 0007               1611      ANDI.W  #$7,D4
00001D2A                          1612  
00001D2A                          1613      ;check for mode 111 -> immediate data
00001D2A  B87C 0007               1614      CMP.W   #$7,D4
00001D2E                          1615      ;if immediate data, leave and get immediate data rather than another register
00001D2E  6700 0136               1616      BEQ     EA_MOVEM_IMMEDIATE_SOURCE
00001D32                          1617  
00001D32  C8FC 0006               1618      MULU    #6,D4
00001D36                          1619          
00001D36                          1620      ;isolate source register
00001D36  2A00                    1621      MOVE.L  D0,D5
00001D38  0245 0007               1622      ANDI.W  #$7,D5
00001D3C                          1623  
00001D3C  4EB9 000020CA           1624      JSR    EA_JMP_HELPER
00001D42  14FC 002C               1625      MOVE.B  #',',(A2)+                          ;add ',' to buffer
00001D46                          1626      
00001D46                          1627      ;our operand is in D2
00001D46  4246                    1628      CLR     D6
00001D48  3C02                    1629      MOVE.W  D2,D6
00001D4A  0246 FF00               1630      ANDI.W  #$FF00,D6                           ;isolate nibble 1 and 2
00001D4E  BC7C 0000               1631      CMP.W   #0,D6                               ;check if 0
00001D52  6700 0076               1632      BEQ     EA_MOVEM_MEM_TO_DATAREG             ;if 0, source is data register
00001D56                          1633      
00001D56  3C02                    1634      MOVE.W  D2,D6
00001D58  0246 00FF               1635      ANDI.W  #$00FF,D6 
00001D5C  BC7C 0000               1636      CMP.W   #0,D6
00001D60  6700 0096               1637      BEQ     EA_MOVEM_MEM_TO_ADDRREG             ;else it is address register
00001D64                          1638  
00001D64                          1639      ;else, both are populated and we need to handle mixture (D7/A5)
00001D64  2C02                    1640      MOVE.L  D2,D6                               ;replenish D6 with stuff
00001D66  4247                    1641      CLR     D7
00001D68                          1642  
00001D68  0246 00FF               1643      ANDI.W  #$00FF,D6                           ;work on first half
00001D6C  1E3C 0000               1644      MOVE.B  #0,D7
00001D70  4245                    1645      CLR D5
00001D72  4243                    1646      CLR D3
00001D74  4241                    1647      CLR D1
00001D76  14FC 0044               1648      MOVE.B  #'D',(A2)+                          ;add 'D' to buffer
00001D7A  6100 00AC               1649      BSR     MOVEM_LOOP                          ;enter loop to get number
00001D7E                          1650      ;convert d7 to ascii and add to buffer
00001D7E  0603 0030               1651      ADDI.B  #$30,D3                             ;convert to ASCII
00001D82  14C3                    1652      MOVE.B  D3,(A2)+                            ;put on buffer
00001D84                          1653      ;check multiple
00001D84  0605 0030               1654      ADDI.B  #$30,D5
00001D88  4241                    1655      CLR     D1
00001D8A  323C 0000               1656      MOVE.W  #0,D1                               ;FLAG TO INDICATE D
00001D8E                          1657      
00001D8E  4EB8 1C9C               1658      JSR MOVEM_CHECK_MULTIPLE
00001D92                          1659  
00001D92  14FC 002F               1660      MOVE.B  #'/',(A2)+                          ;add '/' to buffer
00001D96                          1661  
00001D96  2C02                    1662      MOVE.L  D2,D6                               ;replenish D6 with stuff
00001D98  4247                    1663      CLR     D7
00001D9A                          1664  
00001D9A  0246 FF00               1665      ANDI.W  #$FF00,D6                           ;work on FIRST half
00001D9E  E04E                    1666      LSR.W   #8,D6                               ;shift 8 times
00001DA0  1E3C 0000               1667      MOVE.B  #0,D7
00001DA4  4245                    1668      CLR D5
00001DA6  4243                    1669      CLR D3
00001DA8  4241                    1670      CLR D1
00001DAA  14FC 0041               1671      MOVE.B  #'A',(A2)+                          ;add 'A' to buffer
00001DAE  6100 0078               1672      BSR     MOVEM_LOOP                          ;enter loop to get number
00001DB2                          1673      ;convert d7 to ascii and add to buffer
00001DB2  0603 0030               1674      ADDI.B  #$30,D3                             ;convert to ASCII
00001DB6  14C3                    1675      MOVE.B  D3,(A2)+                            ;put on buffer
00001DB8                          1676      ;check multiple
00001DB8  0605 0030               1677      ADDI.B  #$30,D5
00001DBC  4241                    1678      CLR     D1
00001DBE  323C 0001               1679      MOVE.W  #1,D1                               ;FLAG TO INDICATE A
00001DC2                          1680      
00001DC2  4EB8 1C9C               1681      JSR MOVEM_CHECK_MULTIPLE
00001DC6                          1682  
00001DC6  4EF8 1A4A               1683      JMP     EA_FINISH    
00001DCA                          1684          
00001DCA                          1685  EA_MOVEM_MEM_TO_DATAREG: 
00001DCA  2C02                    1686      MOVE.L  D2,D6                               ;replenish D6 with stuff
00001DCC  4247                    1687      CLR     D7
00001DCE                          1688      
00001DCE  1E3C 0000               1689      MOVE.B  #0,D7
00001DD2  4245                    1690      CLR D5
00001DD4  4243                    1691      CLR D3
00001DD6  4241                    1692      CLR D1
00001DD8                          1693      
00001DD8  14FC 0044               1694      MOVE.B  #'D',(A2)+                          ;add 'D' to buffer
00001DDC  6100 004A               1695      BSR     MOVEM_LOOP                          ;enter loop to get number
00001DE0                          1696      
00001DE0                          1697      ;convert d7 to ascii and add to buffer
00001DE0  0603 0030               1698      ADDI.B  #$30,D3                             ;convert to ASCII
00001DE4  14C3                    1699      MOVE.B  D3,(A2)+                            ;put on buffer
00001DE6                          1700  
00001DE6                          1701      ;check multiple
00001DE6  0605 0030               1702      ADDI.B  #$30,D5
00001DEA                          1703      
00001DEA  4241                    1704      CLR     D1
00001DEC  323C 0000               1705      MOVE.W  #0,D1                               ;FLAG TO INDICATE D
00001DF0                          1706      
00001DF0  4EB8 1C9C               1707      JSR MOVEM_CHECK_MULTIPLE
00001DF4                          1708  
00001DF4  4EF8 1A4A               1709      JMP     EA_FINISH
00001DF8                          1710     
00001DF8                          1711  EA_MOVEM_MEM_TO_ADDRREG:
00001DF8  2C02                    1712      MOVE.L  D2,D6                               ;replenish D6 with stuff
00001DFA  4247                    1713      CLR     D7  
00001DFC                          1714      
00001DFC  1E3C 0000               1715      MOVE.B  #0,D7
00001E00  4245                    1716      CLR D5
00001E02  4243                    1717      CLR D3
00001E04  4241                    1718      CLR D1
00001E06                          1719         
00001E06  14FC 0041               1720      MOVE.B  #'A',(A2)+                          ;add 'A' to buffer
00001E0A  E04E                    1721      LSR.W   #8,D6                               ;shift 8 times
00001E0C  6100 001A               1722      BSR     MOVEM_LOOP                          ;enter loop to get number
00001E10                          1723      
00001E10                          1724      ;convert d7 to ascii and add to buffer
00001E10  0603 0030               1725      ADDI.B  #$30,D3                             ;convert to ASCII
00001E14  14C3                    1726      MOVE.B  D3,(A2)+                            ;put on buffer
00001E16                          1727  
00001E16                          1728      ;check multiple   
00001E16  0605 0030               1729      ADDI.B  #$30,D5 
00001E1A  4241                    1730      CLR     D1
00001E1C  323C 0001               1731      MOVE.W  #1,D1                               ;FLAG TO INDICATE A
00001E20                          1732      
00001E20  4EB8 1C9C               1733      JSR MOVEM_CHECK_MULTIPLE
00001E24                          1734  
00001E24  4EF8 1A4A               1735      JMP     EA_FINISH
00001E28                          1736  
00001E28                          1737  MOVEM_LOOP  
00001E28                          1738      ;D1 = min_set_flag (0 = not set, 1 = set) | D3 = MIN | D5 = MAX | D7 = COUNTER (STARTS AT 0)
00001E28                          1739      ;D6 = OUR SECOND OPERAND
00001E28                          1740       
00001E28  E24E                    1741      LSR.W   #1,D6               ;1000
00001E2A  6500 000C               1742      BCS     MOVEM_CARRY
00001E2E  5247                    1743      ADDI.W  #1,D7
00001E30  BE7C 0008               1744      CMP     #8,D7
00001E34  6FF2                    1745      BLE     MOVEM_LOOP
00001E36  4E75                    1746      RTS
00001E38                          1747  
00001E38                          1748  MOVEM_CARRY:
00001E38  B27C 0000               1749      CMP         #0,D1
00001E3C  6700 000A               1750      BEQ         MOVEM_SET_MIN
00001E40                          1751      
00001E40  3A07                    1752      MOVE.W      D7,D5
00001E42  5247                    1753      ADDI.W      #1,D7  
00001E44  4EF8 1E28               1754      JMP         MOVEM_LOOP
00001E48                          1755  
00001E48                          1756  MOVEM_SET_MIN:
00001E48  3607                    1757      MOVE.W      D7,D3           ;set min
00001E4A  3A07                    1758      MOVE.W      D7,D5           ;set max
00001E4C  323C 0001               1759      MOVE.W      #1,D1           ;set flag
00001E50  5247                    1760      ADDI.W      #1,D7  
00001E52  4EF8 1E28               1761      JMP         MOVEM_LOOP
00001E56                          1762  
00001E56                          1763  
00001E56                          1764  
00001E56                          1765  EA_MOVEM_IMMEDIATE_DESTINATION:
00001E56                          1766      ;GET NEXT WORD VALUE AT A5 AND INCREMENT
00001E56  3E15                    1767      MOVE.W  (A5),D7                             ;immediate value is in D7 now
00001E58  14FC 0024               1768      MOVE.B  #'$',(A2)+                          ;add '$' to buffer
00001E5C                          1769      
00001E5C                          1770      ;convert to ascii and put on buffer
00001E5C  4EB9 0000225A           1771      JSR     EA_ITOA_WORD
00001E62                          1772  
00001E62  4EF8 1A4A               1773      JMP     EA_FINISH
00001E66                          1774  
00001E66                          1775  EA_MOVEM_IMMEDIATE_SOURCE:
00001E66                          1776      ;GET NEXT WORD VALUE AT A5 AND INCREMENT
00001E66  3E15                    1777      MOVE.W  (A5),D7                             ;immediate value is in D7 now
00001E68  14FC 0024               1778      MOVE.B  #'$',(A2)+                          ;add '$' to buffer
00001E6C                          1779      
00001E6C                          1780      ;convert to ascii and put on buffer
00001E6C  4EB9 0000225A           1781      JSR     EA_ITOA_WORD
00001E72                          1782  
00001E72  14FC 002C               1783      MOVE.B  #',',(A2)+                          ;add ',' to buffer
00001E76                          1784      
00001E76                          1785      ;our operand is in D2
00001E76  4246                    1786      CLR     D6
00001E78  3C02                    1787      MOVE.W  D2,D6
00001E7A  0246 FF00               1788      ANDI.W  #$FF00,D6                           ;isolate nibble 1 and 2
00001E7E  BC7C 0000               1789      CMP.W   #0,D6                               ;check if 0
00001E82  6700 FF46               1790      BEQ     EA_MOVEM_MEM_TO_DATAREG             ;if 0, source is data register
00001E86  6000 FF70               1791      BRA     EA_MOVEM_MEM_TO_ADDRREG             ;else it is address register
00001E8A                          1792  
00001E8A                          1793  EA_TRAP:
00001E8A  4EF9 000020CE           1794      JMP     EA_UNSUPPORTED_TYPE
00001E90                          1795  
00001E90                          1796  EA_QUICK:
00001E90                          1797      ;ADDQ/SUBQ  -->  opcode = 0101 (stored in D0)
00001E90                          1798      ;MOVEQ      -->  opcode = 0111 (stored in D0)
00001E90  14FC 0009               1799      MOVE.B  #$09, (A2)+                         ;adds a ' ' to buffer
00001E94  14FC 0023               1800      MOVE.B  #'#',(A2)+                          ;add a # to buffer
00001E98  14FC 0024               1801      MOVE.B  #'$',(A2)+                          ;add a $ to buffer
00001E9C                          1802      
00001E9C  2200                    1803      MOVE.L  D0,D1                               ;should move into D1
00001E9E                          1804      
00001E9E                          1805      ;check for MOVEQ
00001E9E  EC49                    1806      LSR.W   #right6,D1
00001EA0  EC49                    1807      LSR.W   #right6,D1  
00001EA2  B27C 0007               1808      CMP.W   #$7,D1
00001EA6  6700 003A               1809      BEQ     EA_QUICK_MOVEQ
00001EAA                          1810      
00001EAA  4241                    1811      CLR     D1                                  ;else not MOVEQ, reset D1 and continue with ADDQ / SUBQ
00001EAC  2200                    1812      MOVE.L  D0,D1
00001EAE  0241 0E00               1813      ANDI.W  #dest_reg,D1                        ;isolate destination register(11,10,9)
00001EB2  E049                    1814      LSR.W   #right8,D1                          ;shift 8 times
00001EB4  E249                    1815      LSR.W   #right1,D1                          ;shift 1 time for total of 9 times
00001EB6                          1816      
00001EB6                          1817      ;at this point we have our number, so convert to ASCII and put on buffer
00001EB6  0601 0030               1818      ADDI.B  #$30,D1                             ;convert to ASCII
00001EBA  14C1                    1819      MOVE.B  D1,(A2)+                            ;put on buffer
00001EBC                          1820      
00001EBC                          1821      
00001EBC                          1822      ;ready for destination address
00001EBC  14FC 002C               1823      MOVE.B  #',',(A2)+                          ;add ',' to buffer  
00001EC0  41F9 000020DE           1824      LEA     EA_MODE_TABLE,A0                    ;load table
00001EC6                          1825      
00001EC6                          1826      
00001EC6                          1827      ;isolate source mode
00001EC6  2800                    1828      MOVE.L  D0,D4
00001EC8  E64C                    1829      LSR.W   #3,D4
00001ECA  0244 0007               1830      ANDI.W  #$7,D4
00001ECE  C8FC 0006               1831      MULU    #6,D4
00001ED2                          1832          
00001ED2                          1833      ;isolate source register
00001ED2  2A00                    1834      MOVE.L  D0,D5
00001ED4  0245 0007               1835      ANDI.W  #$7,D5
00001ED8                          1836      
00001ED8  4EB9 000020CA           1837      JSR    EA_JMP_HELPER
00001EDE                          1838      
00001EDE  4EF8 1A4A               1839      JMP     EA_FINISH
00001EE2                          1840  
00001EE2                          1841  EA_QUICK_MOVEQ:
00001EE2  2200                    1842      MOVE.L  D0,D1
00001EE4  0241 00FF               1843      ANDI.W  #$00FF,D1                   ;isolate bits 7-0
00001EE8                          1844      
00001EE8                          1845      ;our bits are isolated in D1, move to D7 for ITOA function
00001EE8  2E01                    1846      MOVE.L  D1,D7
00001EEA  4EB9 00002298           1847      JSR     EA_ITOA_BYTE_CONVERT
00001EF0                          1848      
00001EF0  14FC 002C               1849      MOVE.B  #',',(A2)+                  ;add ',' to buffer
00001EF4  14FC 0044               1850      MOVE.B  #'D',(A2)+                  ;add ',' to buffer
00001EF8  2200                    1851      MOVE.L  D0,D1
00001EFA  0241 0F00               1852      ANDI.W  #nibble2,D1
00001EFE  E049                    1853      LSR.W   #8,D1
00001F00  E249                    1854      LSR.W   #1,D1
00001F02                          1855      
00001F02                          1856      ;at this point we have our number, so convert to ASCII and put on buffer
00001F02  0601 0030               1857      ADDI.B  #$30,D1                     ;convert to ASCII
00001F06  14C1                    1858      MOVE.B  D1,(A2)+                    ;put on buffer
00001F08                          1859  
00001F08  4EF8 1A4A               1860      JMP     EA_FINISH
00001F0C                          1861  
00001F0C                          1862  EA_BRANCH:
00001F0C                          1863      ;PROGRAM COUNTER @ A5
00001F0C                          1864      ;BRA or BSR
00001F0C                          1865      ;displacement bits are 7-0 
00001F0C  2200                    1866      MOVE.L  D0,D1
00001F0E  0241 00FF               1867      ANDI.W  #$00FF,D1                   ;isolate bits 7-0
00001F12                          1868      ;PERFORM CHECKS 0000 0000 = WORD VALUE, 1111 1111 = LONG VALUE
00001F12                          1869      
00001F12  B23C 0000               1870      CMP.B   #$00,D1
00001F16  6700 0086               1871      BEQ     EA_BRANCH_16
00001F1A                          1872      
00001F1A                          1873      ;if not 0
00001F1A  B23C 00FF               1874      CMP.B   #$FF,D1
00001F1E  6700 0096               1875      BEQ     EA_BRANCH_32
00001F22                          1876      
00001F22                          1877      ;OTHERWISE... HANDLE 8-BITDISPLACEMENT IN OPCODE!    
00001F22  2200                    1878      MOVE.L  D0,D1
00001F24  0241 00FF               1879      ANDI.W  #$00FF,D1    
00001F28  6000 0002               1880      BRA     EA_BRANCH_8_BIT_DISPLACEMENT
00001F2C                          1881      
00001F2C                          1882  
00001F2C                          1883  EA_BRANCH_8_BIT_DISPLACEMENT:
00001F2C                          1884      ;D0,D1 HAVE OPCODE
00001F2C  EE49                    1885      LSR     #7,D1
00001F2E                          1886      
00001F2E  B23C 0000               1887      CMP.B   #0,D1
00001F32  6700 0006               1888      BEQ     EA_BRANCH_POSITIVE              ;bit = 0
00001F36  6000 001A               1889      BRA     EA_BRANCH_NEGATIVE              ;bit = 1
00001F3A                          1890  
00001F3A                          1891  EA_BRANCH_POSITIVE:
00001F3A  2200                    1892      MOVE.L  D0,D1
00001F3C                          1893      
00001F3C  0241 00FF               1894      ANDI.W  #$00FF,D1                       ;isolate displacement
00001F40  3E0D                    1895      MOVE.W  A5,D7                           ;current address    
00001F42  DE41                    1896      ADD     D1,D7                           ;add    
00001F44  14FC 0009               1897      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001F48                          1898      
00001F48  4EB9 00001F6C           1899      JSR     EA_BRANCH_ITOA_HELPER
00001F4E  4EF8 1A4A               1900      JMP     EA_FINISH
00001F52                          1901  
00001F52                          1902  EA_BRANCH_NEGATIVE:
00001F52  2200                    1903      MOVE.L  D0,D1
00001F54  0241 00FF               1904      ANDI.W  #$00FF,D1
00001F58  4401                    1905      NEG.B   D1  
00001F5A                          1906      
00001F5A  3E0D                    1907      MOVE.W  A5,D7
00001F5C  9E41                    1908      SUB     D1,D7
00001F5E                          1909  
00001F5E  14FC 0009               1910      MOVE.B  #$09, (A2)+                     ;adds a ' ' to buffer
00001F62                          1911  
00001F62  4EB9 00001F6C           1912      JSR     EA_BRANCH_ITOA_HELPER
00001F68  4EF8 1A4A               1913      JMP     EA_FINISH
00001F6C                          1914  
00001F6C                          1915  EA_BRANCH_ITOA_HELPER:
00001F6C  2407                    1916      MOVE.L  D7,D2                           ;PRESERVE COPY
00001F6E  E04F                    1917      LSR.W   #right8,D7
00001F70  E04F                    1918      LSR.W   #right8,D7
00001F72  E04F                    1919      LSR.W   #right8,D7
00001F74  4EB9 00002298           1920      JSR     EA_ITOA_BYTE_CONVERT
00001F7A                          1921  
00001F7A  2E02                    1922      MOVE.L  D2,D7
00001F7C  E04F                    1923      LSR.W   #right8,D7
00001F7E  E04F                    1924      LSR.W   #right8,D7    
00001F80  4EB9 00002298           1925      JSR     EA_ITOA_BYTE_CONVERT
00001F86                          1926  
00001F86  2E02                    1927      MOVE.L  D2,D7
00001F88  E04F                    1928      LSR.W   #right8,D7
00001F8A  4EB9 00002298           1929      JSR     EA_ITOA_BYTE_CONVERT
00001F90                          1930  
00001F90  2E02                    1931      MOVE.L  D2,D7
00001F92  4EB9 00002298           1932      JSR     EA_ITOA_BYTE_CONVERT
00001F98                          1933  
00001F98  4EF9 000022D0           1934      JMP     EA_ITOA_DONE
00001F9E                          1935  
00001F9E                          1936  EA_BRANCH_16:
00001F9E  3215                    1937      MOVE.W  (A5),D1 
00001FA0  3E01                    1938      MOVE.W  D1,D7
00001FA2  DE4D                    1939      ADD.W   A5,D7
00001FA4                          1940      
00001FA4  14FC 0009               1941      MOVE.B  #$09, (A2)+                             ;adds a ' ' to buffer
00001FA8  14FC 0024               1942      MOVE.B  #'$',(A2)+                              ;add '$' to buffer
00001FAC                          1943      
00001FAC                          1944      ;convert to ASCII and put on buffer
00001FAC                          1945      ;D7 HAS DISPLACEMENT   
00001FAC  4EB9 00001FB6           1946      JSR     BRANCH_16_ITOA
00001FB2                          1947      
00001FB2  4EF8 1A4A               1948      JMP     EA_FINISH
00001FB6                          1949  
00001FB6                          1950  EA_BRANCH_32:
00001FB6                          1951      ;come back and implement branch 32
00001FB6                          1952  
00001FB6                          1953  
00001FB6                          1954  
00001FB6                          1955  BRANCH_16_ITOA:
00001FB6                          1956      ;D7 HAS OUR DISPLACEMENT... CONVERT TO ASCII!   
00001FB6  E04F                    1957      LSR.W   #right8,D7                             
00001FB8  4EB9 00002298           1958      JSR     EA_ITOA_BYTE_CONVERT                    
00001FBE  3E1D                    1959      MOVE.W  (A5)+,D7                               
00001FC0  DE4D                    1960      ADD.W   A5,D7                                 
00001FC2  5507                    1961      SUBI.B  #2,D7                                   ;SUBI 2 to account for post increment of A5
00001FC4  0247 00FF               1962      ANDI.W  #$00FF,D7                              
00001FC8  4EB9 00002298           1963      JSR     EA_ITOA_BYTE_CONVERT          
00001FCE                          1964      
00001FCE  4EF9 000022D0           1965      JMP     EA_ITOA_DONE
00001FD4                          1966  
00001FD4                          1967  
00001FD4                          1968  EA_MATH:
00001FD4                          1969      ;source mode 3, 4, 5 | source register 0, 1, 2 | destination register 11, 10, 9
00001FD4  14FC 0009               1970      MOVE.B  #$09, (A2)+                             ;add a ' ' to buffer
00001FD8  41F9 000020DE           1971      LEA     EA_MODE_TABLE,A0                        ;load mode table
00001FDE                          1972      
00001FDE                          1973      ;isolate source mode
00001FDE  2800                    1974      MOVE.L  D0,D4
00001FE0  E64C                    1975      LSR.W   #3,D4
00001FE2  0244 0007               1976      ANDI.W  #$7,D4
00001FE6  C8FC 0006               1977      MULU    #6,D4
00001FEA                          1978      
00001FEA                          1979      ;isolate source register
00001FEA  2A00                    1980      MOVE.L  D0,D5
00001FEC  0245 0007               1981      ANDI.W  #$7,D5
00001FF0                          1982      
00001FF0  4EB9 000020CA           1983      JSR     EA_JMP_HELPER
00001FF6                          1984      
00001FF6  14FC 002C               1985      MOVE.B  #',',(A2)+                              ;add a ',' to buffer
00001FFA                          1986      
00001FFA                          1987      ;condition for ADDA - opcode == 1101 && bits 7,6 == 11
00001FFA                          1988      ;check for ADDA and leave if yes, otherwise continue
00001FFA  2200                    1989      MOVE.L  D0,D1                                   ;complete opcode in D1
00001FFC  EC49                    1990      LSR.W   #6,D1                                   ;shift right 6
00001FFE  EC49                    1991      LSR.W   #6,D1                                   ;shift another 6 to = 12 total
00002000                          1992      
00002000  B27C 000D               1993      CMP     #$D,D1                                  ;check if opcode = 1101
00002004  6600 002C               1994      BNE     EA_MATH_CONTINUE                        ;if not 1101, skip and go to math
00002008                          1995      
00002008                          1996      ;if we are here, we know opcode is 1101 and further check
00002008  2200                    1997      MOVE.L  D0,D1
0000200A  EC49                    1998      LSR.W   #6,D1
0000200C  0241 0003               1999      ANDI.W  #3,D1
00002010  B23C 0003               2000      CMP.B   #3,D1
00002014  6600 001C               2001      BNE     EA_MATH_CONTINUE
00002018                          2002      
00002018                          2003      ;if d1 == 3, both conditions met so process as ADDA
00002018                          2004      ;destination mode is 1 (address register)
00002018  7801                    2005      MOVE.L  #1,D4
0000201A  C8FC 0006               2006      MULU    #6,D4
0000201E                          2007      
0000201E                          2008      ;isolate destination register 
0000201E  2A00                    2009      MOVE.L  D0,D5
00002020  E84D                    2010      LSR.W   #4,D5
00002022  EA4D                    2011      LSR.W   #5,D5                      
00002024  0245 0007               2012      ANDI.W  #$7,D5   
00002028                          2013   
00002028  4EB9 000020CA           2014      JSR     EA_JMP_HELPER 
0000202E  4EF8 1A4A               2015      JMP     EA_FINISH
00002032                          2016          
00002032                          2017  EA_MATH_CONTINUE:       
00002032                          2018      ;destination mode is 0 (data register)
00002032  7800                    2019      MOVE.L  #0,D4
00002034  C8FC 0006               2020      MULU    #6,D4
00002038                          2021      
00002038                          2022      ;isolate destination register 
00002038  2A00                    2023      MOVE.L  D0,D5
0000203A  E84D                    2024      LSR.W   #4,D5
0000203C  EA4D                    2025      LSR.W   #5,D5                      
0000203E  0245 0007               2026      ANDI.W  #$7,D5  
00002042                          2027      
00002042  4EB9 000020CA           2028      JSR     EA_JMP_HELPER 
00002048  4EF8 1A4A               2029      JMP     EA_FINISH
0000204C                          2030      
0000204C                          2031  
0000204C                          2032  EA_ROTATION:
0000204C  14FC 0009               2033      MOVE.B  #$09, (A2)+                             ;adds a ' ' to buffer
00002050  2200                    2034      MOVE.L  D0,D1                                   ;complete opcode
00002052                          2035      
00002052  0241 00FF               2036      ANDI.W  #$00FF,D1
00002056  EC49                    2037      LSR.W   #6,D1
00002058  B27C 0003               2038      CMP     #3,D1
0000205C  6700 0016               2039      BEQ     EA_ROTATION_MODE_7
00002060                          2040      
00002060  2200                    2041      MOVE.L  D0,D1
00002062  EA49                    2042      LSR.W   #5,D1                                   ;shift right 5
00002064  0241 0001               2043      ANDI.W  #1,D1
00002068                          2044      
00002068  B27C 0000               2045      CMP     #0,D1
0000206C  6700 0050               2046      BEQ     EA_ROTATION_IMMEDIATE                   ;it is immediate value
00002070  6000 0052               2047      BRA     EA_ROTATION_REGISTER                    ;else register 
00002074                          2048      
00002074                          2049  EA_ROTATION_MODE_7:
00002074                          2050      ;WE KNOW IT IS MODE 7 - CHECK FOR IMMEDIATE SHORT OR IMMEDIATE LONG
00002074  2200                    2051      MOVE.L  D0,D1
00002076  0241 0007               2052      ANDI.W  #7,D1
0000207A  B27C 0000               2053      CMP.W   #0,D1   
0000207E  6700 000C               2054      BEQ     EA_111_ABSOLUTE_SHORT_HELPER
00002082  4EB9 000021D0           2055      JSR     EA_111_ABSOLUTE_LONG   
00002088  4EF8 1A4A               2056      JMP     EA_FINISH
0000208C                          2057  
0000208C                          2058  EA_111_ABSOLUTE_SHORT_HELPER:
0000208C  4EB9 000021BC           2059      JSR     EA_111_ABSOLUTE_SHORT
00002092  4EF8 1A4A               2060      JMP     EA_FINISH
00002096                          2061  
00002096                          2062  EA_ROTATION_CONTINUE:
00002096  2200                    2063      MOVE.L  D0,D1                                   ;get rotation value
00002098  0241 0F00               2064      ANDI.W  #nibble2,D1                             ;isolate nibble 2
0000209C  E049                    2065      LSR.W   #8,D1
0000209E  E249                    2066      LSR.W   #1,D1                                   ;total of 9 shifts right
000020A0                          2067      
000020A0                          2068      ;at this point we have our number, so convert to ASCII and put on buffer
000020A0  0601 0030               2069      ADDI.B  #$30,D1                                 ;convert to ASCII
000020A4  14C1                    2070      MOVE.B  D1,(A2)+                                ;put on buffer
000020A6                          2071      
000020A6  14FC 002C               2072      MOVE.B  #',',(A2)+                              ;add ',' to buffer 
000020AA  14FC 0044               2073      MOVE.B  #'D',(A2)+                              ;add 'D' to buffer
000020AE                          2074      
000020AE  2200                    2075      MOVE.L  D0,D1                                   ;complete opcode
000020B0  0241 0007               2076      ANDI.W  #7,D1                       
000020B4                          2077      
000020B4  0601 0030               2078      ADDI.B  #$30,D1                                 ;convert to ASCII
000020B8  14C1                    2079      MOVE.B  D1,(A2)+                                ;put on buffer
000020BA                          2080      
000020BA  4EF8 1A4A               2081      JMP     EA_FINISH                       
000020BE                          2082  
000020BE                          2083  EA_ROTATION_IMMEDIATE:
000020BE  14FC 0023               2084      MOVE.B  #'#',(A2)+                              ;add '#' to buffer
000020C2  60D2                    2085      BRA     EA_ROTATION_CONTINUE
000020C4                          2086      
000020C4                          2087  EA_ROTATION_REGISTER:
000020C4  14FC 0044               2088      MOVE.B  #'D',(A2)+                              ;add 'D' to buffer
000020C8  60CC                    2089      BRA     EA_ROTATION_CONTINUE
000020CA                          2090      
000020CA                          2091  EA_JMP_HELPER
000020CA  4EF0 4000               2092      JMP     0(A0,D4)
000020CE                          2093  
000020CE                          2094  EA_UNSUPPORTED_TYPE:
000020CE                          2095      ;print error message
000020CE  103C 000E               2096      MOVE.B  #14,D0
000020D2  43F9 0000257E           2097      LEA     unsupported_ea_type,A1
000020D8  4E4F                    2098      TRAP    #15
000020DA                          2099      
000020DA                          2100      ;return to start of program
000020DA  4EF8 1012               2101      JMP     GET_STARTING_ADDRESS
000020DE                          2102  
000020DE                          2103  
000020DE                          2104  ;********************************************  EA_MODE_TABLE  ****************************************************  
000020DE                          2105  EA_MODE_TABLE:
000020DE  4EF9 0000210E           2106      JMP     EA_MODE_000
000020E4  4EF9 0000211C           2107      JMP     EA_MODE_001
000020EA  4EF9 0000212A           2108      JMP     EA_MODE_010
000020F0  4EF9 00002140           2109      JMP     EA_MODE_011
000020F6  4EF9 0000215A           2110      JMP     EA_MODE_100
000020FC  4EF9 00002174           2111      JMP     EA_MODE_101
00002102  4EF9 00002184           2112      JMP     EA_MODE_110
00002108  4EF9 00002194           2113      JMP     EA_MODE_111
0000210E                          2114      ;JMP     EA_MODE_FINISH
0000210E                          2115  
0000210E                          2116  ;********************************************  EA_MODE_XXX  ****************************************************    
0000210E                          2117  EA_MODE_000:                                        ;Data register 'Dn'
0000210E  14FC 0044               2118      MOVE.B  #'D',(A2)+                              ;put D on buffer
00002112  1605                    2119      MOVE.B D5,D3                                    ;move to d3 for conversion
00002114  4EB9 00002204           2120      JSR     EA_HEX_TO_ASCII                         ;puts register on buffer  
0000211A  4E75                    2121      RTS
0000211C                          2122      
0000211C                          2123  EA_MODE_001:                                        ;Address Register 'An'
0000211C  14FC 0041               2124      MOVE.B  #'A',(A2)+                              ;put A on buffer
00002120  1605                    2125      MOVE.B  D5,D3                                   ;move to d3 for conversion
00002122  4EB9 00002204           2126      JSR     EA_HEX_TO_ASCII                         ;puts register on buffer  
00002128  4E75                    2127      RTS
0000212A                          2128  
0000212A                          2129  EA_MODE_010:                                        ;Address direct --> '(An)'
0000212A  14FC 0028               2130      MOVE.B  #'(',(A2)+                              ;put ( on buffer
0000212E  14FC 0041               2131      MOVE.B  #'A',(A2)+                              ;put A on buffer
00002132  1605                    2132      MOVE.B  D5,D3                                   ;move to D3 for conversion
00002134  4EB9 00002204           2133      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
0000213A  14FC 0029               2134      MOVE.B  #')',(A2)+                              ;put ) on buffer
0000213E  4E75                    2135      RTS
00002140                          2136  
00002140                          2137  EA_MODE_011:                                        ;Address with Postincrement --> '(An)+' 
00002140  14FC 0028               2138      MOVE.B  #'(',(A2)+                              ;put ( on buffer
00002144  14FC 0041               2139      MOVE.B  #'A',(A2)+                              ;put A on buffer
00002148  1605                    2140      MOVE.B  D5,D3                                   ;move to D3 for conversion
0000214A  4EB9 00002204           2141      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
00002150  14FC 0029               2142      MOVE.B  #')',(A2)+                              ;put ) on buffer
00002154  14FC 002B               2143      MOVE.B  #'+',(A2)+                              ;put + on buffer
00002158  4E75                    2144      RTS
0000215A                          2145  
0000215A                          2146  EA_MODE_100:                                        ;Address with Predecrement --> '-(An)'
0000215A  14FC 002D               2147      MOVE.B  #'-',(A2)+                              ;put - on buffer
0000215E  14FC 0028               2148      MOVE.B  #'(',(A2)+                              ;put ( on buffer
00002162  14FC 0041               2149      MOVE.B  #'A',(A2)+                              ;put A on buffer
00002166  1605                    2150      MOVE.B  D5,D3                                   ;move to D3 for conversion
00002168  4EB9 00002204           2151      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
0000216E  14FC 0029               2152      MOVE.B  #')',(A2)+                              ;put ) on buffer
00002172  4E75                    2153      RTS
00002174                          2154  
00002174                          2155  ;unsupported --> ;Address with Displacement --> '(d16, An)
00002174                          2156  EA_MODE_101:                                        
00002174  103C 000E               2157      MOVE.B  #14,D0
00002178  43F9 00002524           2158      LEA     unsupported_ea_mode_message,A1
0000217E  4E4F                    2159      TRAP    #15    
00002180  4EF8 1012               2160      JMP     GET_STARTING_ADDRESS
00002184                          2161  
00002184                          2162  ;unsupported --> ;unsupported_ea_mode_message
00002184                          2163  EA_MODE_110:
00002184  103C 000E               2164      MOVE.B  #14,D0
00002188  43F9 00002524           2165      LEA     unsupported_ea_mode_message,A1
0000218E  4E4F                    2166      TRAP    #15
00002190  4EF8 1012               2167      JMP     GET_STARTING_ADDRESS
00002194                          2168  
00002194                          2169  ;some form of immediate data: short, long, immediate
00002194                          2170  EA_MODE_111:
00002194                          2171      ;D4 = MODE | D5 = register (000, 001, 100)
00002194                          2172      ;000 = Absolute Short (xxx).w
00002194                          2173      ;001 = Absolute Long (xxx).l
00002194                          2174      ;100 = Immediate data
00002194                          2175      
00002194  BA3C 0000               2176      CMP.B   #000,D5
00002198  6700 0022               2177      BEQ     EA_111_ABSOLUTE_SHORT
0000219C  BA3C 0001               2178      CMP.B   #001,D5
000021A0  6700 002E               2179      BEQ     EA_111_ABSOLUTE_LONG
000021A4  BA3C 0004               2180      CMP.B   #$4,D5
000021A8  6700 003A               2181      BEQ     EA_111_IMMEDIATE
000021AC                          2182      
000021AC                          2183      ;ELSE, HANDLE ERROR
000021AC  103C 000E               2184      MOVE.B  #14,D0
000021B0  43F9 0000254F           2185      LEA     unsupported_ea_register_message,A1
000021B6  4E4F                    2186      TRAP    #15
000021B8  4EF8 1012               2187      JMP     GET_STARTING_ADDRESS
000021BC                          2188              
000021BC                          2189      
000021BC                          2190  EA_111_ABSOLUTE_SHORT:
000021BC                          2191      ;A5 is looking at correct spot
000021BC                          2192      ;ADD WORD VALUE AT A5 ON TO BUFFER AT A2 AND INCREMENT BY WORD
000021BC  14FC 0024               2193      MOVE.B  #'$',(A2)+                              ;put $ on buffer
000021C0  3E15                    2194      MOVE.W  (A5),D7
000021C2  4246                    2195      CLR     D6
000021C4  1C3C 0001               2196      MOVE.B  #01,D6                                  ;word size in EA_ITOA_IMMEDIATE
000021C8  4EB9 00002236           2197      JSR     EA_ITOA_IMMEDIATE
000021CE  4E75                    2198      RTS
000021D0                          2199  
000021D0                          2200  EA_111_ABSOLUTE_LONG:
000021D0  14FC 0024               2201      MOVE.B  #'$',(A2)+                              ;put $ on buffer
000021D4  3E15                    2202      MOVE.W  (A5),D7
000021D6  4246                    2203      CLR     D6
000021D8  1C3C 0002               2204      MOVE.B  #02,D6                                  ;long size in EA_ITOA_IMMEDIATE        
000021DC  4EB9 00002236           2205      JSR     EA_ITOA_IMMEDIATE
000021E2  4E75                    2206      RTS
000021E4                          2207  
000021E4                          2208  EA_111_IMMEDIATE:
000021E4  14FC 0023               2209      MOVE.B  #'#',(A2)+                              ;put $ on buffer
000021E8  14FC 0024               2210      MOVE.B  #'$',(A2)+                              ;put $ on buffer
000021EC                          2211      
000021EC  2200                    2212      MOVE.L  D0,D1
000021EE  0241 F000               2213      ANDI.W  #$F000,D1
000021F2  EC49                    2214      LSR.W   #6,D1
000021F4  EC49                    2215      LSR.W   #6,D1                                   ;total of 12 times
000021F6                          2216      
000021F6                          2217      
000021F6                          2218      ;check size and branch accordingly
000021F6  3C01                    2219      MOVE.W  D1,D6
000021F8  3E15                    2220      MOVE.W  (A5),D7
000021FA  4EB9 00002236           2221      JSR EA_ITOA_IMMEDIATE
00002200                          2222      
00002200  4EF8 1A4A               2223      JMP EA_FINISH
00002204                          2224     
00002204                          2225      
00002204                          2226  
00002204                          2227  EA_HEX_TO_ASCII:
00002204  0603 0030               2228      ADDI.B      #$30,D3                             ;add $30 to D1 to convert
00002208  14C3                    2229      MOVE.B      D3,(A2)+                            ;add to buffer and increment to next position
0000220A  4E75                    2230      RTS     
0000220C                          2231  
0000220C                          2232  
0000220C                          2233  EA_CHECK_SIZE:
0000220C  4246                    2234      CLR     D6
0000220E  2C00                    2235      MOVE.L  D0,D6                                   ;complete opcode --> D6
00002210  0246 00F0               2236      ANDI.W  #nibble3,D6                             ;isolating nibble 3
00002214  EC4E                    2237      LSR.W   #right6,D6                              ;shifting bits 7,6 --> 1,0
00002216                          2238      
00002216  BC7C 0000               2239      CMP     #00,D6
0000221A  6700 000E               2240      BEQ     EA_SIZE_BYTE
0000221E  BC7C 0001               2241      CMP     #01,D6
00002222  6700 000A               2242      BEQ     EA_SIZE_WORD
00002226  6000 000A               2243      BRA     EA_SIZE_LONG
0000222A                          2244  
0000222A                          2245  EA_SIZE_BYTE:
0000222A  3E1D                    2246      MOVE.W  (A5)+,D7
0000222C  4E75                    2247      RTS
0000222E                          2248  
0000222E                          2249  EA_SIZE_WORD:
0000222E  3E15                    2250      MOVE.W  (A5),D7
00002230  4E75                    2251      RTS
00002232                          2252  
00002232                          2253  EA_SIZE_LONG:
00002232  3E15                    2254      MOVE.W  (A5),D7
00002234  4E75                    2255      RTS
00002236                          2256  
00002236                          2257  
00002236                          2258  EA_ITOA_IMMEDIATE:
00002236                          2259      ;D3 = counter, D7 = value to be converted, D6 = size
00002236  BC3C 0000               2260      CMP.B   #%00,D6
0000223A  6700 0012               2261      BEQ     EA_ITOA_BYTE
0000223E  BC3C 0001               2262      CMP.B   #%01,D6
00002242  6700 0016               2263      BEQ     EA_ITOA_WORD
00002246  BC3C 0002               2264      CMP.B   #%10,D6     
0000224A  6700 0024               2265      BEQ     EA_ITOA_LONG
0000224E                          2266      
0000224E                          2267  EA_ITOA_BYTE:
0000224E  4EB9 00002298           2268      JSR     EA_ITOA_BYTE_CONVERT
00002254  4EF9 000022D0           2269      JMP     EA_ITOA_DONE
0000225A                          2270  
0000225A                          2271  EA_ITOA_WORD:
0000225A  E04F                    2272      LSR.W   #right8,D7
0000225C  4EB9 00002298           2273      JSR     EA_ITOA_BYTE_CONVERT
00002262  3E1D                    2274      MOVE.W  (A5)+,D7
00002264  4EB9 00002298           2275      JSR     EA_ITOA_BYTE_CONVERT
0000226A                          2276      
0000226A  4EF9 000022D0           2277      JMP     EA_ITOA_DONE
00002270                          2278      
00002270                          2279  EA_ITOA_LONG:
00002270  E04F                    2280      LSR.W   #right8,D7
00002272  4EB9 00002298           2281      JSR     EA_ITOA_BYTE_CONVERT
00002278  3E1D                    2282      MOVE.W  (A5)+,D7
0000227A  4EB9 00002298           2283      JSR     EA_ITOA_BYTE_CONVERT
00002280                          2284  
00002280  3E15                    2285      MOVE.W  (A5),D7
00002282  E04F                    2286      LSR.W   #right8,D7
00002284  4EB9 00002298           2287      JSR     EA_ITOA_BYTE_CONVERT
0000228A  3E1D                    2288      MOVE.W  (A5)+,D7
0000228C  4EB9 00002298           2289      JSR     EA_ITOA_BYTE_CONVERT
00002292                          2290  
00002292  4EF9 000022D0           2291      JMP     EA_ITOA_DONE
00002298                          2292  
00002298                          2293  EA_ITOA_BYTE_CONVERT:
00002298  3607                    2294      MOVE.W  D7,D3
0000229A  0243 00F0               2295      ANDI.W  #$F0,D3
0000229E  E84B                    2296      LSR.W   #right4,D3
000022A0  4EB9 000022B4           2297      JSR     EA_ITOA_NIBBLE_CONVERT
000022A6                          2298      
000022A6  3607                    2299      MOVE.W  D7,D3
000022A8  0243 000F               2300      ANDI.W  #$0F,D3
000022AC  4EB9 000022B4           2301      JSR     EA_ITOA_NIBBLE_CONVERT
000022B2  4E75                    2302      RTS
000022B4                          2303  
000022B4                          2304  EA_ITOA_NIBBLE_CONVERT:
000022B4  B63C 0009               2305      CMP.B   #9,D3
000022B8  6E00 000E               2306      BGT     EA_ITOA_LETTER
000022BC  6000 0002               2307      BRA     EA_ITOA_NUMBER
000022C0                          2308  
000022C0                          2309  EA_ITOA_HEX2ASCII:
000022C0                          2310  
000022C0                          2311  
000022C0                          2312  
000022C0                          2313  EA_ITOA_NUMBER:
000022C0  0603 0030               2314      ADDI.B  #$30,D3
000022C4  14C3                    2315      MOVE.B  D3,(A2)+
000022C6  4E75                    2316      RTS
000022C8                          2317  
000022C8                          2318  EA_ITOA_LETTER:
000022C8  0603 0037               2319      ADDI.B  #$37,D3
000022CC  14C3                    2320      MOVE.B  D3,(A2)+
000022CE  4E75                    2321      RTS
000022D0                          2322  
000022D0                          2323  EA_ITOA_DONE
000022D0  4E75                    2324      RTS
000022D2                          2325  
000022D2                          2326      
000022D2                          2327  ;****************************************** MESSAGES ***************************************************
000022D2= 57 65 6C 63 6F 6D ...   2328  welcome_message             DC.B    'Welcome to 68k disassembler',CR,LF,0
000022F0                          2329  
000022F0= 50 6C 65 61 73 65 ...   2330  get_start_address           DC.B    'Please enter a starting address in hexadecimal',CR,LF,0
00002321                          2331  
00002321= 50 6C 65 61 73 65 ...   2332  get_end_address             DC.B    'Please enter an ending address in hexadecimal',CR,LF,0
00002351                          2333  
00002351= 49 6E 76 61 6C 69 ...   2334  atoi_error_invalid          DC.B    'Invalid address, characters must be $0-F',CR,LF,0
0000237C                          2335  
0000237C= 49 6E 76 61 6C 69 ...   2336  error_message_1             DC.B    'Invalid Address: Must be greater than 0',CR,LF,0
000023A6                          2337  
000023A6= 49 6E 76 61 6C 69 ...   2338  error_message_2             DC.B    'Invalid Address: Must be even',CR,LF,0
000023C6                          2339  
000023C6= 49 6E 76 61 6C 69 ...   2340  error_message_3             DC.B    'Invalid Address: Must be even',CR,LF,0
000023E6                          2341  
000023E6= 49 6E 76 61 6C 69 ...   2342  error_message_4             DC.B    'Invalid Address: Must be less than $00FFFFFF',CR,LF,0
00002415                          2343  
00002415= 49 6E 76 61 6C 69 ...   2344  error_message_5             DC.B    'Invalid Address: Must be greater than starting address',CR,LF,0
0000244E                          2345  
0000244E= 48 69 74 20 45 6E ...   2346  prompt_enter                DC.B    'Hit Enter to Continue',CR,LF,0
00002466                          2347  
00002466= 44 6F 20 59 6F 75 ...   2348  prompt_again                DC.B    'Do You Want to Run Program Again with New Memory Locations? Enter Y or N ',CR,LF,0
000024B2                          2349  
000024B2= 55 6E 73 75 70 70 ...   2350  unsupported_opcode_message  DC.B    'Unsupported Opcode, Restarting Program ',CR,LF,0
000024DC                          2351  
000024DC= 49 6E 76 61 6C 69 ...   2352  invalid_opcode_message      DC.B    'Invalid Opcode, Restarting Program ',CR,LF,0 
00002502                          2353  
00002502= 57 72 6F 6E 67 20 ...   2354  wrong_size_message          DC.B     'Wrong Size, Restarting Program ',CR,LF,0 
00002524                          2355  
00002524= 55 6E 73 75 70 70 ...   2356  unsupported_ea_mode_message DC.B    'Unsupported EA Mode, Restarting Program ',CR,LF,0
0000254F                          2357  
0000254F= 55 6E 73 75 70 70 ...   2358  unsupported_ea_register_message DC.B    'Unsupported EA Register, Restarting Program ',CR,LF,0
0000257E                          2359  
0000257E= 55 6E 73 75 70 70 ...   2360  unsupported_ea_type          DC.B    'Unsupported EA Type, Restarting Program ',CR,LF,0
000025A9                          2361  
000025A9= 49 6E 76 61 6C 69 ...   2362  invalid_character_message   DC.B    'Invalid Character, Restarting Program ',CR,LF,0
000025D2                          2363                                
000025D2                          2364  
000025D2                          2365  ascii_start:
000025D2                          2366      DS.w    10          
000025E6                          2367      
000025E6                          2368  ascii_end:
000025E6                          2369      DS.w    10         
000025FA                          2370  
000025FA                          2371  buffer                  ;storing op code
000025FA                          2372      DS.W    64          
0000267A                          2373      
0000267A                          2374  ascii_y_or_n:
0000267A                          2375      DS.W    8
0000268A                          2376      
0000268A                          2377  
0000268A                          2378      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_END           25E6
ASCII_START         25D2
ASCII_Y_OR_N        267A
ATOI                18C2
ATOI_DONE           1934
ATOI_ERROR          1938
ATOI_ERROR_INVALID  2351
ATOI_FORMAT         1924
ATOI_LOOP           18C8
ATOI_LOWERCASE_LETTER  191A
ATOI_NUMBER         1906
ATOI_UPPERCASE_LETTER  1910
BRANCH_16_ITOA      1FB6
BUFFER              25FA
BUFFER_SIZE         40
CR                  D
DECODING_LOOP       108A
DEST_MODE           1C0
DEST_REG            E00
DONE                110E
EA_111_ABSOLUTE_LONG  21D0
EA_111_ABSOLUTE_SHORT  21BC
EA_111_ABSOLUTE_SHORT_HELPER  208C
EA_111_IMMEDIATE    21E4
EA_BRANCH           1F0C
EA_BRANCH_16        1F9E
EA_BRANCH_32        1FB6
EA_BRANCH_8_BIT_DISPLACEMENT  1F2C
EA_BRANCH_ITOA_HELPER  1F6C
EA_BRANCH_NEGATIVE  1F52
EA_BRANCH_POSITIVE  1F3A
EA_CHECK_SIZE       220C
EA_DESTONLY         1B5A
EA_EXT              1B60
EA_FINISH           1A4A
EA_HEX_TO_ASCII     2204
EA_IMMEDIATE        1A4C
EA_ITOA_BYTE        224E
EA_ITOA_BYTE_CONVERT  2298
EA_ITOA_DONE        22D0
EA_ITOA_HEX2ASCII   22C0
EA_ITOA_IMMEDIATE   2236
EA_ITOA_LETTER      22C8
EA_ITOA_LONG        2270
EA_ITOA_NIBBLE_CONVERT  22B4
EA_ITOA_NUMBER      22C0
EA_ITOA_WORD        225A
EA_JMP_HELPER       20CA
EA_LEA              1B1A
EA_MATH             1FD4
EA_MATH_CONTINUE    2032
EA_MODE_000         210E
EA_MODE_001         211C
EA_MODE_010         212A
EA_MODE_011         2140
EA_MODE_100         215A
EA_MODE_101         2174
EA_MODE_110         2184
EA_MODE_111         2194
EA_MODE_TABLE       20DE
EA_MOVE             1A8E
EA_MOVEA            1AD4
EA_MOVEM            1B66
EA_MOVEM_ADDRREG_TO_MEM  1CCA
EA_MOVEM_DATAREG_TO_MEM  1C42
EA_MOVEM_IMMEDIATE_DESTINATION  1E56
EA_MOVEM_IMMEDIATE_SOURCE  1E66
EA_MOVEM_MEM_TO_ADDRREG  1DF8
EA_MOVEM_MEM_TO_DATAREG  1DCA
EA_MOVEM_MEM_TO_REG  1D1C
EA_MOVEM_REG_TO_MEM  1B90
EA_QUICK            1E90
EA_QUICK_MOVEQ      1EE2
EA_ROTATION         204C
EA_ROTATION_CONTINUE  2096
EA_ROTATION_IMMEDIATE  20BE
EA_ROTATION_MODE_7  2074
EA_ROTATION_REGISTER  20C4
EA_SIZE_BYTE        222A
EA_SIZE_LONG        2232
EA_SIZE_WORD        222E
EA_START            19EE
EA_TRAP             1E8A
EA_TYPE_BRANCH      9
EA_TYPE_DESTONLY    4
EA_TYPE_EXT         5
EA_TYPE_IMMEDIATE   0
EA_TYPE_LEA         3
EA_TYPE_MATH        A
EA_TYPE_MOVE        1
EA_TYPE_MOVEA       2
EA_TYPE_MOVEA6      C
EA_TYPE_MOVEM       6
EA_TYPE_QUICK       8
EA_TYPE_ROTATION    B
EA_TYPE_TABLE       19FC
EA_TYPE_TRAP        7
EA_UNSUPPORTED_TYPE  20CE
ENDA_ERROR_LARGE    19CE
ENDA_ERROR_LESS_THAN_STARTA  19DE
ENDA_ERROR_NOT_EVEN  19BE
ERROR_MESSAGE_1     237C
ERROR_MESSAGE_2     23A6
ERROR_MESSAGE_3     23C6
ERROR_MESSAGE_4     23E6
ERROR_MESSAGE_5     2415
FILLED_SCREEN       10F8
GET_ENDING_ADDRESS  104A
GET_END_ADDRESS     2321
GET_STARTING_ADDRESS  1012
GET_START_ADDRESS   22F0
INVALID_CHARACTER_MESSAGE  25A9
INVALID_OPCODE_MESSAGE  24DC
ITOA                1948
ITOA_ADDRESS        1952
ITOA_ADDRESS_LOOP   1960
ITOA_FINISH         199C
ITOA_HEX2ASCII      197C
ITOA_LETTER         1994
ITOA_LOOP           194A
ITOA_NUMBER         198C
LF                  A
LINES_PER_SCREEN    F
MOVEM_CARRY         1E38
MOVEM_CHECK_MULTIPLE  1C9C
MOVEM_LOOP          1E28
MOVEM_MULTIPLE      1CA4
MOVEM_MULTIPLE_A    1CC2
MOVEM_MULTIPLE_D    1CBA
MOVEM_SET_MIN       1E48
NIBBLE1             F000
NIBBLE2             F00
NIBBLE3             F0
NIBBLE4             F
OPCODE0000          11C4
OPCODE0001          11DE
OPCODE0010          11E4
OPCODE0011          11FE
OPCODE0100          1218
OPCODE0101          1232
OPCODE0110          1254
OPCODE0111          126E
OPCODE1000          1274
OPCODE1001          1296
OPCODE1010          129C
OPCODE1011          12A2
OPCODE1100          12A8
OPCODE1101          12CA
OPCODE1110          12E6
OPCODE1111          1306
OP_0000_TABLE       130C
OP_0100_TABLE       136C
OP_0110_TABLE       13CC
OP_ADD              178C
OP_ADDA             17AA
OP_ADDI             148E
OP_ADDQ             1634
OP_AND              1786
OP_ANDI             144A
OP_ASL              17CC
OP_ASR              17EA
OP_BEQ              16A8
OP_BRA              1678
OP_BSR              1690
OP_CHECK_SIZE       1840
OP_CHECK_SIZE_ADDA  18A6
OP_CHECK_SIZE_MOVEM  1864
OP_CLR              15FE
OP_CMP              172A
OP_CMPI             14D2
OP_DATA_CLR         114E
OP_DATA_CLR_LOOP    115A
OP_DIVS             16EA
OP_DIVU             16CE
OP_EOR              1748
OP_EORI             14B0
OP_EXT              160A
OP_FINISH           1148
OP_INVALID_OPCODE   1830
OP_JMP              162E
OP_JSR              1628
OP_LEA              15E6
OP_LSL              1808
OP_LSR              180E
OP_MOVEAL           1518
OP_MOVEAW           1564
OP_MOVEB            14F4
OP_MOVEL            1540
OP_MOVEM            15C0
OP_MOVEQ            16AE
OP_MOVEW            158C
OP_MULS             176A
OP_MULU             174E
OP_NOP              15B0
OP_NOT              1604
OP_OR               1706
OP_ORI              142C
OP_ROL              1814
OP_ROR              181A
OP_RTE              161C
OP_RTS              1622
OP_SIZE_BYTE        1888
OP_SIZE_LONG        189C
OP_SIZE_WORD        1892
OP_START            1112
OP_STOP             1616
OP_SUB              170C
OP_SUBI             146C
OP_SUBQ             1656
OP_TABLE            1164
OP_TRAP             1610
OP_UNSUPPORTED_OPCODE  1820
PROMPT_AGAIN        2466
PROMPT_ENTER        244E
REPEAT_OR_FINISH    10B6
RIGHT1              1
RIGHT10             A
RIGHT12             C
RIGHT16             10
RIGHT2              2
RIGHT24             18
RIGHT3              3
RIGHT4              4
RIGHT5              5
RIGHT6              6
RIGHT7              7
RIGHT8              8
RIGHT9              9
STACK               A0000
START               1000
STARTA_ERROR_LESS_THAN_ZERO  199E
STARTA_ERROR_NOT_EVEN  19AE
START_DECODING      1088
UNSUPPORTED_EA_MODE_MESSAGE  2524
UNSUPPORTED_EA_REGISTER_MESSAGE  254F
UNSUPPORTED_EA_TYPE  257E
UNSUPPORTED_OPCODE_MESSAGE  24B2
WELCOME             1006
WELCOME_MESSAGE     22D2
WRONG_SIZE_MESSAGE  2502
