00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/4/2021 12:03:21 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler V1.8(ish)
00000000                             3  * Written by : Brent and Parker
00000000                             4  * Date       : 3/4/21
00000000                             5  * Description: Final Project for CSS 422
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;************************ Define Constants ********************************* 
00000000  =0000000D                  9  CR                  EQU     $0D     ;carriage return
00000000  =0000000A                 10  LF                  EQU     $0a     ;line feed
00000000  =000A0000                 11  stack               EQU     $000A0000
00000000  =0000001E                 12  lines_per_screen    EQU     30
00000000  =00000040                 13  buffer_size         EQU     64      ;size of buffer
00000000  =00000F00                 14  nibble2             EQU     $0F00   ;2nd nibble in code (bits 11-8)
00000000  =000000F0                 15  nibble3             EQU     $00F0   ;3rd nibble in code (bits 7-4)
00000000  =0000000F                 16  nibble4             EQU     $000F   ;4th nibble in code (bits 3-0)
00000000  =00000001                 17  right1              EQU     1       ;shift 1 time
00000000  =00000002                 18  right2              EQU     2       ;shift 2 times
00000000  =00000003                 19  right3              EQU     3       ;shift 3 times to extract src mode
00000000  =00000004                 20  right4              EQU     4       ;shift 4 times to extract 3rd nibble
00000000  =00000005                 21  right5              EQU     5       ;shift 5 times (unused)
00000000  =00000006                 22  right6              EQU     6       ;shift 6 times to extract dst mode
00000000  =00000007                 23  right7              EQU     7       ;shift 7 times
00000000  =00000008                 24  right8              EQU     8       ;shift 8 to extract 2nd nibble
00000000  =00000009                 25  right9              EQU     9       ;shift 9 times to check 2nd nibble?
00000000  =0000000A                 26  right10             EQU     10      ;shift 10
00000000  =0000000C                 27  right12             EQU     12      ;shift 12 to extract 3rd byte
00000000  =00000010                 28  right16             EQU     16      ;shift 16 to extract 2nd byte
00000000  =00000018                 29  right24             EQU     24      ;shift 24 to extract 1st byte
00000000  =000001C0                 30  dest_mode           EQU     $01C0   ; --> 0000 0001 1100 0000 (used for destination in MOVE/MOVEA
00000000                            31  
00000000                            32  
00000000  =00000000                 33  ea_type_immediate   EQU     0
00000000  =00000001                 34  ea_type_move        EQU     1
00000000  =00000002                 35  ea_type_movea       EQU     2
00000000  =0000000C                 36  ea_type_movea6      EQU     12
00000000  =00000003                 37  ea_type_lea         EQU     3
00000000  =00000004                 38  ea_type_destonly    EQU     4
00000000  =00000005                 39  ea_type_ext         EQU     5
00000000  =00000006                 40  ea_type_movem       EQU     6
00000000  =00000007                 41  ea_type_trap        EQU     7
00000000  =00000008                 42  ea_type_quick       EQU     8
00000000  =00000009                 43  ea_type_branch      EQU     9
00000000                            44  
00000000                            45  ;flags???
00000000                            46  
00000000                            47  
00000000                            48  
00000000                            49  
00000000                            50  
00001000                            51      ORG    $1000
00001000                            52  START:                              ;first instruction of program
00001000  4FF9 000A0000             53      LEA     stack, SP               ;SP @ $A0000
00001006                            54  
00001006                            55  
00001006                            56  
00001006                            57  ;********************************** Welcome Message ******************************************** 
00001006                            58  WELCOME:
00001006  43F9 000018DA             59      LEA     welcome_message,A1      ;load the welcome message into A1
0000100C  103C 000E                 60      MOVE.B  #14,D0
00001010  4E4F                      61      TRAP    #15                     ;print contents of welcome_message
00001012                            62      
00001012                            63  
00001012                            64  
00001012                            65  ;*********************************** Get Starting Address *************************************** 
00001012                            66  GET_STARTING_ADDRESS:
00001012  103C 000E                 67      MOVE.B  #14,D0    
00001016  43F9 000018F8             68      LEA     get_start_address,A1    ;load the get_start_address message into A1
0000101C  4E4F                      69      TRAP    #15                     ;print get_start_address
0000101E                            70      
0000101E  43F9 00001984             71      LEA     ascii_start,A1          ;store
00001024  103C 0002                 72      MOVE.B  #2,D0                   ;get user input    
00001028  4E4F                      73      TRAP    #15                     ;another trap to get input
0000102A  4EB9 000016CE             74      JSR     ATOI                    ;address is now in hex format in memory location
00001030                            75      
00001030                            76      ;??                             MOVE.L  (A1),D3
00001030                            77      
00001030                            78      ;perform checks (later)
00001030                            79      
00001030                            80      
00001030  2A39 00001984             81      MOVE.l    (ascii_start),D5      ;load into A5
00001036  2A45                      82      MOVE.l    D5,A5                ;load into A5
00001038                            83  
00001038                            84  
00001038                            85  ;******************************** Get Ending Address ******************************************** 
00001038                            86  GET_ENDING_ADDRESS: 
00001038  103C 000E                 87      MOVE.B  #14,D0
0000103C  43F9 00001929             88      LEA     get_end_address,A1      ;load the get_end_address message into A1  
00001042  4E4F                      89      TRAP    #15                     ;print get_end_address
00001044                            90      
00001044  43F9 00001998             91      LEA     ascii_end,A1            ;store 
0000104A  103C 0002                 92      MOVE.B  #2,D0                   ;get user input
0000104E  4E4F                      93      TRAP    #15                     ;another trap to get intput
00001050  4EB9 000016CE             94      JSR ATOI
00001056                            95  
00001056                            96      ;perform checks (later)
00001056                            97  
00001056  2C39 00001998             98      MOVE.l    (ascii_end),D6      ;load into A6
0000105C  2C46                      99      MOVE.l    D6,A6               ;load into A6
0000105E                           100  
0000105E                           101  
0000105E                           102  
0000105E                           103  
0000105E                           104  ;************************************ Main Loop???? ***********************************************
0000105E                           105  ;get pointer to first given address
0000105E                           106  ;pull hex code from that address and store in A1?
0000105E                           107  ;take hex code and go to OP_TABLE
0000105E                           108  
0000105E                           109  
0000105E                           110  ;A5 = starting address
0000105E                           111  ;A6 = ending address
0000105E                           112  START_DECODING:
0000105E                           113      ;CLR.L   D2                             ;clear screen line counter
0000105E                           114  
0000105E                           115  DECODING_LOOP:
0000105E  4EB9 00001068            116      JSR     OP_START                       ;get complete line of instruction to decode   
00001064                           117      
00001064                           118  
00001064                           119      ;print tot screen
00001064                           120      
00001064                           121      ;check if finished or if screen is filled
00001064                           122      ;handle checks
00001064                           123     
00001064                           124      
00001064                           125  DONE:
00001064  FFFF FFFF                126      SIMHALT                                 ; halt simulator
00001068                           127  
00001068                           128  
00001068                           129  
00001068                           130  ;************************************ OP Stuff ********************************************************** 
00001068                           131  
00001068                           132  ;A0 = POINTER TO OP_TABLE???
00001068                           133  ;A1 = 
00001068                           134  ;A2 = buffer (this is our decoded string that will print to screen)
00001068                           135  ;A3 = 
00001068                           136  ;A4 = current memory address for buffer (used for clearing????)
00001068                           137  ;A5 = starting address / current address in memory
00001068                           138  ;A6 = ending address
00001068                           139  ;A7 = SP
00001068                           140  
00001068                           141  ;D0
00001068                           142  ;D1
00001068                           143  ;D2 = ?
00001068                           144  ;D3 = buffer size (used for loop = 64)
00001068                           145  ;D4 = 
00001068                           146  ;D5
00001068                           147  ;D6
00001068                           148  ;D7
00001068                           149  
00001068                           150  OP_START
00001068                           151      ;get complete line? 
00001068                           152      ;everything happens in here
00001068                           153      
00001068                           154      ;MOVEM.L         D2/A6, -(SP)
00001068                           155  
00001068  4EB9 000010A0            156      JSR         OP_DATA_CLR         ;clear buffer
0000106E  45F9 000019AC            157      LEA         buffer, A2          ;A2 now points to buffer, which is cleared
00001074                           158      
00001074                           159  
00001074                           160      ;print out current mem address by putting into buffer and then adding a ' ' (tab)
00001074  7403                     161      MOVE.L      #$0003,D2           ;? BINARY --> 0011 ?
00001076  4EB9 0000174E            162      JSR         ITOA_ADDRESS        ;convert A5 (current address) to ASCII and put in buffer
0000107C  14FC 0009                163      MOVE.B      #$09, (A2)+         ;adds a ' ' to buffer
00001080                           164      
00001080                           165      ;at this point buffer has the memory address and a space, ready for op code                     !!TESTED UP UNTIL THIS POINT AND GOOD!!
00001080                           166      
00001080  41F9 000010B6            167      LEA         OP_TABLE, A0
00001086  4280                     168      CLR.L       D0
00001088  301D                     169      MOVE.W      (A5)+,D0            ;moves opcode from current address into D0
0000108A  2200                     170      MOVE.L      D0,D1               ;should move into D1
0000108C  143C 000C                171      MOVE.B      #right12,D2         ;move immediate value 12 into D2
00001090  E469                     172      LSR.W       D2,D1               ;shift D1 by 12 bits, leaving just 4 bits (this is our opcode???)
00001092  C2FC 0006                173      MULU        #6,D1               ;computes opcode table jump displacement
00001096  4EF0 1000                174      JMP         0(A0,D1)            ;jumps to opcode table entry (A0 = OP_TABLE)
0000109A                           175  
0000109A                           176  OP_FINISH:
0000109A  4CDF 4004                177      MOVEM.L     (SP)+, D2/A6
0000109E  4E75                     178      RTS                             ;returns to DECODING_LOOP !?!?!?!?!?
000010A0                           179  
000010A0                           180  
000010A0                           181  OP_DATA_CLR:
000010A0  4283                     182      CLR.L       D3                  ; ? What is D3????
000010A2                           183      ;MOVE.B      #buffer_size,D3     ; put 64 into D3
000010A2  163C 000A                184      MOVE.B      #10,D3     ; put 10 into D3                                                                 ;delete after testing and use 64
000010A6  49F9 000019AC            185      LEA         buffer, A4          ; what address register?
000010AC                           186  
000010AC                           187  OP_DATA_CLR_LOOP:
000010AC  18FC 0000                188      MOVE.B      #0, (A4)+
000010B0  5343                     189      SUBI        #1, D3
000010B2  6EF8                     190      BGT         OP_DATA_CLR_LOOP
000010B4  4E75                     191      RTS                                 ;need RTS to return
000010B6                           192  
000010B6                           193  
000010B6                           194  ;********************************* jump table ****************************************
000010B6                           195  OP_TABLE:
000010B6  4EF9 00001116            196      JMP         opcode0000              ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)                                 $0
000010BC  4EF9 00001130            197      JMP         opcode0001              ;MOVE.B                                                             $1    
000010C2  4EF9 00001136            198      JMP         opcode0010              ;MOVEA.L, MOVE.L                                                    $2
000010C8  4EF9 00001150            199      JMP         opcode0011              ;MOVEA.W MOVE.W                                                     $3
000010CE  4EF9 0000116A            200      JMP         opcode0100              ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP     $4
000010D4  4EF9 00001184            201      JMP         opcode0101              ;ADDQ (SUBQ)                                                        $5
000010DA  4EF9 0000118A            202      JMP         opcode0110              ;BRA.bw, BSR.bw (BEQ)                                               $6
000010E0  4EF9 000011A4            203      JMP         opcode0111              ;MOVEQ.l                                                            $7
000010E6  4EF9 000011AA            204      JMP         opcode1000              ;DIVU (DIVS, OR)                                                    $8
000010EC  4EF9 000011B0            205      JMP         opcode1001              ;SUB                                                                $9
000010F2  4EF9 000011B6            206      JMP         opcode1010              ;not assigned                                                       $A
000010F8  4EF9 000011BC            207      JMP         opcode1011              ;CMP (EOR)                                                          $B
000010FE  4EF9 000011C2            208      JMP         opcode1100              ;MULU (MULS, AND)                                                   $C
00001104  4EF9 000011C8            209      JMP         opcode1101              ;ADD, ADDA                                                          $D
0000110A  4EF9 000011E4            210      JMP         opcode1110              ;ASL, ASR (LSL, LSR, ROL, ROR)                                      $E
00001110  4EF9 00001204            211      JMP         opcode1111              ;not assigned                                                       $F
00001116                           212  
00001116                           213  
00001116                           214  
00001116                           215  
00001116                           216  ;A0 = POINTER TO OP_TABLE???
00001116                           217  ;A1 = 
00001116                           218  ;A2 = buffer (this is our decoded string that will print to screen)
00001116                           219  ;A3 = pointer to op_xxx_table
00001116                           220  ;A4 = current memory address for buffer (used for clearing????)
00001116                           221  ;A5 = starting address / current address in memory
00001116                           222  ;A6 = ending address
00001116                           223  ;A7 = SP
00001116                           224  
00001116                           225  ;D0 = full instruction
00001116                           226  ;D1 = full instruction for manipulating (temporary)
00001116                           227  ;D2 = will store immediate value for comparing
00001116                           228  ;D3 = buffer size (used for loop = 64)
00001116                           229  ;D4 = 
00001116                           230  ;D5 = 
00001116                           231  ;D6 = 
00001116                           232  ;D7 = 
00001116                           233  
00001116                           234  
00001116                           235  
00001116                           236  ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)                                 $0
00001116                           237  opcode0000:                                 
00001116  2200                     238      MOVE.L      D0,D1                   ;D1 has full instruction
00001118  0241 0F00                239      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
0000111C  143C 0008                240      MOVE.B      #right8, D2             ;store immediate value 8 in D2
00001120  E469                     241      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
00001122  C2FC 0006                242      MULU        #6, D1                  ;multiply by 6 to get displacement
00001126  47F9 0000120A            243      LEA         OP_0000_TABLE, A3       ;load op_0000_table into address register
0000112C  4EF3 1000                244      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
00001130                           245  
00001130                           246  ;MOVE.B                                                             $1
00001130                           247  opcode0001:
00001130  4EF9 000013F2            248      JMP         OP_MOVEB                ;no need to break down, only MOVE.B
00001136                           249  
00001136                           250  
00001136                           251  ;MOVEA.L, MOVE.L                                                    $2
00001136                           252  opcode0010:
00001136  2200                     253      MOVE.L      D0,D1                   ;D1 has full instruction
00001138  0241 01C0                254      ANDI        #dest_mode, D1          ;0000 0001 1100 0000
0000113C  143C 0006                255      MOVE.B      #right6, D2             ;D2 now 00000111
00001140  E469                     256      LSR.W       D2, D1                  ;shifting destination mode in D1 to far right by 3
00001142  B23C 0001                257      CMP.B       #1,D1                   ;does d1 = 001?
00001146  6700 02CE                258      BEQ         OP_MOVEAL               ;if d1 = 001, go to MOVEA
0000114A  4EF9 0000143E            259      JMP         OP_MOVEL                ;else jump to MOVEL
00001150                           260      
00001150                           261  
00001150                           262  
00001150                           263  
00001150                           264  ;MOVEA.W MOVE.W                                                     $3
00001150                           265  opcode0011:
00001150  2200                     266      MOVE.L      D0,D1                   ;D1 has full instruction
00001152  0241 01C0                267      ANDI        #dest_mode, D1          ;0000 0001 1100 0000
00001156  143C 0006                268      MOVE.B      #right6, D2             ;D2 now 00000111
0000115A  E469                     269      LSR.W       D2, D1                  ;shifting destination mode in D1 to far right by 3
0000115C  B23C 0001                270      CMP.B       #1,D1                   ;does d1 = 001?
00001160  6700 0300                271      BEQ         OP_MOVEAW               ;if d1 = 001, go to MOVEAW
00001164  4EF9 0000148A            272      JMP         OP_MOVEW                ;else jump to MOVEW
0000116A                           273  
0000116A                           274  
0000116A                           275  
0000116A                           276  
0000116A                           277  ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP)     $4
0000116A                           278  opcode0100:
0000116A  2200                     279      MOVE.L      D0,D1                   ;D1 has full instruction
0000116C  0241 0F00                280      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
00001170  143C 0008                281      MOVE.B      #right8, D2             ;store immediate value 8 in D2
00001174  E469                     282      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
00001176  C2FC 0006                283      MULU        #6, D1                  ;multiply by 6 to get displacement
0000117A  47F9 0000126A            284      LEA         OP_0100_TABLE, A3       ;load op_0000_table into address register
00001180  4EF3 1000                285      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
00001184                           286  
00001184                           287  
00001184                           288  ;ADDQ (SUBQ)                                                        $5
00001184                           289  opcode0101:
00001184  4EF9 000014D6            290      JMP         OP_ADDQ
0000118A                           291  
0000118A                           292  
0000118A                           293  
0000118A                           294  
0000118A                           295  ;BRA.bw, BSR.bw (BEQ)                                               $6
0000118A                           296  opcode0110:
0000118A  2200                     297      MOVE.L      D0,D1                   ;D1 has full instruction
0000118C  0241 0F00                298      ANDI.W      #nibble2,D1             ;check bits 11,10,9,8
00001190  143C 0008                299      MOVE.B      #right8, D2             ;store immediate value 8 in D2
00001194  E469                     300      LSR.W       D2, D1                  ;shift to isolate next nibble (bits 11-8)
00001196  C2FC 0006                301      MULU        #6, D1                  ;multiply by 6 to get displacement
0000119A  47F9 000012CA            302      LEA         OP_0110_TABLE, A3       ;load op_0110_table into address register
000011A0  4EF3 1000                303      JMP         0(A3,D1)                ;jumps to opcode table entry (A0 = OP_TABLE)
000011A4                           304      
000011A4                           305      ;come back and check when debugging. if this does not work then skip jump table
000011A4                           306  
000011A4                           307  
000011A4                           308  ;MOVEQ                                                            $7
000011A4                           309  opcode0111:
000011A4  4EF9 00001524            310      JMP         OP_MOVEQ
000011AA                           311  
000011AA                           312  
000011AA                           313  
000011AA                           314  ;DIVU (DIVS, OR)                                                    $8
000011AA                           315  opcode1000:
000011AA  4EF9 00001544            316      JMP         OP_DIVU
000011B0                           317  
000011B0                           318  
000011B0                           319  ;SUB                                                                $9
000011B0                           320  opcode1001:
000011B0  4EF9 0000155E            321      JMP         OP_SUB
000011B6                           322  
000011B6                           323  
000011B6                           324  ;not assigned                                                       $A
000011B6                           325  opcode1010:
000011B6  4EF9 00001670            326      JMP         OP_UNSUPPORTED_OPCODE
000011BC                           327  
000011BC                           328  
000011BC                           329  ;CMP (EOR)                                                          $B
000011BC                           330  opcode1011:
000011BC  4EF9 0000157A            331      JMP         OP_CMP
000011C2                           332  
000011C2                           333  
000011C2                           334  ;MULU (MULS, AND)                                                   $C
000011C2                           335  opcode1100:
000011C2  4EF9 00001596            336      JMP         OP_MULU
000011C8                           337  
000011C8                           338  
000011C8                           339  ;ADD, ADDA                                                          $D
000011C8                           340  opcode1101:
000011C8                           341      ;ADD and ADDA differ on bits 6,7... ADD will never be 11 for bits 6,7... use as check
000011C8  4241                     342      CLR         D1
000011CA  4242                     343      CLR         D2
000011CC  2200                     344      MOVE.L      D0,D1
000011CE  0241 00F0                345      ANDI.W      #nibble3, D1
000011D2  143C 0006                346      MOVE.B      #right6, D2
000011D6  E469                     347      LSR.W       D2,D1
000011D8                           348      
000011D8                           349      ;at this point we have our bits of interest in bits 1,0
000011D8                           350      
000011D8  B27C 0003                351      CMP         #3,D1                              ;check if bits == 11
000011DC  6700 03EE                352      BEQ         OP_ADDA                             ;if yes, branch ADDA
000011E0  6000 03CE                353      BRA         OP_ADD                              ;else branch ADD
000011E4                           354  
000011E4                           355  
000011E4                           356  
000011E4                           357  ;ASL, ASR (LSL, LSR, ROL, ROR)                                      $E
000011E4                           358  opcode1110:
000011E4  4241                     359      CLR D1
000011E6  4242                     360      CLR D2
000011E8  2200                     361      MOVE.L      D0, D1
000011EA  0241 0F00                362      ANDI.W      #nibble2, D1
000011EE  143C 0008                363      MOVE.B      #right8, D2
000011F2  E469                     364      LSR.W       D2, D1                              ;D1 has 0003 or 0004
000011F4  0241 0001                365      ANDI.W      #0001,D1                           ;isolate single bit
000011F8                           366      
000011F8                           367      ;at this point we have our single bit of interest in bit 0
000011F8                           368      
000011F8  B27C 0000                369      CMP         #0,D1                           ;check if bit == 0
000011FC  6700 040A                370      BEQ         OP_ASR                          ;if yes, branch to ASR
00001200  6000 03EA                371      BRA         OP_ASL                          ;else, branch to ASL
00001204                           372  
00001204                           373  
00001204                           374  ;not assigned                                                       $F
00001204                           375  opcode1111:
00001204  4EF9 00001670            376      JMP         OP_UNSUPPORTED_OPCODE
0000120A                           377  
0000120A                           378  
0000120A                           379  ;******************************** OP_XXX_TABLES ************************************
0000120A                           380  ;once in OP_XXX_TABLE , we will use these entries to jump to specific op code to put into buffer
0000120A                           381  
0000120A                           382  OP_0000_TABLE:
0000120A  4EF9 0000132A            383      jmp OP_ORI                                      ;0  
00001210  4EF9 00001670            384      jmp OP_UNSUPPORTED_OPCODE                       ;1
00001216  4EF9 00001348            385      jmp OP_ANDI                                     ;2
0000121C  4EF9 00001670            386      jmp OP_UNSUPPORTED_OPCODE                       ;3
00001222  4EF9 0000136A            387      jmp OP_SUBI                                     ;4
00001228  4EF9 00001670            388      jmp OP_UNSUPPORTED_OPCODE                       ;5
0000122E  4EF9 0000138C            389      jmp OP_ADDI                                     ;6
00001234  4EF9 00001670            390      jmp OP_UNSUPPORTED_OPCODE                       ;7
0000123A  4EF9 00001670            391      jmp OP_UNSUPPORTED_OPCODE                       ;8
00001240  4EF9 00001670            392      jmp OP_UNSUPPORTED_OPCODE                       ;9
00001246  4EF9 000013AE            393      jmp OP_EORI                                     ;10
0000124C  4EF9 00001670            394      jmp OP_UNSUPPORTED_OPCODE                       ;11
00001252  4EF9 000013D0            395      jmp OP_CMPI                                     ;12
00001258  4EF9 00001670            396      jmp OP_UNSUPPORTED_OPCODE                       ;13
0000125E  4EF9 00001670            397      jmp OP_UNSUPPORTED_OPCODE                       ;14
00001264  4EF9 00001670            398      jmp OP_UNSUPPORTED_OPCODE                       ;15
0000126A                           399  
0000126A                           400  ;OP_0001_TABLE:
0000126A                           401  ;    jmp OP_MOVEB
0000126A                           402  
0000126A                           403  
0000126A                           404  ;OP_0010_TABLE:
0000126A                           405  ;   jmp OP_MOVEAL
0000126A                           406  ;   jmp OP_MOVEL
0000126A                           407  
0000126A                           408  
0000126A                           409  ;OP_0011_TABLE:
0000126A                           410  
0000126A                           411  
0000126A                           412  
0000126A                           413  ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP     $4
0000126A                           414  ;NOP    1110
0000126A                           415  ;MOVEM  1D00
0000126A                           416  ;LEA    AN1
0000126A                           417  OP_0100_TABLE:
0000126A  4EF9 00001670            418      jmp OP_UNSUPPORTED_OPCODE                           ;0  
00001270  4EF9 000014BE            419      jmp OP_LEA                                          ;1      (address 0001)
00001276  4EF9 00001670            420      jmp OP_UNSUPPORTED_OPCODE                           ;2
0000127C  4EF9 000014BE            421      jmp OP_LEA                                          ;3      (address 0011)
00001282  4EF9 00001670            422      jmp OP_UNSUPPORTED_OPCODE                           ;4 
00001288  4EF9 000014BE            423      jmp OP_LEA                                          ;5      (address 0101)
0000128E  4EF9 00001670            424      jmp OP_UNSUPPORTED_OPCODE                           ;6 
00001294  4EF9 000014BE            425      jmp OP_LEA                                          ;7      (address 0111) 
0000129A  4EF9 00001624            426      jmp OP_MOVEM_R2M                                    ;8 
000012A0  4EF9 000014BE            427      jmp OP_LEA                                          ;9      (address 1001) 
000012A6  4EF9 00001670            428      jmp OP_UNSUPPORTED_OPCODE                           ;10 
000012AC  4EF9 000014BE            429      jmp OP_LEA                                          ;11     (address 1011) 
000012B2  4EF9 0000164A            430      jmp OP_MOVEM_M2R                                    ;12 
000012B8  4EF9 000014BE            431      jmp OP_LEA                                          ;13     (address 1101)
000012BE  4EF9 000014AE            432      jmp OP_NOP                                          ;14
000012C4  4EF9 000014BE            433      jmp OP_LEA                                          ;15     (address 1111)
000012CA                           434  
000012CA                           435  
000012CA                           436  ;OP_0101_TABLE:
000012CA                           437  
000012CA                           438  
000012CA                           439  
000012CA                           440  ;BRA nibble 2 = 0000 (0) , BSR nibble 2 = 0001 (1)
000012CA                           441  OP_0110_TABLE:
000012CA  4EF9 000014F8            442      jmp OP_BRA                                          ;0
000012D0  4EF9 0000150E            443      jmp OP_BSR                                          ;1
000012D6  4EF9 00001670            444      jmp OP_UNSUPPORTED_OPCODE                           ;2
000012DC  4EF9 00001670            445      jmp OP_UNSUPPORTED_OPCODE                           ;3
000012E2  4EF9 00001670            446      jmp OP_UNSUPPORTED_OPCODE                           ;4
000012E8  4EF9 00001670            447      jmp OP_UNSUPPORTED_OPCODE                           ;5
000012EE  4EF9 00001670            448      jmp OP_UNSUPPORTED_OPCODE                           ;6
000012F4  4EF9 00001670            449      jmp OP_UNSUPPORTED_OPCODE                           ;7
000012FA  4EF9 00001670            450      jmp OP_UNSUPPORTED_OPCODE                           ;8
00001300  4EF9 00001670            451      jmp OP_UNSUPPORTED_OPCODE                           ;9
00001306  4EF9 00001670            452      jmp OP_UNSUPPORTED_OPCODE                           ;10
0000130C  4EF9 00001670            453      jmp OP_UNSUPPORTED_OPCODE                           ;11
00001312  4EF9 00001670            454      jmp OP_UNSUPPORTED_OPCODE                           ;12
00001318  4EF9 00001670            455      jmp OP_UNSUPPORTED_OPCODE                           ;13
0000131E  4EF9 00001670            456      jmp OP_UNSUPPORTED_OPCODE                           ;14
00001324  4EF9 00001670            457      jmp OP_UNSUPPORTED_OPCODE                           ;15
0000132A                           458  
0000132A                           459  
0000132A                           460  ;OP_0111_TABLE:
0000132A                           461  ;implement later if needed
0000132A                           462  
0000132A                           463  
0000132A                           464  ;OP_1000_TABLE:
0000132A                           465  ;implement later if needed
0000132A                           466  
0000132A                           467  
0000132A                           468  ;OP_1001_TABLE:
0000132A                           469  ;implement later if needed
0000132A                           470  
0000132A                           471  
0000132A                           472  ;OP_1010_TABLE:
0000132A                           473  ;implement later if needed
0000132A                           474  
0000132A                           475  
0000132A                           476  ;OP_1011_TABLE:
0000132A                           477  ;implement later if needed
0000132A                           478  
0000132A                           479  
0000132A                           480  ;OP_1100_TABLE:
0000132A                           481  ;implement later if needed
0000132A                           482  
0000132A                           483  
0000132A                           484  ;OP_1101_TABLE:
0000132A                           485  ;implement later if needed
0000132A                           486  
0000132A                           487  
0000132A                           488  ;OP_1110_TABLE:
0000132A                           489  ;implement later if needed
0000132A                           490  
0000132A                           491  
0000132A                           492  ;OP_1111_TABLE:
0000132A                           493  ;implement later if needed
0000132A                           494  
0000132A                           495  
0000132A                           496  
0000132A                           497  
0000132A                           498  ;******************************** OP_INSTRUCTION_XXXX******************************************
0000132A                           499  ;this is where we are putting ascii text into buffer
0000132A                           500  
0000132A                           501  
0000132A                           502  OP_ORI:
0000132A  14FC 004F                503      MOVE.B  #'O', (A2)+
0000132E  14FC 0052                504      MOVE.B  #'R', (A2)+
00001332  14FC 0049                505      MOVE.B  #'I', (A2)+
00001336                           506      
00001336                           507      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001336  4EB9 00001670            508      JSR     OP_CHECK_SIZE
0000133C                           509      
0000133C  7200                     510      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
0000133E                           511  
0000133E  4EB9 0000179A            512      JSR     EA_START
00001344  4EF8 109A                513      JMP     OP_FINISH
00001348                           514  
00001348                           515  OP_ANDI:  ;(optional)
00001348  14FC 0041                516      MOVE.B  #'A', (A2)+
0000134C  14FC 004E                517      MOVE.B  #'N', (A2)+
00001350  14FC 0044                518      MOVE.B  #'D', (A2)+
00001354  14FC 0049                519      MOVE.B  #'I', (A2)+
00001358                           520      
00001358                           521      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001358  4EB9 00001670            522      JSR     OP_CHECK_SIZE
0000135E                           523      
0000135E  7200                     524      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001360                           525  
00001360  4EB9 0000179A            526      JSR     EA_START
00001366  4EF8 109A                527      JMP     OP_FINISH
0000136A                           528  
0000136A                           529  
0000136A                           530  OP_SUBI:  ;(optional)
0000136A  14FC 0053                531      MOVE.B  #'S', (A2)+
0000136E  14FC 0055                532      MOVE.B  #'U', (A2)+
00001372  14FC 0042                533      MOVE.B  #'B', (A2)+
00001376  14FC 0049                534      MOVE.B  #'I', (A2)+
0000137A                           535      
0000137A                           536      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000137A  4EB9 00001670            537      JSR     OP_CHECK_SIZE
00001380                           538      
00001380  7200                     539      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
00001382                           540  
00001382  4EB9 0000179A            541      JSR     EA_START
00001388  4EF8 109A                542      JMP     OP_FINISH
0000138C                           543  
0000138C                           544  
0000138C                           545  OP_ADDI:  ;(optional)
0000138C  14FC 0041                546      MOVE.B  #'A', (A2)+
00001390  14FC 0044                547      MOVE.B  #'D', (A2)+
00001394  14FC 0044                548      MOVE.B  #'D', (A2)+
00001398  14FC 0049                549      MOVE.B  #'I', (A2)+
0000139C                           550      
0000139C                           551      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000139C  4EB9 00001670            552      JSR     OP_CHECK_SIZE
000013A2                           553     
000013A2  7200                     554      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013A4                           555  
000013A4  4EB9 0000179A            556      JSR     EA_START
000013AA  4EF8 109A                557      JMP     OP_FINISH
000013AE                           558  
000013AE                           559  
000013AE                           560  OP_EORI:  ;(optional)
000013AE  14FC 0045                561      MOVE.B  #'E', (A2)+
000013B2  14FC 004F                562      MOVE.B  #'O', (A2)+
000013B6  14FC 0052                563      MOVE.B  #'R', (A2)+
000013BA  14FC 0049                564      MOVE.B  #'I', (A2)+
000013BE                           565      
000013BE                           566      ;call OP_CHECK_SIZE to append a .b/.w/.l
000013BE  4EB9 00001670            567      JSR     OP_CHECK_SIZE
000013C4                           568      
000013C4  7200                     569      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013C6                           570      
000013C6  4EB9 0000179A            571      JSR     EA_START
000013CC  4EF8 109A                572      JMP     OP_FINISH
000013D0                           573  
000013D0                           574  
000013D0                           575  OP_CMPI:  ;(optional)
000013D0  14FC 0043                576      MOVE.B  #'C', (A2)+
000013D4  14FC 004D                577      MOVE.B  #'M', (A2)+
000013D8  14FC 0050                578      MOVE.B  #'P', (A2)+
000013DC  14FC 0049                579      MOVE.B  #'I', (A2)+
000013E0                           580      
000013E0                           581      
000013E0                           582      ;call OP_CHECK_SIZE to append a .b/.w/.l
000013E0  4EB9 00001670            583      JSR     OP_CHECK_SIZE
000013E6                           584  
000013E6  7200                     585      MOVE.L  #ea_type_immediate, D1              ;preps for EA_START and puts 0 into D1
000013E8                           586  
000013E8  4EB9 0000179A            587      JSR     EA_START
000013EE  4EF8 109A                588      JMP     OP_FINISH
000013F2                           589  
000013F2                           590  
000013F2                           591  OP_MOVEB:
000013F2  14FC 004D                592      MOVE.B  #'M', (A2)+
000013F6  14FC 004F                593      MOVE.B  #'O', (A2)+
000013FA  14FC 0056                594      MOVE.B  #'V', (A2)+
000013FE  14FC 0045                595      MOVE.B  #'E', (A2)+
00001402  14FC 002E                596      MOVE.B  #'.', (A2)+
00001406  14FC 0042                597      MOVE.B  #'B', (A2)+
0000140A                           598      
0000140A  7201                     599      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
0000140C                           600      
0000140C  4EB9 0000179A            601      JSR     EA_START
00001412  4EF8 109A                602      JMP     OP_FINISH
00001416                           603  
00001416                           604  OP_MOVEAL:
00001416  14FC 004D                605      MOVE.B  #'M', (A2)+
0000141A  14FC 004F                606      MOVE.B  #'O', (A2)+
0000141E  14FC 0056                607      MOVE.B  #'V', (A2)+
00001422  14FC 0045                608      MOVE.B  #'E', (A2)+
00001426  14FC 0041                609      MOVE.B  #'A', (A2)+
0000142A  14FC 002E                610      MOVE.B  #'.', (A2)+
0000142E  14FC 004C                611      MOVE.B  #'L', (A2)+
00001432                           612      
00001432  7202                     613      MOVE.L  #ea_type_movea, D1                   ;preps for EA_START and puts 2 into D1
00001434                           614      
00001434  4EB9 0000179A            615      JSR     EA_START
0000143A  4EF8 109A                616      JMP     OP_FINISH
0000143E                           617  
0000143E                           618  OP_MOVEL:
0000143E  14FC 004D                619      MOVE.B  #'M', (A2)+
00001442  14FC 004F                620      MOVE.B  #'O', (A2)+
00001446  14FC 0056                621      MOVE.B  #'V', (A2)+
0000144A  14FC 0045                622      MOVE.B  #'E', (A2)+
0000144E  14FC 002E                623      MOVE.B  #'.', (A2)+
00001452  14FC 004C                624      MOVE.B  #'L', (A2)+
00001456                           625      
00001456  7201                     626      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
00001458                           627      
00001458  4EB9 0000179A            628      JSR     EA_START
0000145E  4EF8 109A                629      JMP     OP_FINISH
00001462                           630  
00001462                           631  
00001462                           632  OP_MOVEAW:
00001462  14FC 004D                633      MOVE.B  #'M', (A2)+
00001466  14FC 004F                634      MOVE.B  #'O', (A2)+
0000146A  14FC 0056                635      MOVE.B  #'V', (A2)+
0000146E  14FC 0045                636      MOVE.B  #'E', (A2)+
00001472  14FC 0041                637      MOVE.B  #'A', (A2)+
00001476  14FC 002E                638      MOVE.B  #'.', (A2)+
0000147A  14FC 0057                639      MOVE.B  #'W', (A2)+
0000147E                           640      
0000147E  7202                     641      MOVE.L  #ea_type_movea, D1                   ;preps for EA_START and puts 2 into D1
00001480                           642      
00001480  4EB9 0000179A            643      JSR     EA_START
00001486  4EF8 109A                644      JMP     OP_FINISH
0000148A                           645  
0000148A                           646  
0000148A                           647  OP_MOVEW:
0000148A  14FC 004D                648      MOVE.B  #'M', (A2)+
0000148E  14FC 004F                649      MOVE.B  #'O', (A2)+
00001492  14FC 0056                650      MOVE.B  #'V', (A2)+
00001496  14FC 0045                651      MOVE.B  #'E', (A2)+
0000149A  14FC 002E                652      MOVE.B  #'.', (A2)+
0000149E  14FC 0057                653      MOVE.B  #'W', (A2)+
000014A2                           654      
000014A2  7201                     655      MOVE.L  #ea_type_move, D1                   ;preps for EA_START and puts 1 into D1
000014A4                           656      
000014A4  4EB9 0000179A            657      JSR     EA_START
000014AA  4EF8 109A                658      JMP     OP_FINISH
000014AE                           659  
000014AE                           660  
000014AE                           661  OP_NOP:
000014AE  14FC 004E                662      MOVE.B  #'N', (A2)+
000014B2  14FC 004F                663      MOVE.B  #'O', (A2)+
000014B6  14FC 0050                664      MOVE.B  #'P', (A2)+
000014BA                           665      
000014BA  4EF8 109A                666      JMP     OP_FINISH
000014BE                           667  
000014BE                           668  
000014BE                           669  OP_MOVEM:
000014BE                           670      ;see movemd2r or movemr2d... see below at bottom
000014BE                           671  
000014BE                           672  
000014BE                           673  OP_LEA:
000014BE  14FC 004C                674      MOVE.B  #'L', (A2)+
000014C2  14FC 0045                675      MOVE.B  #'E', (A2)+
000014C6  14FC 0041                676      MOVE.B  #'A', (A2)+
000014CA                           677      
000014CA  7203                     678      MOVE.L  #ea_type_lea, D1                   ;preps for EA_START and puts 3 into D1
000014CC                           679      
000014CC  4EB9 0000179A            680      JSR     EA_START
000014D2  4EF8 109A                681      JMP     OP_FINISH
000014D6                           682  
000014D6                           683  OP_CLR:  ;(optional)
000014D6                           684  ;implement later if needed
000014D6                           685  
000014D6                           686  
000014D6                           687  OP_NOT:  ;(optional)
000014D6                           688  ;implement later if needed
000014D6                           689  
000014D6                           690  
000014D6                           691  OP_EXT:  ;(optional)
000014D6                           692  ;implement later if needed
000014D6                           693  
000014D6                           694  
000014D6                           695  OP_TRAP:  ;(optional)
000014D6                           696  ;implement later if needed
000014D6                           697  
000014D6                           698   
000014D6                           699  OP_STOP:  ;(optional)
000014D6                           700  ;implement later if needed
000014D6                           701  
000014D6                           702  
000014D6                           703  OP_RTE:  ;(optional)
000014D6                           704  ;implement later if needed
000014D6                           705  
000014D6                           706  
000014D6                           707  OP_RTS:  ;(optional)
000014D6                           708  ;implement later if needed
000014D6                           709  
000014D6                           710  
000014D6                           711  OP_JSR:  ;(optional)
000014D6                           712  ;implement later if needed
000014D6                           713  
000014D6                           714  
000014D6                           715  OP_JMP:  ;(optional)
000014D6                           716  ;implement later if needed
000014D6                           717  
000014D6                           718  
000014D6                           719  OP_ADDQ:
000014D6  14FC 0041                720      MOVE.B  #'A', (A2)+
000014DA  14FC 0044                721      MOVE.B  #'D', (A2)+
000014DE  14FC 0044                722      MOVE.B  #'D', (A2)+
000014E2  14FC 0051                723      MOVE.B  #'Q', (A2)+
000014E6                           724      
000014E6                           725      ;call OP_CHECK_SIZE to append a .b/.w/.l
000014E6  4EB9 00001670            726      JSR     OP_CHECK_SIZE
000014EC                           727  
000014EC  7208                     728      MOVE.L  #ea_type_quick, D1                   ;preps for EA_START and puts 8 into D1
000014EE                           729  
000014EE  4EB9 0000179A            730      JSR     EA_START
000014F4  4EF8 109A                731      JMP     OP_FINISH
000014F8                           732  
000014F8                           733  OP_SUBQ:  ;(optional)
000014F8                           734  ;implement later if needed
000014F8                           735  
000014F8                           736  
000014F8                           737  OP_BRA:                                     ;???? DO WE DEFINE SIZE HERE OR AFTER????
000014F8  14FC 0042                738      MOVE.B  #'B', (A2)+
000014FC  14FC 0052                739      MOVE.B  #'R', (A2)+
00001500  14FC 0041                740      MOVE.B  #'A', (A2)+
00001504                           741  
00001504  4EB9 0000179A            742      JSR     EA_START                        ;? DO WE HAVE EA?
0000150A  4EF8 109A                743      JMP     OP_FINISH
0000150E                           744  
0000150E                           745  
0000150E                           746  OP_BSR:
0000150E  14FC 0042                747      MOVE.B  #'B', (A2)+
00001512  14FC 0053                748      MOVE.B  #'S', (A2)+
00001516  14FC 0052                749      MOVE.B  #'R', (A2)+
0000151A                           750  
0000151A  4EB9 0000179A            751      JSR     EA_START                        ;DO WE HAVE EA?
00001520  4EF8 109A                752      JMP     OP_FINISH
00001524                           753  
00001524                           754  
00001524                           755  OP_BEQ:
00001524                           756  ;implement later if needed
00001524                           757  
00001524                           758  
00001524                           759  OP_MOVEQ:
00001524  14FC 004D                760      MOVE.B  #'M', (A2)+
00001528  14FC 004F                761      MOVE.B  #'O', (A2)+
0000152C  14FC 0056                762      MOVE.B  #'V', (A2)+
00001530  14FC 0045                763      MOVE.B  #'E', (A2)+
00001534  14FC 0051                764      MOVE.B  #'Q', (A2)+
00001538                           765      
00001538                           766      ;DO WE NEED A .L ?
00001538                           767      
00001538  7208                     768      MOVE.L  #ea_type_quick, D1                   ;preps for EA_START and puts 8 into D1
0000153A                           769      
0000153A  4EB9 0000179A            770      JSR     EA_START
00001540  4EF8 109A                771      JMP     OP_FINISH
00001544                           772  
00001544                           773  
00001544                           774  OP_DIVU:
00001544  14FC 0044                775      MOVE.B  #'D', (A2)+
00001548  14FC 0049                776      MOVE.B  #'I', (A2)+
0000154C  14FC 0056                777      MOVE.B  #'V', (A2)+
00001550  14FC 0055                778      MOVE.B  #'U', (A2)+
00001554                           779      ;MOVE.B  #'.', (A2)+
00001554                           780      ;MOVE.B  #'W', (A2)+  
00001554                           781    
00001554  4EB9 0000179A            782      JSR     EA_START
0000155A  4EF8 109A                783      JMP     OP_FINISH    
0000155E                           784  
0000155E                           785  
0000155E                           786  OP_DIVS  ;(optional)
0000155E                           787  ;implement later if needed
0000155E                           788  
0000155E                           789  
0000155E                           790  OP_OR  ;(optional)
0000155E                           791  ;implement later if needed
0000155E                           792  
0000155E                           793  
0000155E                           794  OP_SUB:
0000155E  14FC 0053                795      MOVE.B  #'S', (A2)+
00001562  14FC 0055                796      MOVE.B  #'U', (A2)+
00001566  14FC 0042                797      MOVE.B  #'B', (A2)+
0000156A                           798  
0000156A                           799      ;to determine size... bits 7 and 6? (.b, .w, .l)
0000156A                           800      ;D0 HAS COMPLETE OP CODE INSTRUCTION (XXXX)
0000156A                           801      
0000156A                           802      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000156A  4EB9 00001670            803      JSR     OP_CHECK_SIZE
00001570                           804      
00001570                           805      ;at this point it will return with SUB.X and go to EA_START
00001570  4EB9 0000179A            806      JSR     EA_START
00001576  4EF8 109A                807      JMP     OP_FINISH    
0000157A                           808  
0000157A                           809  
0000157A                           810  OP_CMP:
0000157A  14FC 0043                811      MOVE.B  #'C', (A2)+
0000157E  14FC 004D                812      MOVE.B  #'M', (A2)+
00001582  14FC 0050                813      MOVE.B  #'P', (A2)+
00001586                           814  
00001586                           815      ;call OP_CHECK_SIZE to append a .b/.w/.l    
00001586  4EB9 00001670            816      JSR     OP_CHECK_SIZE
0000158C                           817      
0000158C                           818      ;at this point it will return with SUB.X and go to EA_START
0000158C  4EB9 0000179A            819      JSR     EA_START
00001592  4EF8 109A                820      JMP     OP_FINISH    
00001596                           821      
00001596                           822  
00001596                           823  
00001596                           824  OP_EOR:  ;(optional)
00001596                           825  ;implement later if needed
00001596                           826  
00001596                           827  
00001596                           828  OP_MULU:
00001596  14FC 004D                829      MOVE.B  #'M', (A2)+
0000159A  14FC 0055                830      MOVE.B  #'U', (A2)+
0000159E  14FC 004C                831      MOVE.B  #'L', (A2)+
000015A2  14FC 0055                832      MOVE.B  #'U', (A2)+
000015A6                           833  
000015A6  4EB9 0000179A            834      JSR     EA_START
000015AC  4EF8 109A                835      JMP     OP_FINISH    
000015B0                           836  
000015B0                           837  OP_MULS:  ;(optional)
000015B0                           838  ;implement later if needed
000015B0                           839  
000015B0                           840  
000015B0                           841  OP_AND:  ;(optional)
000015B0                           842  ;implement later if needed
000015B0                           843  
000015B0                           844  
000015B0                           845  OP_ADD:
000015B0  14FC 0041                846      MOVE.B  #'A', (A2)+
000015B4  14FC 0044                847      MOVE.B  #'D', (A2)+
000015B8  14FC 0044                848      MOVE.B  #'D', (A2)+
000015BC                           849  
000015BC                           850      ;call OP_CHECK_SIZE to append a .b/.w/.l
000015BC  4EB9 00001670            851      JSR     OP_CHECK_SIZE
000015C2                           852  
000015C2  4EB9 0000179A            853      JSR     EA_START
000015C8  4EF8 109A                854      JMP     OP_FINISH
000015CC                           855  
000015CC                           856  OP_ADDA:
000015CC  14FC 0041                857      MOVE.B  #'A', (A2)+
000015D0  14FC 0044                858      MOVE.B  #'D', (A2)+
000015D4  14FC 0044                859      MOVE.B  #'D', (A2)+
000015D8  14FC 0041                860      MOVE.B  #'A', (A2)+
000015DC                           861  
000015DC                           862      ;call OP_CHECK_SIZE to append a .b/.w/.l
000015DC  4EB9 000016B2            863      JSR     OP_CHECK_SIZE_ADDA
000015E2                           864  
000015E2  4EB9 0000179A            865      JSR     EA_START
000015E8  4EF8 109A                866      JMP     OP_FINISH
000015EC                           867  
000015EC                           868  
000015EC                           869  OP_ASL:
000015EC  14FC 0041                870      MOVE.B  #'A', (A2)+
000015F0  14FC 0053                871      MOVE.B  #'S', (A2)+
000015F4  14FC 004C                872      MOVE.B  #'L', (A2)+
000015F8                           873  
000015F8                           874      ;call OP_CHECK_SIZE to append a .b/.w/.l
000015F8  4EB9 00001670            875      JSR     OP_CHECK_SIZE
000015FE                           876  
000015FE  4EB9 0000179A            877      JSR     EA_START
00001604  4EF8 109A                878      JMP     OP_FINISH
00001608                           879  
00001608                           880  
00001608                           881  OP_ASR:
00001608  14FC 0041                882      MOVE.B  #'A', (A2)+
0000160C  14FC 0053                883      MOVE.B  #'S', (A2)+
00001610  14FC 0052                884      MOVE.B  #'R', (A2)+
00001614                           885  
00001614                           886      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001614  4EB9 00001670            887      JSR     OP_CHECK_SIZE
0000161A                           888  
0000161A  4EB9 0000179A            889      JSR     EA_START
00001620  4EF8 109A                890      JMP     OP_FINISH
00001624                           891  
00001624                           892  OP_LSL:  ;(optional)
00001624                           893  ;implement later if needed
00001624                           894  
00001624                           895  
00001624                           896  
00001624                           897  OP_LSR:  ;(optional)
00001624                           898  ;implement later if needed
00001624                           899  
00001624                           900  
00001624                           901  
00001624                           902  OP_ROL:  ;(optional)
00001624                           903  ;implement later if needed
00001624                           904  
00001624                           905  
00001624                           906  
00001624                           907  OP_ROR:  ;(optional)
00001624                           908  ;implement later if needed
00001624                           909  
00001624                           910  
00001624                           911  
00001624                           912  OP_MOVEM_R2M:
00001624  14FC 004D                913      MOVE.B  #'M', (A2)+
00001628  14FC 004F                914      MOVE.B  #'O', (A2)+
0000162C  14FC 0056                915      MOVE.B  #'V', (A2)+
00001630  14FC 0045                916      MOVE.B  #'E', (A2)+
00001634  14FC 004D                917      MOVE.B  #'M', (A2)+
00001638                           918      
00001638                           919      ;call OP_CHECK_SIZE to append a .b/.w/.l
00001638  4EB9 00001670            920      JSR     OP_CHECK_SIZE
0000163E                           921      
0000163E  7206                     922      MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
00001640                           923      
00001640  4EB9 0000179A            924      JSR     EA_START
00001646  4EF8 109A                925      JMP     OP_FINISH
0000164A                           926  
0000164A                           927  
0000164A                           928  OP_MOVEM_M2R:
0000164A  14FC 004D                929      MOVE.B  #'M', (A2)+
0000164E  14FC 004F                930      MOVE.B  #'O', (A2)+
00001652  14FC 0056                931      MOVE.B  #'V', (A2)+
00001656  14FC 0045                932      MOVE.B  #'E', (A2)+
0000165A  14FC 004D                933      MOVE.B  #'M', (A2)+
0000165E                           934      
0000165E                           935      ;call OP_CHECK_SIZE to append a .b/.w/.l
0000165E  4EB9 00001670            936      JSR     OP_CHECK_SIZE
00001664                           937      
00001664  7206                     938      MOVE.L  #ea_type_movem, D1                   ;preps for EA_START and puts 6 into D1
00001666                           939      
00001666  4EB9 0000179A            940      JSR     EA_START
0000166C  4EF8 109A                941      JMP     OP_FINISH
00001670                           942  
00001670                           943  
00001670                           944  OP_UNSUPPORTED_OPCODE:
00001670                           945  ;fill out
00001670                           946  
00001670                           947  ;D0 HAS COMPLETE INSTRUCTION
00001670                           948  OP_CHECK_SIZE:
00001670  4241                     949      CLR     D1                                  ;CLEAR D1
00001672  4242                     950      CLR     D2                                  ;clear D2
00001674  2200                     951      MOVE.L  D0,D1                               ;D0 and D1 both have complete opcode
00001676  0241 00F0                952      ANDI.W  #nibble3,D1                         ;isolate nibble 3
0000167A  143C 0006                953      MOVE.B  #right6, D2                         ;putting immediate value 6 in D2
0000167E  E469                     954      LSR.W   D2, D1                              ;bits 7,6 --> bits 1,0
00001680                           955      
00001680                           956       
00001680  B27C 0000                957      CMP     #00,D1                              ;compare bits 1,0 to 00
00001684  6700 000E                958      BEQ     OP_SIZE_BYTE                        ;if bits == 00, size byte
00001688  B27C 0001                959      CMP     #01,D1                              ;compare bits to 01
0000168C  6700 0010                960      BEQ     OP_SIZE_WORD                        ;if bits == 01, size word
00001690  6000 0016                961      BRA     OP_SIZE_LONG                        ;else size long
00001694                           962  
00001694                           963  OP_SIZE_BYTE
00001694  14FC 002E                964      MOVE.B  #'.', (A2)+
00001698  14FC 0042                965      MOVE.B  #'B', (A2)+
0000169C  4E75                     966      RTS
0000169E                           967  
0000169E                           968  OP_SIZE_WORD
0000169E  14FC 002E                969      MOVE.B  #'.', (A2)+
000016A2  14FC 0057                970      MOVE.B  #'W', (A2)+
000016A6  4E75                     971      RTS
000016A8                           972  
000016A8                           973  
000016A8                           974  OP_SIZE_LONG
000016A8  14FC 002E                975      MOVE.B  #'.', (A2)+
000016AC  14FC 004C                976      MOVE.B  #'L', (A2)+
000016B0  4E75                     977      RTS
000016B2                           978  
000016B2                           979  
000016B2                           980  OP_CHECK_SIZE_ADDA:
000016B2  4241                     981      CLR     D1                                  ;CLEAR D1
000016B4  4242                     982      CLR     D2                                  ;clear D2
000016B6  2200                     983      MOVE.L  D0,D1                               ;D0 and D1 both have complete opcode
000016B8  0241 0F00                984      ANDI.W  #nibble2,D1                         ;isolate nibble 2
000016BC  143C 0008                985      MOVE.B  #right8, D2                         ;putting immediate value 8 in D2
000016C0  E469                     986      LSR.W   D2, D1                              ;
000016C2                           987      
000016C2                           988      ;at this point we have our single bit in bit 0
000016C2                           989      
000016C2  0241 0001                990      ANDI.W  #0001,D1                            ;isolate bit 0
000016C6  B27C 0000                991      CMP     #0,D1                               ;check if bit == 0
000016CA  67D2                     992      BEQ     OP_SIZE_WORD                        ;if yes, size = word
000016CC  60DA                     993      BRA     OP_SIZE_LONG                        ;else, size = long
000016CE                           994  
000016CE                           995   
000016CE                           996  
000016CE                           997  ;******************************** ATOI *********************************************
000016CE                           998  ATOI:
000016CE  2401                     999          MOVE.L      D1,D2                   ;loop variable (size) is in D2
000016D0  2449                    1000          MOVEA.L     A1,A2                   ;pointer to next char
000016D2  4244                    1001          CLR         D4
000016D4                          1002  
000016D4                          1003  ATOI_LOOP  
000016D4  4243                    1004          CLR         D3                      ;clear d3
000016D6                          1005          ;CMP.B       #0,D2
000016D6                          1006          ;BEQ         ATOI_DONE               ;DONE
000016D6  5382                    1007          SUBI.L      #1,D2                   ;subtract 1 from loop counter
000016D8  161A                    1008          MOVE.B      (A2)+,D3                 ;move current byte to D3, then increment to next
000016DA  B63C 002F               1009          CMP.B       #$2F,D3
000016DE  6F00 0060               1010          BLE         ATOI_ERROR              ;if less than 30, not a number, branch to error
000016E2  B63C 0039               1011          CMP.B       #$39,D3                 ;check byte to see if number or letter
000016E6  6F00 002A               1012          BLE         ATOI_NUMBER             ;30<x<39 --> number
000016EA  B63C 0040               1013          CMP.B       #$40,D3
000016EE  6F00 0050               1014          BLE         ATOI_ERROR
000016F2  B63C 0046               1015          CMP.B       #$46,D3
000016F6  6F00 0024               1016          BLE         ATOI_UPPERCASE_LETTER   ;less than 47, it is uppercase letter
000016FA  B63C 0060               1017          CMP.B       #$60,D3
000016FE  6F00 0040               1018          BLE         ATOI_ERROR
00001702  B63C 0066               1019          CMP.B       #$66,D3
00001706  6F00 001E               1020          BLE         ATOI_LOWERCASE_LETTER
0000170A  B63C 0067               1021          CMP.B       #$67,D3
0000170E  6C00 0030               1022          BGE         ATOI_ERROR
00001712                          1023          
00001712                          1024          ;BNE         ATOI_LOOP                    ;run loop
00001712                          1025      
00001712                          1026  
00001712                          1027  ATOI_NUMBER
00001712                          1028  ;number --> d1 = d1 - $30
00001712  0403 0030               1029      SUBI.B          #$30, D3                    ;subtract 30 if number
00001716                          1030      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
00001716  4EF9 00001730           1031      JMP             ATOI_FORMAT                 ;testing
0000171C                          1032      ;JMP            ATOI_LOOP                   ;loop
0000171C                          1033  
0000171C                          1034  ATOI_UPPERCASE_LETTER
0000171C                          1035  ;letter --> d1 = d1 - $37
0000171C  0403 0037               1036      SUBI.B          #$37,D3                     ;subtract 37 if UPPER case letter
00001720                          1037      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
00001720  4EF9 00001730           1038      JMP             ATOI_FORMAT                 ;testing
00001726                          1039      ;JMP            ATOI_LOOP                   ;loop
00001726                          1040  
00001726                          1041  ATOI_LOWERCASE_LETTER
00001726  0403 0057               1042      SUBI.B          #$57,D3                     ;subtract 57(20 + 37)
0000172A                          1043      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
0000172A  4EF9 00001730           1044      JMP             ATOI_FORMAT                 ;testing
00001730                          1045      ;JMP            ATOI_LOOP                  ;loop
00001730                          1046  
00001730                          1047  
00001730                          1048  ATOI_FORMAT
00001730  D803                    1049      ADD.B           D3,D4                       ;add the byte to D4 so can add later   
00001732  B43C 0000               1050      CMP.B           #0,D2                       
00001736  6700 0008               1051      BEQ             ATOI_DONE                   ;check if done (loop counter D2 is at 0)
0000173A  E984                    1052      ASL.L           #4,D4                       ;logical shift left to make room
0000173C  4EF8 16D4               1053      JMP             ATOI_LOOP                   ;go back to loop
00001740                          1054  
00001740                          1055  ATOI_ERROR
00001740                          1056      ;come back to handle error when out of range
00001740                          1057      
00001740                          1058  
00001740                          1059  ATOI_DONE 
00001740  2284                    1060      MOVE.L         D4,(A1)                      ;at this point, move the new address in D4 to mem location                                
00001742  4E75                    1061      RTS                                         ;used to RTS after a branch statement
00001744                          1062  
00001744                          1063  ;************************************* ITOA *********************************************
00001744                          1064  ;A0
00001744                          1065  ;A1
00001744                          1066  ;A2 = buffer (this is our decoded string that will print to screen)
00001744                          1067  ;A3
00001744                          1068  ;A4 = current memory address for buffer
00001744                          1069  ;A5 = starting address / current address in memory
00001744                          1070  ;A6 = ending address
00001744                          1071  ;A7 = SP
00001744                          1072  
00001744                          1073  ;D0 = counter
00001744                          1074  ;D1 = 
00001744                          1075  ;D2 = ?
00001744                          1076  ;D3 = buffer size (used for loop = 64)
00001744                          1077  ;D4 = value being converted
00001744                          1078  ;D5 =
00001744                          1079  ;D6 = 
00001744                          1080  ;D7 = 
00001744                          1081  ITOA:
00001744  280D                    1082      MOVE.L         A5,D4                    ;D4 has data to convert to ascii
00001746                          1083  
00001746                          1084  ITOA_LOOP:
00001746  BA3C 0000               1085      CMP.B           #0,D5
0000174A  6700 004C               1086      BEQ             ITOA_FINISH             ;when 0, branch to finish to complete
0000174E                          1087  
0000174E                          1088  
0000174E                          1089  
0000174E                          1090  
0000174E                          1091  ITOA_BYTE:
0000174E                          1092  
0000174E                          1093  
0000174E                          1094  
0000174E                          1095  ITOA_WORD:
0000174E                          1096  
0000174E                          1097  
0000174E                          1098  
0000174E                          1099  ITOA_LONG:
0000174E                          1100  
0000174E                          1101  
0000174E                          1102  
0000174E                          1103  ITOA_ADDRESS:
0000174E  4284                    1104      CLR.L       D4                          ;D4 = 0000 0000
00001750  280D                    1105      MOVE.L      A5,D4                       ;our address is now in D4 and ready to deconstruct
00001752  103C 0008               1106      MOVE.B      #8,D0                       ;counter
00001756  4EF9 0000175C           1107      JMP         ITOA_ADDRESS_LOOP
0000175C                          1108  ITOA_ADDRESS_LOOP:
0000175C  B03C 0000               1109      CMP.B       #0,D0                       ;check if done
00001760  6700 0036               1110      BEQ         ITOA_FINISH                 ;if at 0, branch to ITOA_FINISH
00001764  E99C                    1111      ROL.L       #4,D4                       ;rotate left 4 bits, to get MSB to beginning 
00001766  1204                    1112      MOVE.B      D4,D1                       ;store in D1 (this will be whole byte, we want half)
00001768  0241 000F               1113      ANDI.W      #$000F,D1                   ;character is now isolated
0000176C                          1114      
0000176C  4EB9 00001778           1115      JSR         ITOA_HEX2ASCII              ;JSR to convert
00001772  5340                    1116      SUBI        #1,D0                       ;subtract 1 from counter
00001774  4EF8 175C               1117      JMP         ITOA_ADDRESS_LOOP           ;loop again!
00001778                          1118  
00001778                          1119  ITOA_HEX2ASCII:
00001778  B23C 000A               1120      CMP.B       #$A,D1                      ;compare byte in D1 to hex value A
0000177C  6C00 0012               1121      BGE         ITOA_LETTER                 ;if greater than/equal A, it is letter
00001780  B23C 000A               1122      CMP.B       #$A,D1                      ;compare byte in D1 to hex value A
00001784  6D00 0002               1123      BLT         ITOA_NUMBER                 ;if less than, it is number
00001788                          1124  
00001788                          1125  ITOA_NUMBER:
00001788  0601 0030               1126      ADDI.B      #$30,D1                     ;add $30 to D1 to convert
0000178C  14C1                    1127      MOVE.B      D1,(A2)+                    ;add to buffer and increment to next position
0000178E  4E75                    1128      RTS
00001790                          1129  
00001790                          1130  ITOA_LETTER:
00001790  0601 0037               1131      ADDI.B      #$37,D1                     ;add 37 to D1 to convert
00001794  14C1                    1132      MOVE.B      D1,(A2)+                    ;add to buffer and increment to next position
00001796  4E75                    1133      RTS
00001798                          1134  
00001798                          1135  ITOA_FINISH:
00001798  4E75                    1136      RTS
0000179A                          1137  
0000179A                          1138  
0000179A                          1139  ;************************************ Validate Addresses ******************************************
0000179A                          1140  
0000179A                          1141  VALIDATE_BEGINNING:
0000179A                          1142      
0000179A                          1143  
0000179A                          1144  
0000179A                          1145  
0000179A                          1146  
0000179A                          1147  
0000179A                          1148  
0000179A                          1149  
0000179A                          1150  
0000179A                          1151  ;****************************************** EA Stuff ***************************************************** 
0000179A                          1152  
0000179A                          1153  EA_START:
0000179A  41F9 000017A8           1154      LEA         EA_TYPE_TABLE, A0
000017A0                          1155      
000017A0  C2FC 0006               1156      MULU        #6,D1               ;computes opcode table jump displacement
000017A4  4EF0 1000               1157      JMP         0(A0,D1)            ;jump to correct table input
000017A8                          1158  
000017A8                          1159  
000017A8                          1160  EA_TYPE_TABLE:
000017A8  4EF9 000017EC           1161      JMP         EA_IMMEDIATE
000017AE  4EF9 000017F4           1162      JMP         EA_MOVE             ;DONE
000017B4  4EF9 0000183E           1163      JMP         EA_MOVEA
000017BA  4EF9 0000183E           1164      JMP         EA_LEA
000017C0  4EF9 0000183E           1165      JMP         EA_DESTONLY
000017C6  4EF9 0000183E           1166      JMP         EA_EXT
000017CC  4EF9 0000183E           1167      JMP         EA_MOVEM
000017D2  4EF9 0000183E           1168      JMP         EA_TRAP
000017D8  4EF9 0000183E           1169      JMP         EA_QUICK
000017DE  4EF9 0000183E           1170      JMP         EA_BRANCH
000017E4  4EF9 000017EA           1171      JMP         EA_FINISH
000017EA                          1172  
000017EA                          1173  EA_FINISH:
000017EA  4E75                    1174      RTS ; TAKE OUT LATER
000017EC                          1175      
000017EC                          1176  
000017EC                          1177  
000017EC                          1178  ;********************************************  EA_TYPE  ****************************************************   
000017EC                          1179  
000017EC                          1180  EA_IMMEDIATE:                           ;value 0                ;    0001 0001                 11      ORI.B   #$1,D1
000017EC  14FC 0023               1181      MOVE.B  #'#',(A2)+
000017F0  14FC 0024               1182      MOVE.B  #'$',(A2)+
000017F4                          1183      
000017F4                          1184      ;buffer will have 'ORI.B #$'
000017F4                          1185      
000017F4                          1186      
000017F4                          1187      ;check size which is bits 6,7
000017F4                          1188      ;isolate source mode - bits 5,4,3
000017F4                          1189      ;isolate source register - bits 2,1,0
000017F4                          1190  
000017F4                          1191  
000017F4                          1192  
000017F4                          1193  ;D4 = mode      --> source / destination
000017F4                          1194  ;D5 = register  --> source / destination   
000017F4                          1195  EA_MOVE:
000017F4  14FC 0009               1196      MOVE.B      #$09, (A2)+             ;adds a ' ' to buffer
000017F8  41F9 0000183E           1197      LEA    EA_MODE_TABLE,A0             ;load table
000017FE                          1198      
000017FE                          1199      ;source mode are bits 3,4,5   |    ;source register are bits 0,1,2
000017FE                          1200      
000017FE                          1201      ;isolate source mode
000017FE  2800                    1202      MOVE.L  D0,D4
00001800  E64C                    1203      LSR.W   #3,D4
00001802  0244 0007               1204      ANDI.W  #$7,D4
00001806  C8FC 0006               1205      MULU    #6,D4
0000180A                          1206          
0000180A                          1207      ;isolate source register
0000180A  2A00                    1208      MOVE.L  D0,D5
0000180C  0245 0007               1209      ANDI.W  #$7,D5
00001810                          1210      
00001810  4EB9 0000183A           1211      JSR    EA_JMP_HELPER
00001816  14FC 002C               1212      MOVE.B  #',',(A2)+                  ;add ',' to buffer  
0000181A                          1213      
0000181A                          1214      ;isolate destination mode
0000181A  2800                    1215      MOVE.L  D0,D4
0000181C  EC4C                    1216      LSR.W   #6,D4
0000181E  0244 0007               1217      ANDI.W  #$7,D4
00001822  C8FC 0006               1218      MULU    #6,D4
00001826                          1219      
00001826                          1220      ;isolate destination register 
00001826  2A00                    1221      MOVE.L  D0,D5
00001828  E84D                    1222      LSR.W   #4,D5
0000182A  EA4D                    1223      LSR.W   #5,D5                       ;HAVE TO BREAK UP SHIFT TO STAY UNDER 8????
0000182C  0245 0007               1224      ANDI.W  #$7,D5   
00001830  4EB9 0000183A           1225      JSR    EA_JMP_HELPER
00001836                          1226  
00001836  4EF8 17EA               1227      JMP EA_FINISH
0000183A                          1228  
0000183A                          1229  EA_JMP_HELPER
0000183A  4EF0 4000               1230      JMP     0(A0,D4)
0000183E                          1231      
0000183E                          1232  
0000183E                          1233  
0000183E                          1234  EA_MOVEA:
0000183E                          1235  
0000183E                          1236  
0000183E                          1237  
0000183E                          1238  
0000183E                          1239  EA_LEA:
0000183E                          1240  
0000183E                          1241  
0000183E                          1242  
0000183E                          1243  
0000183E                          1244  
0000183E                          1245  EA_DESTONLY:
0000183E                          1246  
0000183E                          1247  
0000183E                          1248  
0000183E                          1249  
0000183E                          1250  
0000183E                          1251  EA_EXT:
0000183E                          1252  
0000183E                          1253  
0000183E                          1254  
0000183E                          1255  
0000183E                          1256  
0000183E                          1257  EA_MOVEM:
0000183E                          1258  
0000183E                          1259  
0000183E                          1260  
0000183E                          1261  
0000183E                          1262  EA_TRAP:
0000183E                          1263  
0000183E                          1264  
0000183E                          1265  
0000183E                          1266  
0000183E                          1267  
0000183E                          1268  EA_QUICK:
0000183E                          1269  
0000183E                          1270  
0000183E                          1271  
0000183E                          1272  
0000183E                          1273  EA_BRANCH:
0000183E                          1274  
0000183E                          1275  
0000183E                          1276  
0000183E                          1277  
0000183E                          1278  ;********************************************  EA_MODE_TABLE  ****************************************************  
0000183E                          1279  EA_MODE_TABLE:
0000183E  4EF9 0000186E           1280      JMP     EA_MODE_000
00001844  4EF9 0000187C           1281      JMP     EA_MODE_001
0000184A  4EF9 0000188A           1282      JMP     EA_MODE_010
00001850  4EF9 000018A0           1283      JMP     EA_MODE_011
00001856  4EF9 000018BA           1284      JMP     EA_MODE_100
0000185C  4EF9 000018D2           1285      JMP     EA_MODE_101
00001862  4EF9 000018D2           1286      JMP     EA_MODE_110
00001868  4EF9 000018D2           1287      JMP     EA_MODE_111
0000186E                          1288      ;JMP     EA_MODE_FINISH
0000186E                          1289  
0000186E                          1290  ;********************************************  EA_MODE_XXX  ****************************************************    
0000186E                          1291  EA_MODE_000:                                        ;Data register 'Dn'
0000186E  14FC 0044               1292      MOVE.B  #'D',(A2)+                              ;put D on buffer
00001872  1605                    1293      MOVE.B D5,D3                                    ;move to d3 for conversion
00001874  4EB9 000018D2           1294      JSR     EA_HEX_TO_ASCII                         ;puts register on buffer  
0000187A  4E75                    1295      RTS
0000187C                          1296      
0000187C                          1297  EA_MODE_001:                                        ;Address Register 'An'
0000187C  14FC 0041               1298      MOVE.B  #'A',(A2)+                              ;put A on buffer
00001880  1605                    1299      MOVE.B  D5,D3                                   ;move to d3 for conversion
00001882  4EB9 000018D2           1300      JSR     EA_HEX_TO_ASCII                         ;puts register on buffer  
00001888  4E75                    1301      RTS
0000188A                          1302  
0000188A                          1303  EA_MODE_010:                                        ;Address direct --> '(An)'
0000188A  14FC 0028               1304      MOVE.B  #'(',(A2)+                              ;put ( on buffer
0000188E  14FC 0041               1305      MOVE.B  #'A',(A2)+                              ;put A on buffer
00001892  1605                    1306      MOVE.B  D5,D3                                   ;move to D3 for conversion
00001894  4EB9 000018D2           1307      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
0000189A  14FC 0029               1308      MOVE.B  #')',(A2)+                              ;put ) on buffer
0000189E  4E75                    1309      RTS
000018A0                          1310  
000018A0                          1311  EA_MODE_011:                                        ;Address with Postincrement --> '(An)+' 
000018A0  14FC 0028               1312      MOVE.B  #'(',(A2)+                              ;put ( on buffer
000018A4  14FC 0041               1313      MOVE.B  #'A',(A2)+                              ;put A on buffer
000018A8  1605                    1314      MOVE.B  D5,D3                                   ;move to D3 for conversion
000018AA  4EB9 000018D2           1315      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
000018B0  14FC 0029               1316      MOVE.B  #')',(A2)+                              ;put ) on buffer
000018B4  14FC 002B               1317      MOVE.B  #'+',(A2)+                              ;put + on buffer
000018B8  4E75                    1318      RTS
000018BA                          1319  
000018BA                          1320  EA_MODE_100:                                        ;Address with Predecrement --> '-(An)'
000018BA  14FC 002D               1321      MOVE.B  #'-',(A2)+                              ;put - on buffer
000018BE  14FC 0028               1322      MOVE.B  #'(',(A2)+                              ;put ( on buffer
000018C2  14FC 0041               1323      MOVE.B  #'A',(A2)+                              ;put A on buffer
000018C6  1605                    1324      MOVE.B  D5,D3                                   ;move to D3 for conversion
000018C8  4EB9 000018D2           1325      JSR     EA_HEX_TO_ASCII                         ;convert and put on buffer   
000018CE  14FC 0029               1326      MOVE.B  #')',(A2)+                              ;put ) on buffer
000018D2                          1327  
000018D2                          1328  
000018D2                          1329  
000018D2                          1330  ;unsupported
000018D2                          1331  EA_MODE_101:                                        
000018D2                          1332  ;Address with Displacement --> '(d16, An)
000018D2                          1333      
000018D2                          1334  ;unsupported
000018D2                          1335  EA_MODE_110:
000018D2                          1336  
000018D2                          1337  
000018D2                          1338  
000018D2                          1339  EA_MODE_111:        
000018D2                          1340      
000018D2                          1341      
000018D2                          1342      
000018D2                          1343  
000018D2                          1344  EA_HEX_TO_ASCII
000018D2  0603 0030               1345      ADDI.B      #$30,D3                     ;add $30 to D1 to convert
000018D6  14C3                    1346      MOVE.B      D3,(A2)+                    ;add to buffer and increment to next position
000018D8  4E75                    1347      RTS     
000018DA                          1348      
000018DA                          1349  ;****************************************** MESSAGES ***************************************************
000018DA= 57 65 6C 63 6F 6D ...   1350  welcome_message         DC.B    'Welcome to 68k disassembler',CR,LF,0
000018F8                          1351  
000018F8= 50 6C 65 61 73 65 ...   1352  get_start_address       DC.B    'Please enter a starting address in hexadecimal',CR,LF,0
00001929                          1353  
00001929= 50 6C 65 61 73 65 ...   1354  get_end_address         DC.B    'Please enter an ending address in hexadecimal',CR,LF,0
00001959                          1355  
00001959= 49 6E 76 61 6C 69 ...   1356  atoi_error_invalid      DC.B    'Invalid address, characters must be $0-F',CR,LF,0
00001984                          1357  
00001984                          1358  ascii_start:
00001984                          1359      DS.w    10          ;specify size later?
00001998                          1360      
00001998                          1361  ascii_end:
00001998                          1362      DS.w    10          ;specify size later?
000019AC                          1363  
000019AC                          1364  buffer                  ;storing op code
000019AC                          1365      DS.W    64          ;do we leave as .w or change to .l ?
00001A2C                          1366      
00001A2C                          1367  
00001A2C                          1368      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_END           1998
ASCII_START         1984
ATOI                16CE
ATOI_DONE           1740
ATOI_ERROR          1740
ATOI_ERROR_INVALID  1959
ATOI_FORMAT         1730
ATOI_LOOP           16D4
ATOI_LOWERCASE_LETTER  1726
ATOI_NUMBER         1712
ATOI_UPPERCASE_LETTER  171C
BUFFER              19AC
BUFFER_SIZE         40
CR                  D
DECODING_LOOP       105E
DEST_MODE           1C0
DONE                1064
EA_BRANCH           183E
EA_DESTONLY         183E
EA_EXT              183E
EA_FINISH           17EA
EA_HEX_TO_ASCII     18D2
EA_IMMEDIATE        17EC
EA_JMP_HELPER       183A
EA_LEA              183E
EA_MODE_000         186E
EA_MODE_001         187C
EA_MODE_010         188A
EA_MODE_011         18A0
EA_MODE_100         18BA
EA_MODE_101         18D2
EA_MODE_110         18D2
EA_MODE_111         18D2
EA_MODE_TABLE       183E
EA_MOVE             17F4
EA_MOVEA            183E
EA_MOVEM            183E
EA_QUICK            183E
EA_START            179A
EA_TRAP             183E
EA_TYPE_BRANCH      9
EA_TYPE_DESTONLY    4
EA_TYPE_EXT         5
EA_TYPE_IMMEDIATE   0
EA_TYPE_LEA         3
EA_TYPE_MOVE        1
EA_TYPE_MOVEA       2
EA_TYPE_MOVEA6      C
EA_TYPE_MOVEM       6
EA_TYPE_QUICK       8
EA_TYPE_TABLE       17A8
EA_TYPE_TRAP        7
GET_ENDING_ADDRESS  1038
GET_END_ADDRESS     1929
GET_STARTING_ADDRESS  1012
GET_START_ADDRESS   18F8
ITOA                1744
ITOA_ADDRESS        174E
ITOA_ADDRESS_LOOP   175C
ITOA_BYTE           174E
ITOA_FINISH         1798
ITOA_HEX2ASCII      1778
ITOA_LETTER         1790
ITOA_LONG           174E
ITOA_LOOP           1746
ITOA_NUMBER         1788
ITOA_WORD           174E
LF                  A
LINES_PER_SCREEN    1E
NIBBLE2             F00
NIBBLE3             F0
NIBBLE4             F
OPCODE0000          1116
OPCODE0001          1130
OPCODE0010          1136
OPCODE0011          1150
OPCODE0100          116A
OPCODE0101          1184
OPCODE0110          118A
OPCODE0111          11A4
OPCODE1000          11AA
OPCODE1001          11B0
OPCODE1010          11B6
OPCODE1011          11BC
OPCODE1100          11C2
OPCODE1101          11C8
OPCODE1110          11E4
OPCODE1111          1204
OP_0000_TABLE       120A
OP_0100_TABLE       126A
OP_0110_TABLE       12CA
OP_ADD              15B0
OP_ADDA             15CC
OP_ADDI             138C
OP_ADDQ             14D6
OP_AND              15B0
OP_ANDI             1348
OP_ASL              15EC
OP_ASR              1608
OP_BEQ              1524
OP_BRA              14F8
OP_BSR              150E
OP_CHECK_SIZE       1670
OP_CHECK_SIZE_ADDA  16B2
OP_CLR              14D6
OP_CMP              157A
OP_CMPI             13D0
OP_DATA_CLR         10A0
OP_DATA_CLR_LOOP    10AC
OP_DIVS             155E
OP_DIVU             1544
OP_EOR              1596
OP_EORI             13AE
OP_EXT              14D6
OP_FINISH           109A
OP_JMP              14D6
OP_JSR              14D6
OP_LEA              14BE
OP_LSL              1624
OP_LSR              1624
OP_MOVEAL           1416
OP_MOVEAW           1462
OP_MOVEB            13F2
OP_MOVEL            143E
OP_MOVEM            14BE
OP_MOVEM_M2R        164A
OP_MOVEM_R2M        1624
OP_MOVEQ            1524
OP_MOVEW            148A
OP_MULS             15B0
OP_MULU             1596
OP_NOP              14AE
OP_NOT              14D6
OP_OR               155E
OP_ORI              132A
OP_ROL              1624
OP_ROR              1624
OP_RTE              14D6
OP_RTS              14D6
OP_SIZE_BYTE        1694
OP_SIZE_LONG        16A8
OP_SIZE_WORD        169E
OP_START            1068
OP_STOP             14D6
OP_SUB              155E
OP_SUBI             136A
OP_SUBQ             14F8
OP_TABLE            10B6
OP_TRAP             14D6
OP_UNSUPPORTED_OPCODE  1670
RIGHT1              1
RIGHT10             A
RIGHT12             C
RIGHT16             10
RIGHT2              2
RIGHT24             18
RIGHT3              3
RIGHT4              4
RIGHT5              5
RIGHT6              6
RIGHT7              7
RIGHT8              8
RIGHT9              9
STACK               A0000
START               1000
START_DECODING      105E
VALIDATE_BEGINNING  179A
WELCOME             1006
WELCOME_MESSAGE     18DA
