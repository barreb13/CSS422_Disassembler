00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2/19/2021 10:39:55 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler V1.2
00000000                             3  * Written by : Brent and Parker
00000000                             4  * Date       : 2/5/2021
00000000                             5  * Description: Final Project for CSS 422
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;************************ Define Constants ********************************* 
00000000  =0000000D                  9  CR                  EQU     $0D     ;carriage return
00000000  =0000000A                 10  LF                  EQU     $0a     ;line feed
00000000  =000A0000                 11  stack               EQU     $000A0000
00000000  =0000001E                 12  lines_per_screen    EQU     30
00000000  =00000040                 13  buffer_size         EQU     64      ;size of buffer
00000000  =00000F00                 14  nibble2             EQU     $0F00   ;2nd nibble in code (bits 11-8)
00000000  =000000F0                 15  nibble3             EQU     $00F0   ;3rd nibble in code (bits 7-4)
00000000  =0000000F                 16  nibble4             EQU     $000F   ;4th nibble in code (bits 3-0)
00000000  =00000001                 17  right1              EQU     1       ;shift 1 time
00000000  =00000002                 18  right2              EQU     2       ;shift 2 times
00000000  =00000003                 19  right3              EQU     3       ;shift 3 times to extract src mode
00000000  =00000004                 20  right4              EQU     4       ;shift 4 times to extract 3rd nibble
00000000  =00000005                 21  right5              EQU     5       ;shift 5 times (unused)
00000000  =00000006                 22  right6              EQU     6       ;shift 6 times to extract dst mode
00000000  =00000007                 23  right7              EQU     7       ;shift 7 times
00000000  =00000008                 24  right8              EQU     8       ;shift 8 to extract 2nd nibble
00000000  =00000009                 25  right9              EQU     9       ;shift 9 times to check 2nd nibble?
00000000  =0000000A                 26  right10             EQU     10      ;shift 10
00000000  =0000000C                 27  right12             EQU     12      ;shift 12 to extract 3rd byte
00000000  =00000010                 28  right16             EQU     16      ;shift 16 to extract 2nd byte
00000000  =00000018                 29  right24             EQU     24      ;shift 24 to extract 1st byte
00000000                            30  
00001000                            31      ORG    $1000
00001000                            32  START:                              ;first instruction of program
00001000  4FF9 000A0000             33      LEA     stack, SP               ;SP @ $A0000
00001006                            34  
00001006                            35  WELCOME:
00001006                            36  ;***************************** Welcome Message ********************************** 
00001006  43F9 00001144             37      LEA     welcome_message,A1      ;load the welcome message into A1
0000100C  103C 000E                 38      MOVE.B  #14,D0
00001010  4E4F                      39      TRAP    #15                     ;print contents of welcome_message
00001012                            40      
00001012                            41  
00001012                            42  GET_STARTING_ADDRESS:
00001012                            43  ;****************************** Get Starting Address ***************************** 
00001012  103C 000E                 44      MOVE.B  #14,D0    
00001016  43F9 00001162             45      LEA     get_start_address,A1    ;load the get_start_address message into A1
0000101C  4E4F                      46      TRAP    #15                     ;print get_start_address
0000101E                            47      
0000101E  43F9 000011EE             48      LEA     ascii_start,A1          ;store
00001024  103C 0002                 49      MOVE.B  #2,D0                   ;get user input    
00001028  4E4F                      50      TRAP    #15                     ;another trap to get input
0000102A  4EB9 000010CE             51      JSR     ATOI                    ;address is now in hex format in memory location
00001030                            52      
00001030                            53      ;??                             MOVE.L  (A1),D3
00001030                            54      
00001030                            55      ;perform checks (later)
00001030                            56      
00001030                            57      
00001030  2A39 000011EE             58      MOVE.l    (ascii_start),D5      ;load into A5
00001036  2A45                      59      MOVE.l    D5,A5                ;load into A5
00001038                            60  
00001038                            61  GET_ENDING_ADDRESS: 
00001038                            62  ;*************************** Get Ending Address ******************************* 
00001038  103C 000E                 63      MOVE.B  #14,D0
0000103C  43F9 00001193             64      LEA     get_end_address,A1      ;load the get_end_address message into A1  
00001042  4E4F                      65      TRAP    #15                     ;print get_end_address
00001044                            66      
00001044  43F9 00001202             67      LEA     ascii_end,A1            ;store 
0000104A  103C 0002                 68      MOVE.B  #2,D0                   ;get user input
0000104E  4E4F                      69      TRAP    #15                     ;another trap to get intput
00001050  4EB9 000010CE             70      JSR ATOI
00001056                            71  
00001056                            72      ;perform checks (later)
00001056                            73  
00001056  2C39 00001202             74      MOVE.l    (ascii_end),D6      ;load into A5
0000105C  2C46                      75      MOVE.l    D6,A6                ;load into A5
0000105E                            76  
0000105E                            77  ;****************************** Main Loop???? ************************************ 
0000105E                            78  ;get pointer to first given address
0000105E                            79  ;pull hex code from that address and store in A1?
0000105E                            80  ;take hex code and go to OP_TABLE
0000105E                            81  
0000105E                            82  START_DECODING:
0000105E                            83      ;CLR.L   D2                             ;clear screen line counter
0000105E                            84  
0000105E                            85  DECODING_LOOP:
0000105E  4EB9 00001068             86      JSR     START_OPCODE                   ;get complete line of instruction to decode   
00001064                            87      ;print tot screen
00001064                            88      
00001064                            89      ;check if finished or if screen is filled
00001064                            90      ;handle checks
00001064                            91     
00001064                            92      
00001064                            93  DONE:
00001064  FFFF FFFF                 94      SIMHALT                                 ; halt simulator
00001068                            95  
00001068                            96  
00001068                            97  START_OPCODE: 
00001068                            98      ;get complete line? 
00001068                            99      ;everything happens in here
00001068                           100      
00001068                           101  
00001068                           102  CLEAR_BUFFER:
00001068                           103  
00001068                           104  
00001068                           105  ;********************************* jump table ****************************************
00001068                           106  
00001068                           107  OP_TABLE:
00001068  4EF9 000010C8            108          JMP         opcode0000              ;ORI (ANDI, SUBI, ADDI, EORI, CMPI)
0000106E  4EF9 000010CE            109          JMP         opcode0001              ;MOVE.B
00001074  4EF9 000010CE            110          JMP         opcode0010              ;MOVEA.L, MOVE.L
0000107A  4EF9 000010CE            111          JMP         opcode0011              ;MOVEA.W MOVE.W
00001080  4EF9 000010CE            112          JMP         opcode0100              ;NOP, MOVEM, LEA (CLR, NOT, EXT, TRAP, STOP, RTE, RTS, JSR, JMP
00001086  4EF9 000010CE            113          JMP         opcode0101              ;ADDQ (SUBQ)
0000108C  4EF9 000010CE            114          JMP         opcode0110              ;BRA.bw, BSR.bw (BEQ)
00001092  4EF9 000010CE            115          JMP         opcode0111              ;MOVEQ.l
00001098  4EF9 000010CE            116          JMP         opcode1000              ;DIVU (DIVS, OR)
0000109E  4EF9 000010CE            117          JMP         opcode1001              ;SUB
000010A4  4EF9 000010CE            118          JMP         opcode1010              ;not assigned
000010AA  4EF9 000010CE            119          JMP         opcode1011              ;CMP (EOR)
000010B0  4EF9 000010CE            120          JMP         opcode1100              ;MULU (MULS, AND)
000010B6  4EF9 000010CE            121          JMP         opcode1101              ;ADD, ADDA
000010BC  4EF9 000010CE            122          JMP         opcode1110              ;ASL, ASR (LSL, LSR, ROL, ROR)
000010C2  4EF9 000010CE            123          JMP         opcode1111              ;not assigned
000010C8                           124  
000010C8                           125  
000010C8                           126  opcode0000:
000010C8  2200                     127          MOVE.L      D0,D1
000010CA  0241 0F00                128          ANDI.W      #nibble2,D1
000010CE                           129  
000010CE                           130  
000010CE                           131  opcode0001:
000010CE                           132  
000010CE                           133  
000010CE                           134  
000010CE                           135  
000010CE                           136  opcode0010:
000010CE                           137  
000010CE                           138  
000010CE                           139  
000010CE                           140  
000010CE                           141  opcode0011:
000010CE                           142  
000010CE                           143  
000010CE                           144  
000010CE                           145  
000010CE                           146  opcode0100:
000010CE                           147  
000010CE                           148  
000010CE                           149  
000010CE                           150  
000010CE                           151  opcode0101:
000010CE                           152  
000010CE                           153  
000010CE                           154  
000010CE                           155  
000010CE                           156  opcode0110:
000010CE                           157  
000010CE                           158  
000010CE                           159  
000010CE                           160  
000010CE                           161  opcode0111:
000010CE                           162  
000010CE                           163  
000010CE                           164  
000010CE                           165  
000010CE                           166  opcode1000:
000010CE                           167  
000010CE                           168  
000010CE                           169  
000010CE                           170  
000010CE                           171  opcode1001:
000010CE                           172  
000010CE                           173  
000010CE                           174  
000010CE                           175  
000010CE                           176  opcode1010:
000010CE                           177  
000010CE                           178  
000010CE                           179  
000010CE                           180  
000010CE                           181  opcode1011:
000010CE                           182  
000010CE                           183  
000010CE                           184  
000010CE                           185  
000010CE                           186  opcode1100:
000010CE                           187  
000010CE                           188  
000010CE                           189  
000010CE                           190  
000010CE                           191  opcode1101:
000010CE                           192  
000010CE                           193  
000010CE                           194  
000010CE                           195  
000010CE                           196  opcode1110:
000010CE                           197  
000010CE                           198  
000010CE                           199  
000010CE                           200  
000010CE                           201  opcode1111:
000010CE                           202  
000010CE                           203  
000010CE                           204  
000010CE                           205  ;******************************** OP_XXX_TABLES ************************************
000010CE                           206  
000010CE                           207  OP_0000_TABLE:
000010CE                           208             
000010CE                           209  
000010CE                           210  
000010CE                           211  OP_0001_TABLE:
000010CE                           212  
000010CE                           213  
000010CE                           214  
000010CE                           215  OP_0010_TABLE:
000010CE                           216  
000010CE                           217  
000010CE                           218  
000010CE                           219  OP_0011_TABLE:
000010CE                           220  
000010CE                           221  
000010CE                           222  
000010CE                           223  OP_0100_TABLE:
000010CE                           224  
000010CE                           225  
000010CE                           226  
000010CE                           227  OP_0101_TABLE:
000010CE                           228  
000010CE                           229  
000010CE                           230  
000010CE                           231  OP_0110_TABLE:
000010CE                           232  
000010CE                           233  
000010CE                           234  
000010CE                           235  OP_0111_TABLE:
000010CE                           236  
000010CE                           237  
000010CE                           238  
000010CE                           239  OP_1000_TABLE:
000010CE                           240  
000010CE                           241  
000010CE                           242  
000010CE                           243  OP_1001_TABLE:
000010CE                           244  
000010CE                           245  
000010CE                           246  
000010CE                           247  OP_1010_TABLE:
000010CE                           248  
000010CE                           249  
000010CE                           250  
000010CE                           251  OP_1011_TABLE:
000010CE                           252  
000010CE                           253  
000010CE                           254  
000010CE                           255  OP_1100_TABLE:
000010CE                           256  
000010CE                           257  
000010CE                           258  
000010CE                           259  OP_1101_TABLE:
000010CE                           260  
000010CE                           261  
000010CE                           262  
000010CE                           263  OP_1110_TABLE:
000010CE                           264  
000010CE                           265  
000010CE                           266  
000010CE                           267  OP_1111_TABLE:
000010CE                           268  
000010CE                           269  
000010CE                           270  ;******************************** OP_INSTRUCTION_XXXX******************************************
000010CE                           271  
000010CE                           272  OP_ORI:
000010CE                           273  ;ATUALLY PRINTING CODE
000010CE                           274  ;
000010CE                           275  
000010CE                           276  
000010CE                           277  
000010CE                           278  OP_ANDI:  ;(optional)
000010CE                           279  
000010CE                           280  
000010CE                           281  
000010CE                           282  
000010CE                           283  OP_SUBI:  ;(optional)
000010CE                           284  
000010CE                           285  
000010CE                           286  
000010CE                           287  OP_ADDI:  ;(optional)
000010CE                           288  
000010CE                           289  
000010CE                           290  
000010CE                           291  OP_EORI:  ;(optional)
000010CE                           292  
000010CE                           293  
000010CE                           294  
000010CE                           295  OP_CMPI:  ;(optional)
000010CE                           296  
000010CE                           297  
000010CE                           298  
000010CE                           299  OP_MOVE.B:
000010CE                           300  
000010CE                           301  
000010CE                           302  
000010CE                           303  OP_MOVEA.L:
000010CE                           304  
000010CE                           305  
000010CE                           306  
000010CE                           307  OP_MOVE.L:
000010CE                           308  
000010CE                           309  
000010CE                           310  
000010CE                           311  OP_MOVEA.W:
000010CE                           312  
000010CE                           313  
000010CE                           314  
000010CE                           315  OP_MOVE.W:
000010CE                           316  
000010CE                           317  
000010CE                           318  
000010CE                           319  OP_NOP:
000010CE                           320  
000010CE                           321  
000010CE                           322  
000010CE                           323  OP_MOVEM:
000010CE                           324  
000010CE                           325  
000010CE                           326  
000010CE                           327  OP_LEA:
000010CE                           328  
000010CE                           329  
000010CE                           330  
000010CE                           331  OP_CLR:  ;(optional)
000010CE                           332  
000010CE                           333  
000010CE                           334  
000010CE                           335  OP_NOT:  ;(optional)
000010CE                           336  
000010CE                           337  
000010CE                           338  
000010CE                           339  OP_EXT:  ;(optional)
000010CE                           340  
000010CE                           341  
000010CE                           342  
000010CE                           343  OP_TRAP:  ;(optional)
000010CE                           344  
000010CE                           345  
000010CE                           346   
000010CE                           347  OP_STOP:  ;(optional)
000010CE                           348  
000010CE                           349  
000010CE                           350  
000010CE                           351  OP_RTE:  ;(optional)
000010CE                           352  
000010CE                           353  
000010CE                           354  
000010CE                           355  OP_RTS:  ;(optional)
000010CE                           356  
000010CE                           357  
000010CE                           358  
000010CE                           359  OP_JSR:  ;(optional)
000010CE                           360  
000010CE                           361  
000010CE                           362  
000010CE                           363  OP_JMP:  ;(optional)
000010CE                           364  
000010CE                           365  
000010CE                           366  
000010CE                           367  OP_ADDQ:
000010CE                           368  
000010CE                           369  
000010CE                           370  
000010CE                           371  OP_SUBQ:  ;(optional)
000010CE                           372  
000010CE                           373  
000010CE                           374  
000010CE                           375  OP_BRA:                                     ;???? DO WE DEFINE SIZE HERE OR AFTER????
000010CE                           376  
000010CE                           377  
000010CE                           378  
000010CE                           379  OP_BSR:
000010CE                           380  
000010CE                           381  
000010CE                           382  
000010CE                           383  OP_BEQ:
000010CE                           384  
000010CE                           385  
000010CE                           386  
000010CE                           387  OP_MOVEQ:
000010CE                           388  
000010CE                           389  
000010CE                           390  
000010CE                           391  OP_DIVU:
000010CE                           392  
000010CE                           393  
000010CE                           394  
000010CE                           395  OP_DIVS  ;(optional)
000010CE                           396  
000010CE                           397  
000010CE                           398  
000010CE                           399  OP_OR  ;(optional)
000010CE                           400  
000010CE                           401  
000010CE                           402  
000010CE                           403  OP_SUB:
000010CE                           404  
000010CE                           405  
000010CE                           406  
000010CE                           407  OP_CMP:
000010CE                           408  
000010CE                           409  
000010CE                           410  
000010CE                           411  OP_EOR:  ;(optional)
000010CE                           412  
000010CE                           413  
000010CE                           414  
000010CE                           415  OP_MULU:
000010CE                           416  
000010CE                           417  
000010CE                           418  
000010CE                           419  OP_MULS:  ;(optional)
000010CE                           420  
000010CE                           421  
000010CE                           422  
000010CE                           423  OP_AND:  ;(optional)
000010CE                           424  
000010CE                           425  
000010CE                           426  
000010CE                           427  OP_ADD:
000010CE                           428  
000010CE                           429  
000010CE                           430  
000010CE                           431  OP_ADDA:
000010CE                           432  
000010CE                           433  
000010CE                           434  
000010CE                           435  OP_ASL:
000010CE                           436  
000010CE                           437  
000010CE                           438  
000010CE                           439  OP_ASR:
000010CE                           440  
000010CE                           441  
000010CE                           442  
000010CE                           443  
000010CE                           444  OP_LSL:  ;(optional)
000010CE                           445  
000010CE                           446  
000010CE                           447  
000010CE                           448  
000010CE                           449  OP_LSR:  ;(optional)
000010CE                           450  
000010CE                           451  
000010CE                           452  
000010CE                           453  
000010CE                           454  OP_ROL:  ;(optional)
000010CE                           455  
000010CE                           456  
000010CE                           457  
000010CE                           458  
000010CE                           459  OP_ROR:  ;(optional)
000010CE                           460  
000010CE                           461  
000010CE                           462  
000010CE                           463  
000010CE                           464  OP_UNSUPPORTED_OPCODE:
000010CE                           465  
000010CE                           466  
000010CE                           467  
000010CE                           468  
000010CE                           469  ;******************************** ATOI *********************************************
000010CE                           470  ATOI:
000010CE  2401                     471          MOVE.L      D1,D2                   ;loop variable (size) is in D2
000010D0  2449                     472          MOVEA.L     A1,A2                   ;pointer to next char
000010D2  4244                     473          CLR         D4
000010D4                           474  
000010D4                           475  ATOI_LOOP  
000010D4  4243                     476          CLR         D3                      ;clear d3
000010D6                           477          ;CMP.B       #0,D2
000010D6                           478          ;BEQ         ATOI_DONE               ;DONE
000010D6  5382                     479          SUBI.L      #1,D2                   ;subtract 1 from loop counter
000010D8  161A                     480          MOVE.B      (A2)+,D3                 ;move current byte to D3, then increment to next
000010DA  B63C 002F                481          CMP.B       #$2F,D3
000010DE  6F00 0060                482          BLE         ATOI_ERROR              ;if less than 30, not a number, branch to error
000010E2  B63C 0039                483          CMP.B       #$39,D3                 ;check byte to see if number or letter
000010E6  6F00 002A                484          BLE         ATOI_NUMBER             ;30<x<39 --> number
000010EA  B63C 0040                485          CMP.B       #$40,D3
000010EE  6F00 0050                486          BLE         ATOI_ERROR
000010F2  B63C 0046                487          CMP.B       #$46,D3
000010F6  6F00 0024                488          BLE         ATOI_UPPERCASE_LETTER   ;less than 47, it is uppercase letter
000010FA  B63C 0060                489          CMP.B       #$60,D3
000010FE  6F00 0040                490          BLE         ATOI_ERROR
00001102  B63C 0066                491          CMP.B       #$66,D3
00001106  6F00 001E                492          BLE         ATOI_LOWERCASE_LETTER
0000110A  B63C 0067                493          CMP.B       #$67,D3
0000110E  6C00 0030                494          BGE         ATOI_ERROR
00001112                           495          
00001112                           496          ;BNE         ATOI_LOOP                    ;run loop
00001112                           497      
00001112                           498  
00001112                           499  ATOI_NUMBER
00001112                           500  ;number --> d1 = d1 - $30
00001112  0403 0030                501      SUBI.B          #$30, D3                    ;subtract 30 if number
00001116                           502      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
00001116  4EF9 00001130            503      JMP             ATOI_FORMAT                 ;testing
0000111C                           504      ;JMP            ATOI_LOOP                   ;loop
0000111C                           505  
0000111C                           506  ATOI_UPPERCASE_LETTER
0000111C                           507  ;letter --> d1 = d1 - $37
0000111C  0403 0037                508      SUBI.B          #$37,D3                     ;subtract 37 if UPPER case letter
00001120                           509      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
00001120  4EF9 00001130            510      JMP             ATOI_FORMAT                 ;testing
00001126                           511      ;JMP            ATOI_LOOP                   ;loop
00001126                           512  
00001126                           513  ATOI_LOWERCASE_LETTER
00001126  0403 0057                514      SUBI.B          #$57,D3                     ;subtract 57(20 + 37)
0000112A                           515      ;MOVE.B          D3,(A2)+                    ;move into A2 and post increment pointer
0000112A  4EF9 00001130            516      JMP             ATOI_FORMAT                 ;testing
00001130                           517      ;JMP            ATOI_LOOP                  ;loop
00001130                           518  
00001130                           519  
00001130                           520  ATOI_FORMAT
00001130  D803                     521      ADD.B           D3,D4                       ;add the byte to D4 so can add later   
00001132  B43C 0000                522      CMP.B           #0,D2                       
00001136  6700 0008                523      BEQ             ATOI_DONE                   ;check if done (loop counter D2 is at 0)
0000113A  E984                     524      ASL.L           #4,D4                       ;logical shift left to make room
0000113C  4EF8 10D4                525      JMP             ATOI_LOOP                   ;go back to loop
00001140                           526  
00001140                           527  ATOI_ERROR
00001140                           528      ;come back to handle error when out of range
00001140                           529      
00001140                           530  
00001140                           531  
00001140                           532  ;****************************** Validate Addresses **************************************
00001140                           533  
00001140                           534  VALIDATE_BEGINNING:
00001140                           535      
00001140                           536  
00001140                           537  ATOI_DONE 
00001140  2284                     538      MOVE.L         D4,(A1)                      ;at this point, move the new address in D4 to mem location                                
00001142  4E75                     539      RTS                                         ;used to RTS after a branch statement
00001144                           540  
00001144                           541      
00001144                           542  ;******************** MESSAGES ***************************************
00001144= 57 65 6C 63 6F 6D ...    543  welcome_message         DC.B    'Welcome to 68k disassembler',CR,LF,0
00001162                           544  
00001162= 50 6C 65 61 73 65 ...    545  get_start_address       DC.B    'Please enter a starting address in hexadecimal',CR,LF,0
00001193                           546  
00001193= 50 6C 65 61 73 65 ...    547  get_end_address         DC.B    'Please enter an ending address in hexadecimal',CR,LF,0
000011C3                           548  
000011C3= 49 6E 76 61 6C 69 ...    549  atoi_error_invalid      DC.B    'Invalid address, characters must be $0-F',CR,LF,0
000011EE                           550  
000011EE                           551  ascii_start:
000011EE                           552      DS.w    10          ;specify size later?
00001202                           553      
00001202                           554  ascii_end:
00001202                           555      DS.w    10          ;specify size later?
00001216                           556  
00001216                           557  decoded_string          ;storing op code
00001216                           558      DS.W    64          ;do we leave as .w or change to .l ?
00001296                           559      
00001296                           560  
00001296                           561      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_END           1202
ASCII_START         11EE
ATOI                10CE
ATOI_DONE           1140
ATOI_ERROR          1140
ATOI_ERROR_INVALID  11C3
ATOI_FORMAT         1130
ATOI_LOOP           10D4
ATOI_LOWERCASE_LETTER  1126
ATOI_NUMBER         1112
ATOI_UPPERCASE_LETTER  111C
BUFFER_SIZE         40
CLEAR_BUFFER        1068
CR                  D
DECODED_STRING      1216
DECODING_LOOP       105E
DONE                1064
GET_ENDING_ADDRESS  1038
GET_END_ADDRESS     1193
GET_STARTING_ADDRESS  1012
GET_START_ADDRESS   1162
LF                  A
LINES_PER_SCREEN    1E
NIBBLE2             F00
NIBBLE3             F0
NIBBLE4             F
OPCODE0000          10C8
OPCODE0001          10CE
OPCODE0010          10CE
OPCODE0011          10CE
OPCODE0100          10CE
OPCODE0101          10CE
OPCODE0110          10CE
OPCODE0111          10CE
OPCODE1000          10CE
OPCODE1001          10CE
OPCODE1010          10CE
OPCODE1011          10CE
OPCODE1100          10CE
OPCODE1101          10CE
OPCODE1110          10CE
OPCODE1111          10CE
OP_0000_TABLE       10CE
OP_0001_TABLE       10CE
OP_0010_TABLE       10CE
OP_0011_TABLE       10CE
OP_0100_TABLE       10CE
OP_0101_TABLE       10CE
OP_0110_TABLE       10CE
OP_0111_TABLE       10CE
OP_1000_TABLE       10CE
OP_1001_TABLE       10CE
OP_1010_TABLE       10CE
OP_1011_TABLE       10CE
OP_1100_TABLE       10CE
OP_1101_TABLE       10CE
OP_1110_TABLE       10CE
OP_1111_TABLE       10CE
OP_ADD              10CE
OP_ADDA             10CE
OP_ADDI             10CE
OP_ADDQ             10CE
OP_AND              10CE
OP_ANDI             10CE
OP_ASL              10CE
OP_ASR              10CE
OP_BEQ              10CE
OP_BRA              10CE
OP_BSR              10CE
OP_CLR              10CE
OP_CMP              10CE
OP_CMPI             10CE
OP_DIVS             10CE
OP_DIVU             10CE
OP_EOR              10CE
OP_EORI             10CE
OP_EXT              10CE
OP_JMP              10CE
OP_JSR              10CE
OP_LEA              10CE
OP_LSL              10CE
OP_LSR              10CE
OP_MOVE.B           10CE
OP_MOVE.L           10CE
OP_MOVE.W           10CE
OP_MOVEA.L          10CE
OP_MOVEA.W          10CE
OP_MOVEM            10CE
OP_MOVEQ            10CE
OP_MULS             10CE
OP_MULU             10CE
OP_NOP              10CE
OP_NOT              10CE
OP_OR               10CE
OP_ORI              10CE
OP_ROL              10CE
OP_ROR              10CE
OP_RTE              10CE
OP_RTS              10CE
OP_STOP             10CE
OP_SUB              10CE
OP_SUBI             10CE
OP_SUBQ             10CE
OP_TABLE            1068
OP_TRAP             10CE
OP_UNSUPPORTED_OPCODE  10CE
RIGHT1              1
RIGHT10             A
RIGHT12             C
RIGHT16             10
RIGHT2              2
RIGHT24             18
RIGHT3              3
RIGHT4              4
RIGHT5              5
RIGHT6              6
RIGHT7              7
RIGHT8              8
RIGHT9              9
STACK               A0000
START               1000
START_DECODING      105E
START_OPCODE        1068
VALIDATE_BEGINNING  1140
WELCOME             1006
WELCOME_MESSAGE     1144
